"use strict";
jQuery.sap.declare("sap.fpa.ui.control.analyticgrid.Grid");

jQuery.sap.require("sap.ui.core.Control");

/**
 * Constructor for a new analyticgrid/Grid.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getHideGridIndex hideGridIndex} : boolean (default: false)</li>
 * <li>{@link #getHideTinyBar hideTinyBar} : boolean (default: false)</li>
 * <li>{@link #getHideDimensionAttributes hideDimensionAttributes} : boolean (default: false)</li>
 * <li>{@link #getDisableMasterDataPlanning disableMasterDataPlanning} : boolean (default: false)</li>
 * <li>{@link #getDisableProfiling disableProfiling} : boolean (default: false)</li>
 * <li>{@link #getGridDataProvider gridDataProvider} : object</li>
 * <li>{@link #getCommentsDataProvider commentsDataProvider} : object</li>
 * <li>{@link #getDataCellValidator dataCellValidator} : object</li>
 * <li>{@link #getShowColumnHeaderVertically showColumnHeaderVertically} : boolean (default: false)</li>
 * <li>{@link #getHideDimensionsName hideDimensionsName} : boolean (default: false)</li>
 * <li>{@link #getLocalMembers localMembers} : object</li>
 * <li>{@link #getFormulaHelper formulaHelper} : object</li>
 * <li>{@link #getMemberFormula memberFormula} : object</li>
 * <li>{@link #getFormulaBar formulaBar} : object</li>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContextMenu contextMenu} : sap.m.Popover</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.fpa.ui.control.analyticgrid.Grid#event:gridDataModified gridDataModified} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.fpa.ui.control.analyticgrid.Grid#event:dimSelectorPressed dimSelectorPressed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.fpa.ui.control.analyticgrid.Grid#event:dimHeaderPressed dimHeaderPressed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.fpa.ui.control.analyticgrid.Grid#event:dataCellPressed dataCellPressed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.fpa.ui.control.analyticgrid.Grid#event:drillDown drillDown} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.fpa.ui.control.analyticgrid.Grid#event:undoPerformed undoPerformed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.fpa.ui.control.analyticgrid.Grid#event:redoPerformed redoPerformed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.fpa.ui.control.analyticgrid.Grid#event:updateMemberFormula updateMemberFormula} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.fpa.ui.control.analyticgrid.Grid#event:updateFormulaData updateFormulaData} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.fpa.ui.control.analyticgrid.Grid#event:selectionChanged selectionChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.fpa.ui.control.analyticgrid.Grid#event:afterRender afterRender} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Grid of Analytic Grid
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 0.0.1-SNAPSHOT
 *
 * @constructor
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid
 */
sap.ui.core.Control.extend("sap.fpa.ui.control.analyticgrid.Grid", { metadata : {

    // ---- object ----
    publicMethods : [
    	// methods
    	"changeGridCellValue", "beginBatchUpdate", "endBatchUpdate", "getGridData", "setGridData", "updateCustomCells", "updateCustomCell", "setComments", "getModifiedCells", "setModifiedCells", "getOriginalCells", "submitData", "undo", "redo", "focusOnCell", "highlightCells", "getSelectedMemberContext", "getSelectedCoordinates", "getFocusedCoordinate", "resetGrid", "getCellObject", "setInitialFocus", "exportGridContent", "insertLineAt", "deleteLineAt", "getHeaderContext", "setLocks", "getLocks", "unsetLocks", "getColWidths", "getRowHeights", "cleanPersistData", "addFormulaToCell", "isFormulaString", "registerCellDecorator", "unregisterCellDecorator", "removeCustomCell", "removeCustomCellsInRegion", "getSelectedRegions", "setSelectedRegions", "getSelectedCustomCellsCoordinates"
    ],
	// ---- control specific ----
	library : "sap.fpa.ui.control",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "", defaultValue : "100%"},
		"height" : {type : "sap.ui.core.CSSSize", group : "", defaultValue : "100%"},
		"hideGridIndex" : {type : "boolean", group : "", defaultValue : false},
		"hideTinyBar" : {type : "boolean", group : "", defaultValue : false},
		"hideDimensionAttributes" : {type : "boolean", group : "", defaultValue : false},
		"disableMasterDataPlanning" : {type : "boolean", group : "", defaultValue : false},
		"disableProfiling" : {type : "boolean", group : "", defaultValue : false},
		"gridDataProvider" : {type : "object", group : "", defaultValue : null},
		"commentsDataProvider" : {type : "object", group : "", defaultValue : null},
		"dataCellValidator" : {type : "object", group : "", defaultValue : null},
		"showColumnHeaderVertically" : {type : "boolean", group : "", defaultValue : false},
		"hideDimensionsName" : {type : "boolean", group : "", defaultValue : false},
		"localMembers" : {type : "object", group : "Misc", defaultValue : null},
		"formulaHelper" : {type : "object", group : "Misc", defaultValue : null},
		"memberFormula" : {type : "object", group : "Misc", defaultValue : null},
		"formulaBar" : {type : "object", group : "Misc", defaultValue : null},
		"accDimId" : {type : "string", group : "Misc", defaultValue : ""},
		"formatTypes" : {type : "object", group : "Misc", defaultValue : null},
		"inputControl" : {type : "boolean", group : "", defaultValue : false},
		"disableDefaultPaste" : {type : "boolean", group : "", defaultValue : false},
		"batching" : {type : "boolean", group : "", defaultValue : false},
		"customCellFormatter" : {type : "object", group : "Misc", defaultValue : false},
		"colHeaderTooltips" : {type : "object", group : "Misc", defaultValue : [] },
		"disableEdit" : {type : "boolean", group : "", defaultValue : false },
		//support for injecting the allocation vertical tooling for pool mapping 
		"poolMapping" : {type : "object", group : "Misc", defaultValue : null},
		//function to be executed before the grid's blur event handler. Currently used by the allocation vertical. 
		"onBeforeBlur" : {type : "object", group : "Misc", defaultValue : null},
		"filterDimensions" : {type : "object", group : "Misc", defaultValue: {}},
		"enforceBackendHierarchyOperations" : {type : "boolean", group : "", defaultValue : false},
	},
	aggregations : {
        "contextMenu" : {type : "sap.m.Popover", multiple : false}
	},
	events : {
		"gridEditStart" : {},
		"gridEditChange" : {},
		"gridDataModified" : {}, 
		"dimSelectorPressed" : {}, 
		"dimHeaderPressed" : {}, 
		"dataCellPressed" : {}, 
		"drillDown" : {}, 
		"undoPerformed" : {}, 
		"redoPerformed" : {}, 
		"updateMemberFormula" : {}, 
		"updateFormulaData" : {}, 
		"selectionChanged" : {}, 
		"afterRender" : {}, 
        "reportCopy" : {}, 
        "reportPaste" : {},
        "afterViewFirstRender" : {},
        "showColHeaderTooltip" : {},
        "gridCustomBatchUpdated" : {}
	}
}});


/**
 * Creates a new subclass of class sap.fpa.ui.control.analyticgrid.Grid with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.fpa.ui.control.analyticgrid.Grid.extend
 * @function
 */

sap.fpa.ui.control.analyticgrid.Grid.M_EVENTS = {"gridDataModified":"gridDataModified","dimSelectorPressed":"dimSelectorPressed","dimHeaderPressed":"dimHeaderPressed","dataCellPressed":"dataCellPressed","drillDown":"drillDown","undoPerformed":"undoPerformed","redoPerformed":"redoPerformed","updateMemberFormula":"updateMemberFormula","updateFormulaData":"updateFormulaData","selectionChanged":"selectionChanged","afterRender":"afterRender","reportCopy":"reportCopy","reportPaste":"reportPaste"};


/**
 * Getter for property <code>width</code>.
 * Width of analytic grid
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Height of analytic grid
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#setHeight
 * @function
 */


/**
 * Getter for property <code>hideGridIndex</code>.
 * hide the grid index column/row
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>hideGridIndex</code>
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#getHideGridIndex
 * @function
 */

/**
 * Setter for property <code>hideGridIndex</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bHideGridIndex  new value for property <code>hideGridIndex</code>
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#setHideGridIndex
 * @function
 */


/**
 * Getter for property <code>hideTinyBar</code>.
 * hide the grid tiny bar
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>hideTinyBar</code>
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#getHideTinyBar
 * @function
 */

/**
 * Setter for property <code>hideTinyBar</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bHideTinyBar  new value for property <code>hideTinyBar</code>
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#setHideTinyBar
 * @function
 */


/**
 * Getter for property <code>hideDimensionAttributes</code>.
 * hide dimension attributes
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>hideDimensionAttributes</code>
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#getHideDimensionAttributes
 * @function
 */

/**
 * Setter for property <code>hideDimensionAttributes</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bHideDimensionAttributes  new value for property <code>hideDimensionAttributes</code>
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#setHideDimensionAttributes
 * @function
 */


/**
 * Getter for property <code>disableMasterDataPlanning</code>.
 * disable master data planning
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>disableMasterDataPlanning</code>
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#getDisableMasterDataPlanning
 * @function
 */

/**
 * Setter for property <code>disableMasterDataPlanning</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDisableMasterDataPlanning  new value for property <code>disableMasterDataPlanning</code>
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#setDisableMasterDataPlanning
 * @function
 */


/**
 * Getter for property <code>disableProfiling</code>.
 * disable performance profiling
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>disableProfiling</code>
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#getDisableProfiling
 * @function
 */

/**
 * Setter for property <code>disableProfiling</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDisableProfiling  new value for property <code>disableProfiling</code>
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#setDisableProfiling
 * @function
 */


/**
 * Getter for property <code>gridDataProvider</code>.
 * Grid data provider of analytic grid.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>gridDataProvider</code>
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#getGridDataProvider
 * @function
 */

/**
 * Setter for property <code>gridDataProvider</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oGridDataProvider  new value for property <code>gridDataProvider</code>
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#setGridDataProvider
 * @function
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype.setGridDataProvider = function(oDataProvider){
    this._shutDownGridDroviderEvent();
    this.setProperty("gridDataProvider",oDataProvider);
    this._startGridDProviderEvent();
};

/**
 * Getter for property <code>disableEdit</code>.
 *
 * For now, the flag in cells has higher priority than the DisableEdit flags. Although the DisableEdit flag is set to true, the private version cell/dummary cells that user manually changed
 * to CELL_FLAGS.EDITABLE would be editable. The "editable" property in the DOM is correct. 
 * For now, this flag is only applied to DUMMY cells. For other editable cell type(ROW_DIMENSION_HEADER,DATA_CELL,COMMENT_CELL,NULL_CELL), this flag doesn't work. If you want to work, please     
 * update the related codes in the _doCalc.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>disableEdit</code>
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#getDisableEdit
 * @function
 */

/**
 * Setter for property <code>disableEdit</code>.
 
 * For now, the flag in cells has higher priority than the DisableEdit flags. Although the DisableEdit flag is set to true, the private version cell/dummary cells that user manually changed
 * to CELL_FLAGS.EDITABLE would be editable. The "editable" property in the DOM is correct. 
 * For now, this flag is only applied to DUMMY cells. For other editable cell type(ROW_DIMENSION_HEADER,DATA_CELL,COMMENT_CELL,NULL_CELL), this flag doesn't work. If you want to work, please     
 * update the related codes in the _doCalc.
 *
 * Default value is <code>false</code> 
 * @param {boolean} bValue new value for property <code>disableEdit</code>
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#setDisableEdit
 * @function
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype.setDisableEdit = function(bValue){
    var bPreviouse = this.getProperty("disableEdit");
    if(bPreviouse !== bValue){
        //bSuppressInvalidate
        this.setProperty("disableEdit",bValue,true);
        this._redrawGrid();
    }
};

/**
 * Getter for property <code>commentsDataProvider</code>.
 * Comments data provider of analytic grid.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>commentsDataProvider</code>
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#getCommentsDataProvider
 * @function
 */

/**
 * Setter for property <code>commentsDataProvider</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oCommentsDataProvider  new value for property <code>commentsDataProvider</code>
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#setCommentsDataProvider
 * @function
 */


/**
 * Getter for property <code>dataCellValidator</code>.
 * Data cell validator; expect function that accept string data and return true/false to indicate if input is valid
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>dataCellValidator</code>
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#getDataCellValidator
 * @function
 */

/**
 * Setter for property <code>dataCellValidator</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oDataCellValidator  new value for property <code>dataCellValidator</code>
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#setDataCellValidator
 * @function
 */


/**
 * Getter for property <code>showColumnHeaderVertically</code>.
 * display column header vertically
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showColumnHeaderVertically</code>
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#getShowColumnHeaderVertically
 * @function
 */

/**
 * Setter for property <code>showColumnHeaderVertically</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowColumnHeaderVertically  new value for property <code>showColumnHeaderVertically</code>
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#setShowColumnHeaderVertically
 * @function
 */


/**
 * Getter for property <code>hideDimensionsName</code>.
 * flag for Hiding the dimensions Names
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>hideDimensionsName</code>
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#getHideDimensionsName
 * @function
 */

/**
 * Setter for property <code>hideDimensionsName</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bHideDimensionsName  new value for property <code>hideDimensionsName</code>
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#setHideDimensionsName
 * @function
 */


/**
 * Getter for property <code>localMembers</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>localMembers</code>
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#getLocalMembers
 * @function
 */

/**
 * Setter for property <code>localMembers</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oLocalMembers  new value for property <code>localMembers</code>
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#setLocalMembers
 * @function
 */


/**
 * Getter for property <code>formulaHelper</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>formulaHelper</code>
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#getFormulaHelper
 * @function
 */

/**
 * Setter for property <code>formulaHelper</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oFormulaHelper  new value for property <code>formulaHelper</code>
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#setFormulaHelper
 * @function
 */


/**
 * Getter for property <code>memberFormula</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>memberFormula</code>
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#getMemberFormula
 * @function
 */

/**
 * Setter for property <code>memberFormula</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oMemberFormula  new value for property <code>memberFormula</code>
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#setMemberFormula
 * @function
 */


/**
 * Getter for property <code>formulaBar</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>formulaBar</code>
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#getFormulaBar
 * @function
 */

/**
 * Setter for property <code>formulaBar</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oFormulaBar  new value for property <code>formulaBar</code>
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#setFormulaBar
 * @function
 */

/**
 * Getter for property <code>accDimId</code>.
 * 
 *
 * Default value is empty/<code>""</code>
 *
 * @return {string} the value of property <code>accDimId</code>
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#getAccDimId
 * @function
 */

/**
 * Setter for property <code>accDimId</code>.
 *
 * Default value is empty/<code>""</code> 
 *
 * @param {object} accDimId  new value for property <code>accDimId</code>
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#setAccDimId
 * @function
 */

/**
 * Getter for aggregation <code>contextMenu</code>.<br/>
 * 
 * 
 * @return {sap.m.Popover}
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#getContextMenu
 * @function
 */


/**
 * Setter for the aggregated <code>contextMenu</code>.
 * @param {sap.m.Popover} oContextMenu
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#setContextMenu
 * @function
 */
	

/**
 * Destroys the contextMenu in the aggregation 
 * named <code>contextMenu</code>.
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#destroyContextMenu
 * @function
 */


/**
 * the event will be fired when grid data is modified 
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid#gridDataModified
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'gridDataModified' event of this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/> itself. 
 *  
 * the event will be fired when grid data is modified 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/> itself.
 *
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#attachGridDataModified
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'gridDataModified' event of this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#detachGridDataModified
 * @function
 */

/**
 * Fire event gridDataModified to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @protected
 * @name sap.fpa.ui.control.analyticgrid.Grid#fireGridDataModified
 * @function
 */


/**
 * the event will be fired when dimension selector is pressed 
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid#dimSelectorPressed
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'dimSelectorPressed' event of this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/> itself. 
 *  
 * the event will be fired when dimension selector is pressed 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/> itself.
 *
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#attachDimSelectorPressed
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'dimSelectorPressed' event of this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#detachDimSelectorPressed
 * @function
 */

/**
 * Fire event dimSelectorPressed to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @protected
 * @name sap.fpa.ui.control.analyticgrid.Grid#fireDimSelectorPressed
 * @function
 */


/**
 * the event will be fired when dimension header is pressed 
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid#dimHeaderPressed
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'dimHeaderPressed' event of this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/> itself. 
 *  
 * the event will be fired when dimension header is pressed 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/> itself.
 *
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#attachDimHeaderPressed
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'dimHeaderPressed' event of this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#detachDimHeaderPressed
 * @function
 */

/**
 * Fire event dimHeaderPressed to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @protected
 * @name sap.fpa.ui.control.analyticgrid.Grid#fireDimHeaderPressed
 * @function
 */


/**
 * the event will be fired when dimension header is pressed 
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid#dataCellPressed
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'dataCellPressed' event of this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/> itself. 
 *  
 * the event will be fired when dimension header is pressed 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/> itself.
 *
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#attachDataCellPressed
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'dataCellPressed' event of this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#detachDataCellPressed
 * @function
 */

/**
 * Fire event dataCellPressed to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @protected
 * @name sap.fpa.ui.control.analyticgrid.Grid#fireDataCellPressed
 * @function
 */


/**
 * the event will be fired when drill down is detected 
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid#drillDown
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'drillDown' event of this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/> itself. 
 *  
 * the event will be fired when drill down is detected 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/> itself.
 *
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#attachDrillDown
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'drillDown' event of this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#detachDrillDown
 * @function
 */

/**
 * Fire event drillDown to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @protected
 * @name sap.fpa.ui.control.analyticgrid.Grid#fireDrillDown
 * @function
 */


/**
 * the event will be fired when undo is performed 
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid#undoPerformed
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'undoPerformed' event of this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/> itself. 
 *  
 * the event will be fired when undo is performed 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/> itself.
 *
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#attachUndoPerformed
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'undoPerformed' event of this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#detachUndoPerformed
 * @function
 */

/**
 * Fire event undoPerformed to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @protected
 * @name sap.fpa.ui.control.analyticgrid.Grid#fireUndoPerformed
 * @function
 */


/**
 * the event will be fired when redo is performed 
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid#redoPerformed
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'redoPerformed' event of this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/> itself. 
 *  
 * the event will be fired when redo is performed 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/> itself.
 *
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#attachRedoPerformed
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'redoPerformed' event of this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#detachRedoPerformed
 * @function
 */

/**
 * Fire event redoPerformed to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @protected
 * @name sap.fpa.ui.control.analyticgrid.Grid#fireRedoPerformed
 * @function
 */


/**
 *  
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid#updateMemberFormula
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'updateMemberFormula' event of this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/> itself.
 *
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#attachUpdateMemberFormula
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'updateMemberFormula' event of this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#detachUpdateMemberFormula
 * @function
 */

/**
 * Fire event updateMemberFormula to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @protected
 * @name sap.fpa.ui.control.analyticgrid.Grid#fireUpdateMemberFormula
 * @function
 */


/**
 *  
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid#updateFormulaData
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'updateFormulaData' event of this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/> itself.
 *
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#attachUpdateFormulaData
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'updateFormulaData' event of this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#detachUpdateFormulaData
 * @function
 */

/**
 * Fire event updateFormulaData to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @protected
 * @name sap.fpa.ui.control.analyticgrid.Grid#fireUpdateFormulaData
 * @function
 */


/**
 * This event will be fired when the focus cell or selection cells are changed 
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid#selectionChanged
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectionChanged' event of this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/> itself. 
 *  
 * This event will be fired when the focus cell or selection cells are changed 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/> itself.
 *
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#attachSelectionChanged
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectionChanged' event of this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#detachSelectionChanged
 * @function
 */

/**
 * Fire event selectionChanged to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @protected
 * @name sap.fpa.ui.control.analyticgrid.Grid#fireSelectionChanged
 * @function
 */


/**
 * This event will be fired after the grid has finished rendering 
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid#afterRender
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterRender' event of this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/> itself. 
 *  
 * This event will be fired after the grid has finished rendering 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/> itself.
 *
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#attachAfterRender
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterRender' event of this <code>sap.fpa.ui.control.analyticgrid.Grid</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @public
 * @name sap.fpa.ui.control.analyticgrid.Grid#detachAfterRender
 * @function
 */

/**
 * Fire event afterRender to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.fpa.ui.control.analyticgrid.Grid} <code>this</code> to allow method chaining
 * @protected
 * @name sap.fpa.ui.control.analyticgrid.Grid#fireAfterRender
 * @function
 */


/**
 * get the grid data
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid.prototype.getGridData
 * @function

 * @type object
 * @public
 */


/**
 * explicitly set grid data; if you don't want to bind gridDataProvider
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid.prototype.setGridData
 * @function

 * @type object
 * @public
 */


/**
 * update custom data for dummy cells
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid.prototype.updateCustomCells
 * @function

 * @type object
 * @public
 */


/**
 * explicitly set comments; if you don't want to bind commentsDataProvider
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid.prototype.setComments
 * @function

 * @type object
 * @public
 */


/**
 * get modified cells
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid.prototype.getModifiedCells
 * @function

 * @type object
 * @public
 */


/**
 * set modified cells - in case you want to modify data cells but won't change grid layout and status; if you don't want to bind gridDataProvider; typical used in planning scenario.
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid.prototype.setModifiedCells
 * @function

 * @type object
 * @public
 */


/**
 * get original cells; the same format of modified cells
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid.prototype.getOriginalCells
 * @function

 * @type object
 * @public
 */


/**
 * explicitly update status to submitted - undo/redo stack and modified cells will be clean; if you don't want to bind gridDataProvider
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid.prototype.submitData
 * @function

 * @type object
 * @public
 */


/**
 * undo last data change
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid.prototype.undo
 * @function

 * @type boolean
 * @public
 */


/**
 * redo last data change
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid.prototype.redo
 * @function

 * @type boolean
 * @public
 */


/**
 * focus on the cell of given context
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid.prototype.focusOnCell
 * @function

 * @type object
 * @public
 */


/**
 * highlight cells of given contexts
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid.prototype.highlightCells
 * @function

 * @type object
 * @public
 */


/**
 * 
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid.prototype.getSelectedMemberContext
 * @function

 * @type void
 * @public
 */


/**
 * 
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid.prototype.getSelectedCoordinates
 * @function

 * @type void
 * @public
 */


/**
 * 
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid.prototype.resetGrid
 * @function

 * @type void
 * @public
 */


/**
 * 
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid.prototype.getCellObject
 * @function

 * @type object
 * @public
 */


/**
 * highlight cells of given contexts for the next re-render
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid.prototype.setInitialFocus
 * @function

 * @type object
 * @public
 */


/**
 * export to a list of cell objects for the whole grid content
 *
 * @name sap.fpa.ui.control.analyticgrid.Grid.prototype.exportGridContent
 * @function

 * @type object
 * @public
 */


// Start of sap\epm\ui\control\analyticgrid\Grid.js
jQuery.sap.require("sap.fpa.ui.control.infra.constants.Analyticgrid");
jQuery.sap.require("sap.fpa.ui.infra.common.Utility");
//jQuery.sap.require("sap.fpa.ui.control.Utility");
//jQuery.sap.require("sap.fpa.ui.infra.performance.Profiler");
//jQuery.sap.require("sap.fpa.ui.infra.common.FeatureToggle");
//jQuery.sap.require("sap.m.MessageToast");

/*jQuery.sap.require("sap.fpa.ui.control.thirdparty.jgestures");*///remove it, not support mobile.
sap.fpa.ui.control.analyticgrid.Grid._LOCAL_MEMBER_TAG = "__local_member";

sap.fpa.ui.control.analyticgrid.Grid._CELL_TYPE = {
    DUMMY_CELL : 0,
    COL_INDEX_CELL : 1,
    ROW_INDEX_CELL : 2,
    DIMENSION_SELECTOR : 3,
    ROW_DIMENSION_HEADER : 4,
    COL_DIMENSION_HEADER : 5,
    ROW_DIMENSION_MEMBER : 6,
    COL_DIMENSION_MEMBER : 7,
    DATA_CELL : 8,
    COMMENT_TITLE : 9,
    COMMENT_HEADER : 10,
    COMMENT_CELL : 11,
    COL_TINYBAR : 12,
    ROW_TINYBAR : 13,
    ROW_DIMENSION_HEADER_ATTR : 14,
    COL_DIMENSION_HEADER_ATTR : 15,
    ROW_DIMENSION_MEMBER_ATTR : 16,
    COL_DIMENSION_MEMBER_ATTR : 17,
    NULL_CELL : 99
};

sap.fpa.ui.control.analyticgrid.Grid._CONDITION = {
    NONE : 0,
    GREEN : 1,
    YELLOW : 2,
    RED : 3
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.init = function() {
    //initialization	
    this.bundleManager = sap.fpa.ui.infra.common.BundleManager.getLibBundle("sap.fpa.ui.control");
    this._initialConstants();
    this._cleanData(true);
    this._initializeControls();

    this._fulfilled = false;
    //save the timeout event for navigation in cells
    this.arrTimeoutMove = [];
    //for drag selection out of grid layout issue
    this._resetAutoScroll();
    this._cellDecorators = [];
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.exit = function() {
    this._shutdownEventHandlers();
    this._destroyControls();
    this._cleanData(true);
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.onBeforeRendering = function() {
    this.profilingEnabled = !this.getDisableProfiling();
    this.pidOfRendering = this.profilingEnabled && this._PROFILER_.begin("analyticgrid.Grid.rendering");
    var pid = this.profilingEnabled && this._PROFILER_.begin("analyticgrid.Grid.onBeforeRendering");
    this._shutdownEventHandlers();

    //create controls onBeforeRendering() instead of init() because the properties cannot be read in init()
    this._generateHScrollBar();
    this._generateVScrollBar();

    if(this.profilingEnabled){
		this._PROFILER_.end(pid);
	}
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.onAfterRendering = function() {
    var pid = this.profilingEnabled && this._PROFILER_.begin("analyticgrid.Grid.onAfterRendering");
    var $self = this.$(), id = this.getId(), $focusedCell = $("#" + id + " td.focused"),
    //		$table = $("#" + id + " .sapEpmUiControlAnalyticgridGridTableSurround td:first-child");
    $table = $("#" + id + " .sapEpmUiControlAnalyticgridGridTableInner").parent();
    //ensure the grid fulfill in the desired area
    if (!this._fulfilled && ($self.innerHeight() !== $table.height() || $self.innerWidth() !== $table.width())) {
        setTimeout(jQuery.proxy(function() {
            this._fulfilled = true;
            this.invalidate();
        }, this), 0);

        return;
    }

    this._recalcViewableRange();
    this._startEventHandlers();
    this._generateTableDomCache();

    if ($focusedCell.length > 0) {
        if (($focusedCell.position().left < $table.width() || $focusedCell.position().left + $focusedCell.outerWidth() < $table
            .width()) &&
            ($focusedCell.position().top < $table.height() || $focusedCell.position().top + $focusedCell.outerHeight() < $table
                .height())) {
            $focusedCell.focus();
        }
    }
    
    /*
    recalc cell padding in case it has been changed in style file
    temp comment this out as it causes issues
    if($generalCell.length > 0) {
        var cellHeight = $generalCell.eq(0).outerHeight();
        if (cellHeight > 0) {
            this.CELL_PADDING = cellHeight - this.CELL_HEIGHT;
        };
     }
     */

    //place At the object formated cell value and calculate the viewable formatted controls cells.
    // var viewableFormatCells = this._calculateFormatControlCells();
    // for (i = 0; i < viewableFormatCells.length; i++) {
    //     var idxOfviewableFormatterCell = viewableFormatCells[i].idx, iColIndex = viewableFormatCells[i].colIndex, iRowIndex = viewableFormatCells[i].rowIndex;
    //     if (typeof this.arrViewableCells[iRowIndex][iColIndex] === "object") {//using the arrViewableCells firstly.
    //         this.arrViewableCells[iRowIndex][iColIndex].val.placeAt("divContainer" +
    //             idxOfviewableFormatterCell.toString(), "only");
    //     } else {
    //         if (typeof this.hashOfCellData[idxOfviewableFormatterCell].formatted === "object") {
    //             this.hashOfCellData[idxOfviewableFormatterCell].formatted.placeAt("divContainer" +
    //                 idxOfviewableFormatterCell.toString(), "only");
    //         }
    //     }
    // }

    this._drawSelectionBox();
    this._drawCellDecorator();
    //this._redrawAffectCells();

	this.fireAfterRender({
		gridDataLoaded : (this.oGridData !== null && this.oGridData !==undefined  || (this.oCustomGridData !== null && this.oCustomGridData !==undefined))
	});

	if(this.profilingEnabled){
		this._PROFILER_.end(pid);
	}
	if(this.profilingEnabled){
		this._PROFILER_.end(this.pidOfRendering);
	}
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.getModifiedCells = function() {
    return jQuery.extend(true, {}, this.modifiedCells);
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.getOriginalCells = function() {
    var originalCells = {};
    jQuery.each(this.hashOfCellData, function(idx, cell) {
        originalCells[idx] = {
            idx : idx,
            val : cell.val,
            formatted : cell.formatted,
            flags : cell.flags,
            invalid : cell.invalid
        };
    });

    return originalCells;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.setModifiedCells = function(modifiedCells) {
    this._onGridDataModified(modifiedCells);
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.submitData = function() {
    this._onGridDataSubmitted();
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.undo = function(options) {
    options = options || {};
    options.fromUndo = true;
    if (this.undoStack.length > 0) {
        var undoItems = this.undoStack.pop(), that = this;
        var dataOnly = undoItems[0].col !== undefined && undoItems[0].row;
        var x, y;
        //data cell undo
        if (dataOnly) {
            $.each(undoItems, function(index, undoItem) {
	            var currVal = that._getGridCellCurrVal(undoItem.col, undoItem.row);
	            that._changeGridCellValue(undoItem.col, undoItem.row, {
	                val : undoItem.val,
	                formatted : undoItem.formatted
	            }, options);
	            undoItem.val = currVal.val;
	            undoItem.formatted = currVal.formatted;   
	        });

            x = undoItems[0].col;
            y = undoItems[0].row;
            
            this.redoStack.push(undoItems);
	    //free undo
        } else {
            var undoObjects = [];
            var updateGrid = true;
            $.each(undoItems, function(index, undoItem) {
                var ux = undoItem.x, uy = undoItem.y;
                var oCell = jQuery.extend(true, {}, that._initCustomCell(ux, uy));
                var valueChanged = undoItem.val !== oCell.val;
                if(valueChanged) {
                    updateGrid = false;
                    that._changeGridCellValue(ux, uy, {
                        val : undoItem.val,
                        editValue : undoItem.editValue,
                        formatted : undoItem.formatted
                    }, options);
                }
                that._updateCustomCell(ux, uy, undoItem, true);
                undoObjects.push(oCell);
            });


            x = undoItems[0].x;
            y = undoItems[0].y;

            this.redoStack.push(undoObjects);
            if(updateGrid) {
                this._redrawGrid();
            }
        }




        this._focusOnCell(x, y, false, false, false);
        this._moveToCell(x, y);
        setTimeout(jQuery.proxy(function() { //make UI event asyncronized
            this.fireUndoPerformed({
                furtherUndo : this.undoStack.length > 0
            });
        }, this), 1);
    }

    return this.undoStack.length > 0; //indicate whether can continue undo or not
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.redo = function(options) {
    options = options || {};
    options.fromRedo = true;
	if (this.redoStack.length > 0) {
        var redoItems = this.redoStack.pop(), that = this;
        var dataOnly = redoItems[0].col !== undefined && redoItems[0].row;
        var x, y;
        //data cell undo
        if (dataOnly) {
            $.each(redoItems, function(index, redoItem) {
	            var currVal = that._getGridCellCurrVal(redoItem.col, redoItem.row);
	            that._changeGridCellValue(redoItem.col, redoItem.row, {
	                val : redoItem.val,
	                formatted : redoItem.formatted
	            }, options);
	            redoItem.val = currVal.val;
	            redoItem.formatted = currVal.formatted;   
	        });

            x = redoItems[0].col;
            y = redoItems[0].row;

            this.undoStack.push(redoItems);

	    //free redo
        } else {
            var redoObjects = [];
            var updateGrid = true;
            $.each(redoItems, function(index, redoItem) {
                var ux = redoItem.x, uy = redoItem.y;
                var oCell = jQuery.extend(true, {}, that._initCustomCell(ux, uy));
                var valueChanged = redoItem.val !== oCell.val;
                if(valueChanged) {
                    updateGrid = false;
                    that._changeGridCellValue(ux, uy, {
                        val : redoItem.val,
                        editValue : redoItem.editValue,
                        formatted : redoItem.formatted
                    }, options);
                }
                that._updateCustomCell(ux, uy, redoItem, true);
                redoObjects.push(oCell);
	        });

            x = redoItems[0].x;
            y = redoItems[0].y;

            this.undoStack.push(redoObjects);
            if(updateGrid) {
                this._redrawGrid();
            }
        }



        this._focusOnCell(x, y, false, false, false);
        this._moveToCell(x, y);
        setTimeout(jQuery.proxy(function() { //make UI event asyncronized
            this.fireRedoPerformed({
                furtherRedo : this.redoStack.length > 0
            });
        }, this), 1);
    }

    return this.redoStack.length > 0; //indicate whether can continue redo or not
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.setGridData = function(oData) {
	var data_type = sap.fpa.ui.control.infra.constants.Analyticgrid.DATA_TYPE;

	if (oData && oData.params) {
        if (oData.params.type === data_type.DATACELL) {
            this._onGridDataRefreshed(oData);
        } else if (oData.params.type === data_type.CUSTOMCELL) {
            this._onGridCustomDataRefreshed(oData);
        }
    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.getGridData = function(type) {
    var data_type = sap.fpa.ui.control.infra.constants.Analyticgrid.DATA_TYPE;
    if (!type) {
        type = data_type.CUSTOMCELL;
    }

    if (type === data_type.CUSTOMCELL && this.hashOfCustomCellData) {
        //parse hashOfCustomCellData to grid data format
        var customCellsData = {
            "cells" : [],
            "params" : {
                "type" : data_type.CUSTOMCELL
            },
            "formulas":{},
            "formulaRefs": {}
        };

        $.each(this.hashOfCustomCellData, function(index, item) {
        	var arrIndex = index.split("-");
        	item.x = parseInt(arrIndex[0], 10);
        	item.y = parseInt(arrIndex[1], 10);

            customCellsData.cells.push(item);
        });
        customCellsData.formulas = this.hashOfFormulas;
        customCellsData.formulaRefs = this.hashOfFormulaRefs;

        return customCellsData;
    }
    return {};
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.getGridLayoutInfo = function() {
    return {"oColWidth" : this.oColWidth, "oRowHeight" : this.oRowHeight};
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.setGridLayoutInfo = function(oGridLayoutInfo) {
    this.oColWidth = oGridLayoutInfo.oColWidth;
    this.oRowHeight = oGridLayoutInfo.oRowHeight;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.setComments = function(comments) {
    this._onCommentsDataRefreshed(comments);
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.setLocks = function(locks) {
    this.hashOfLocks = jQuery.extend(true, {}, locks);
    this._buildLocks();
    this._redrawGrid();
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.unsetLocks = function(locks) {
	var key, lock;
	var oColRow, idx, cell;
	var hashOfCellData = this.hashOfCellData;
    var CELL_FLAG = sap.fpa.ui.control.infra.constants.Analyticgrid.CELL_FLAG;
	for(key in locks) {
		lock = locks[key];
		delete this.hashOfLocks[lock.idx];
		oColRow = this._convertMemberContextToColRow(lock.context);
        if(oColRow.col >= 0 && oColRow.row >= 0) {
            idx = this._convertToIndex(oColRow.col, oColRow.row);
            cell = hashOfCellData[idx];
            if(cell) {
                cell.flags = CELL_FLAG.EDITABLE;
            }
        }
	}
    this._redrawGrid();
};
/**
* cleanPersistData now, it only clear the cells with references.
* @param {} oGridData
* @return {} 
*/
sap.fpa.ui.control.analyticgrid.Grid.prototype.cleanPersistData = function(oGridData) {
    var oResult = jQuery.extend(true,{},oGridData),
        aCells = [],
        oSpec = null,
        i = 0;
    if (oResult && oResult.cells) {
        aCells = oResult.cells;

        for (i = 0; i < aCells.length; ++i) {
            if (aCells[i]["cell-reference"]) {
                // empty cell reference values
                aCells[i].val = "";
                aCells[i].formatted = "";
                aCells[i].alertLevel = null;
                aCells[i].alertLevelName = null;
                if(aCells[i].editValue){
                    aCells[i].editValue = "";
                }
                if(aCells[i].formattingSpecification){
                    oSpec = aCells[i].formattingSpecification;
                    oSpec.decimalPlaces = 0;
                    if(oSpec.currencyUnit){
                        oSpec.currencyUnit.formatted = "";
                        oSpec.currencyUnit.suffix = "";
                    }
                }
            }
        }
    }
    return oResult;
};
sap.fpa.ui.control.analyticgrid.Grid.prototype._buildLocks = function() {
    var locks = this.hashOfLocks;
    var key, lock, idx, oColRow;
    var hashOfCellData = this.hashOfCellData;
    var cell, modifiedCell;
    var CELL_FLAG = sap.fpa.ui.control.infra.constants.Analyticgrid.CELL_FLAG;
    for (key in locks) {
        lock = locks[key];
        if (lock.context) {
            lock.enabled = false;
            oColRow = this._convertMemberContextToColRow(lock.context);
            if (oColRow.col >= 0 && oColRow.row >= 0) {
                idx = this._convertToIndex(oColRow.col, oColRow.row);
                lock.enabled = true;
                if (idx !== lock.idx) {
                    delete locks[lock.idx];
                    locks[idx] = lock;
                    lock.idx = idx;
                }

                cell = hashOfCellData[idx];
                if (cell) {
                    cell.flags = CELL_FLAG.LOCKED;
                }
                // ensure that lock is not overwritten by modified cell
                modifiedCell = this.modifiedCells[idx];
                if (modifiedCell) {
                    cell.val = modifiedCell.val;
                    cell.formatted = modifiedCell.formatted;
                    delete this.modifiedCells[idx];
                }
            }
        }
    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._buildColHeaderTooltips = function() {
	this.hashOfColTooltips = {};
	var aColTooltips = this.getColHeaderTooltips();

	for(var i = 0; i < aColTooltips.length; i++) {
		if(aColTooltips[i].context) {
			var oCell = this._convertMemberContextToColRow(aColTooltips[i].context);
			if(oCell) {
				this.hashOfColTooltips[oCell.col] = true;
			}
		}
	}
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.getLocks = function() {
    var locks = jQuery.extend(true, {}, this.hashOfLocks);
    return locks;
};


sap.fpa.ui.control.analyticgrid.Grid.prototype.focusOnCell = function(memberContext) {
    var oRowCol = this._memberContextToColRow(memberContext);

    if (oRowCol.col >= 0 && oRowCol.row >= 0) {
        this._focusOnCell(oRowCol.col, oRowCol.row, false, false, false);
        this._moveToCell(oRowCol.col, oRowCol.row, true);
    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.setDataCellValidator = function(fnDataCellValidator) {
    this.fnDataCellValidator = null; //clear cached data cell validator if the function is reset
    this.setProperty("dataCellValidator", fnDataCellValidator);

    return this;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//private functions
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

sap.fpa.ui.control.analyticgrid.Grid.prototype._initialConstants = function() {
    this.isOnDevice = $.device.is.tablet &&
        sap.fpa.ui.infra.common.Utility.bool(jQuery.sap.getUriParameters().get("on-device"));//temp set the "&&" for avoid the device influence
//    this._PROFILER_ = sap.fpa.ui.infra.performance.Profiler;

//    if (this.isOnDevice) {
//        // this.CELL_WIDTH = 120;
//        // this.CELL_HEIGHT = 24;
//        // this.INDEX_WIDTH = 24;
//        // this.INDEX_HEIGHT = 24;
//        // this.TINYBAR_WIDTH = 32;
//        // this.TINYBAR_HEIGHT = 32;
//        // this.DATA_MIN_COL = 5;
//        // this.DATA_MIN_ROW = 8;
//    }
	if(!this.isOnDevice){
        this.CELL_MIN_WIDTH = 15;
        this.CELL_MIN_HEIGHT = 7;
        this.CELL_WIDTH = 60;
        this.CELL_HEIGHT = 16;
        this.CELL_PADDING = 11;
        this.INDEX_WIDTH = 18;
        this.INDEX_HEIGHT = 16;
        this.TINYBAR_WIDTH = 24;
        this.TINYBAR_HEIGHT = 24;
        this.DATA_MIN_COL = 8;
        this.DATA_MIN_ROW = 10;
        this.MAX_INDENT_LEVEL = 15;
    }

    this.POSITION_OF_ALL = -99;
    this.POSITION_OF_INDEXCELL = -2;
    this.POSITION_OF_TINYBAR = -1;
    this.HORIZONTAL_AXIS = 1;
    this.VERTICAL_AXIS = 2;
    this.POSITION_OF_NULL = -100;
    this.SELECTIONBOX_DEFAULTOPTION = {
        drawMultiple : false,
        style : {
            "border-color" : ""
        }
    };
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._cleanData = function(bHard) {
    if (bHard) {
        this.drillOperations = {
            row: {},
            col: {}
        };
        this.oSelectedRegions = {};
        this.oFocusedCell = {
            col : this.POSITION_OF_NULL,
            row : this.POSITION_OF_NULL
        };
        this.selectionStartCell = {};
        this.lastSelectionKey = null;
        this.positionOfHScroll = 0;
        this.positionOfVScroll = 0;
    }

    this.oGridData = null;
    this.oCustomGridData = null;
    this.hashOfCellObjects = {};
    this.hashOfCellData = {};
    this.hashOfCustomCellData = {};
    this.hashOfComments = {};
    this.hashOfDimensions = {};
    this.hashOfFormulas = {};
    this.hashOfFormulaRefs = {};
    this.arrFormulaClickedCells = [];
    this.hashOfMembers = {};
    this.arrViewableCells = [];
    this.arrTableDomCache = [];
    this.oOrignalFocusedCell = {};
    this.oEditingCell = {};
    this.oColWidth = this.oColWidth || {};
    this.oRowHeight = this.oRowHeight || {};
    this.numberOfViewableRows = 0;
    this.numberOfViewableCols = 0;
    this.numberOfTotalRows = 0;
    this.numberOfTotalCols = 0;
    this.numberOfViewableDataRows = 0;
    this.numberOfViewableDataCols = 0;
    this.numberOfDataRows = 1;
    this.numberOfDataCols = 1;
    this.numberOfHeaderRows = 0;
    this.numberOfHeaderCols = 0;
    this.numberOfColDimensions = 0;
    this.numberOfRowDimensions = 0;

    this.frameWidth = 0;
    this.frameHeight = 0;
    this.hiddenDataColsStackArray = [];
    this.hiddenDataRowsStackArray = [];
    this.numberOfHiddenDataRows = 0;
    this.numberOfHiddenDataCols = 0;
    this.hiddenMemberContextCols = {};
    this.hiddenMemberContextRows = {};
    this.isMouseDown = false;
    this.keyDownRecord = {}; //record this to prevent repeat fire keydown
    this.currMousePosition = {};
    this.undoStack = [];
    this.redoStack = [];
    this.batchQueue = [];
    this.modifiedCells = {};
    this.modifiedCustomCells = {};
    this.modifiedCellObjects = {};
    this.rowAxis = null;
    this.colAxis = null;
    this.rowDimension2Tree = {};
    this.colDimension2Tree = {};
    this.rowMemberContext2Size = {};
    this.rowMemberContext2TupleIndex = {};
    this.colMemberContext2Size = {};
    this.colMemberContext2TupleIndex = {};
    this.firstViewableDataRow = 0;
    this.firstViewableDataCol = 0;
    this.lastViewableDataRow = 0;
    this.lastViewableDataCol = 0;
    this.hiddenDimensions = this.hiddenDimensions || {};
    this.supportMemberForumla = false;
    this.cell2Resize = null;
    this.resizeOrigin = {};
    this.cellEvents = {};
    this.draggerOrigin = null;
    this.selectionBoxOption = {};
    this.hashOfDecorators = {};
    this.decorators = [];
    this.hashOfColTooltips = {};
    this.bFreeEdit = true;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._initializeControls = function() {
    this.fnOnCellEvent = jQuery.proxy(this._onCellEvent, this);
    this.fnOnContextMenu = jQuery.proxy(this._onContextMenu, this);
    this.fnOnMouseWheel = jQuery.proxy(this._onMouseWheel, this);
    this.fnOnMouseWheelDimMember = jQuery.proxy(this._onMouseWheelDimMember, this);
    this.fnOnMouseUp = jQuery.proxy(this._onMouseUp, this);
    this.fnOnMouseEnter = jQuery.proxy(this._onMouseEnter, this);
    this.fnOnKeyUp = jQuery.proxy(this._onKeyUp, this);
    this.fnOnKeyDown = jQuery.proxy(this._onKeyDown, this);
    this.fnOnKeyPress = jQuery.proxy(this._onKeyPress, this);
    this.fnOnHScroll = jQuery.proxy(this._onHScroll, this);
    this.fnOnVScroll = jQuery.proxy(this._onVScroll, this);
    this.fnOnResized = jQuery.proxy(this._onResize, this);
    this.fnOnClickTinyBar = jQuery.proxy(this._onClickTinyBar, this);
    this.fnOnClickTinyBarItem = jQuery.proxy(this._onClickTinyBarItem, this);
    // this.fnOnMouseDownDataCell = jQuery.proxy(this._onMouseDownDataCell, this);
    this.fnOnMouseUpDataCell = jQuery.proxy(this._onMouseUpDataCell, this);
    this.fnOnMouseOverAnyCell = jQuery.proxy(this._onMouseOverAnyCell, this);
    this.fnOnMouseDownAnyCell = jQuery.proxy(this._onMouseDownAnyCell, this);
    this.fnOnMouseDownResizeCol = jQuery.proxy(this._onMouseDownResizeCol, this);
    this.fnOnMouseDownResizeRow = jQuery.proxy(this._onMouseDownResizeRow, this);
    this.fnOnMouseUpResizeCol = jQuery.proxy(this._onMouseUpResizeCol, this);
    this.fnOnMouseMoveResizeCol = jQuery.proxy(this._onMouseMoveResizeCol, this);
    // this.fnOnMouseLeaveResizeCol = jQuery.proxy(this._onMouseLeaveResizeCol, this);
    // this.fnOnMouseLeaveResizeRow = jQuery.proxy(this._onMouseLeaveResizeRow, this);
    this.fnOnSelectStartAnyCell = jQuery.proxy(this._onSelectStartAnyCell, this);
    this.fnOnClickDataCell = jQuery.proxy(this._onClickDataCell, this);
    // this.fnOnClickAnyCell = jQuery.proxy(this._onClickAnyCell, this);
    this.fnOnDoubleClickDataCell = jQuery.proxy(this._onDoubleClickDataCell, this);
    this.fnOnDoubleClickResizableCell = jQuery.proxy(this._onDoubleClickResizableCell, this);
    //this.fnOnDataCellLoseFocus = jQuery.proxy(this._onDataCellLoseFocus, this);
    this.fnOnSwipe = jQuery.proxy(this._onSwipe, this);
    this.fnOnSwipeDimMember = jQuery.proxy(this._onSwipeDimMember, this);
    this.fnOnClickDimHeaderCell = jQuery.proxy(this._onClickDimHeaderCell, this);
    this.fnOnClickDimMemberCell = jQuery.proxy(this._onClickDimMemberCell, this);
    this.fnOnClickDimSelectorCell = jQuery.proxy(this._onClickDimSelectorCell, this);
    this.fnOnPasteInClipBoard = jQuery.proxy(this._onPasteInClipBoard, this);
    this.fnOnMouseDownDragger = jQuery.proxy(this._onMouseDownDragger, this);

    this.fnOnSaveFormulaEvent = jQuery.proxy(this._onSaveFormulaEvent, this);
    this.fnOnFormulaTextLiveChange = jQuery.proxy(this._onFormulaTextLiveChange, this);
    this.fnCellClickModeOn = jQuery.proxy(this._onCellClickModeOn, this);
    this.fnCellClickModeOff = jQuery.proxy(this._onCellClickModeOff, this);
    this.fnFormulaChange = jQuery.proxy(this._onFormulaChange, this);

    this.fnOnClickLocalFormulaMember = jQuery.proxy(this._onClickLocalFormulaMember, this);
    this.fnOnClickColHeaderTooltip = jQuery.proxy(this._onClickColHeaderTooltip, this);
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._destroyControls = function() {
    if (this.oHScrollBar) {
        this.oHScrollBar.setParent(null);
        this.oHScrollBar.destroy();
    }
    if (this.oVScrollBar) {
        this.oVScrollBar.setParent(null);
        this.oVScrollBar.destroy();
    }
    this.fnOnCellEvent = null;
    this.fnOnContextMenu = null;
    this.fnOnClickTinyBar = null;
    this.fnOnClickTinyBarItem = null;
    this.fnOnClickDataCell = null;
    // this.fnOnClickAnyCell = null;
    this.fnOnSelectStartAnyCell = null;
    this.fnOnDoubleClickDataCell = null;
    this.fnOnDoubleClickResizableCell = null;
    //this.fnOnDataCellLoseFocus = null;
    // this.fnOnMouseDownDataCell = null;
    this.fnOnMouseUpDataCell = null;
    this.fnOnMouseOverAnyCell = null;
    this.fnOnMouseDownAnyCell = null;
    this.fnOnMouseDownResizeCol = null;
    this.fnOnMouseUpResizeCol = null;
    this.fnOnMouseMoveResizeCol = null;
    this.fnOnMouseLeaveResizeCol = null;
    this.fnOnMouseLeaveResizeRow = null;
    this.fnOnMouseDownResizeRow = null;
    this.fnOnMouseUpResizeRow = null;
    this.fnOnMouseMoveResizeRow = null;
    this.fnOnMouseLeaveResizeCol = null;
    this.fnOnMouseLeaveResizeRow = null;
    this.fnOnMouseWheel = null;
    this.fnOnMouseWheelDimMember = null;
    this.fnOnSwipe = null;
    this.fnOnSwipeDimMember = null;
    this.fnOnKeyUp = null;
    this.fnOnKeyDown = null;
    this.fnOnKeyPress = null;
    this.fnOnMouseUp = null;
    this.fnOnMouseEnter = null;
    this.fnOnHScroll = null;
    this.fnOnVScroll = null;
    this.fnOnResized = null;
    this.resizeListenerId = null;
    this.fnOnClickDimHeaderCell = null;
    this.fnOnClickDimMemberCell = null;
    this.fnOnClickDimSelectorCell = null;
    this.fnOnPasteInClipBoard = null;
    this.fnOnClickLocalFormulaMember = null;
    this.fnOnMouseDownDragger = null;
    this.fnOnClickColHeaderTooltip = null;

    this.oHScrollBar = null;
    this.oVScrollBar = null;
    this.oEditorDialog = null;
    this.oContextMenu = null;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._startVolatileEventHandlers = function() {
    var id = this.getId(), $resizeCol = $("#" + id + " .resizableCol"), $resizeRow = $("#" + id + " .resizableRow");
    if (!this.isOnDevice) {
		$resizeCol.on("mousedown.volatile", this.fnOnMouseDownResizeCol);
        $resizeRow.on("mousedown.volatile", this.fnOnMouseDownResizeRow);
    }
//	else {
//        
//    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._shutdownVolatileEventHandlers = function() {
    var id = this.getId(), $resizeCol = $("#" + id + " .resizableCol"), $resizeRow = $("#" + id + " .resizableRow");
    if (!this.isOnDevice) {
        $resizeCol.off(".volatile");
        $resizeRow.off(".volatile");
    }
//	else {
//
//    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._registerCellEventHandlers = function(eventType, elementTag, classType,
    handler) {
    if (!this.cellEvents[eventType]) {
        this.cellEvents[eventType] = {};
    }

    if (!this.cellEvents[eventType][elementTag]) {
        this.cellEvents[eventType][elementTag] = {};
    }
    this.cellEvents[eventType][elementTag][classType] = handler;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._unregisterCellEventHandlers = function() {
    this.cellEvents = {};
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._dispatchCellEventHandlers = function(target, eventType, oEventData) {
    var currentTarget = target, parentSearchStep = 3, tag = currentTarget.tagName.toLowerCase();
    var jTarget = $(currentTarget || target);
    if (!this.cellEvents[eventType]) {
        return;
    }

    var _matchClass = function(handlers, jDom){
        var match = false;

        if(handlers) {
            $.each(handlers, function(index, handler) {
                if(jDom.hasClass(index) && handler) {
                    match = true;
                    return false;
                }
            });
        }

        
        return match;
    };

    //only if it matches everything, and it satisfy the max parentSearchSteps
    while ((!this.cellEvents[eventType][tag] || !_matchClass(this.cellEvents[eventType][tag], jTarget)) 
            && parentSearchStep > 0) {
        currentTarget = currentTarget.parentElement;
        jTarget = $(currentTarget || target);
        tag = currentTarget.tagName.toLowerCase();
        parentSearchStep --;
    }

    var eventHandlers = this.cellEvents[eventType][tag] || {}, originalEventData = jQuery
        .extend({}, oEventData, true), res = null;
    jTarget = $(currentTarget || target);
    originalEventData.currentTarget = currentTarget || target;
    $.each(eventHandlers, function(index, handler) {
        if (jTarget.hasClass(index) && handler) {
            res = handler(originalEventData);
            var isImmePropStopped = false, isPropStopped = false, isDefaultPrevented = false;
            if (originalEventData.isImmediatePropagationStopped()) {
                oEventData.stopImmediatePropagation();
                isImmePropStopped = true;
            }
            if (originalEventData.isPropagationStopped()) {
                oEventData.stopPropagation();
                isPropStopped = true;
            }
            if (originalEventData.isDefaultPrevented()) {
                oEventData.preventDefault();
                isDefaultPrevented = true;
            }

            if (isImmePropStopped || isPropStopped || isDefaultPrevented) {
                return false;
            }
        }
    });

    if (res === false || oEventData.isDefaultPrevented()) {
        return false;
    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._startGridDProviderEvent = function() {
    var gridDataProvider = this.getGridDataProvider();
    if (gridDataProvider) {
        gridDataProvider.onDataRefreshed({
            fnCallback : this._onGridDataRefreshed,
            oListener : this
        });

        gridDataProvider.onDataSubmitted({
            fnCallback : this._onGridDataSubmitted,
            oListener : this
        });

        gridDataProvider.onDataModified({
            fnCallback : this._onGridDataModified,
            oListener : this
        });

        gridDataProvider.onExceptionHappened({
            fnCallback : this._onExceptionHappened,
            oListener : this
        });

        gridDataProvider.onProgressUpdated({
            fnCallback : this._onProgressUpdated,
            oListener : this
        });
    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._shutDownGridDroviderEvent = function() {
    var gridDataProvider = this.getGridDataProvider();

    if (gridDataProvider) {
        gridDataProvider.offDataRefreshed({
            fnCallback : this._onGridDataRefreshed,
            oListener : this
        });

        gridDataProvider.offDataSubmitted({
            fnCallback : this._onGridDataSubmitted,
            oListener : this
        });

        gridDataProvider.offDataModified({
            fnCallback : this._onGridDataModified,
            oListener : this
        });

        gridDataProvider.offExceptionHappened({
            fnCallback : this._onExceptionHappened,
            oListener : this
        });

        gridDataProvider.offProgressUpdated({
            fnCallback : this._onProgressUpdated,
            oListener : this
        });
    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._startEventHandlers = function() {
	var gridDataProvider = this.getGridDataProvider();
    var pid = this.profilingEnabled && this._PROFILER_.begin("analyticgrid.Grid._startEventHandlers");
    var id = this.getId(), $this = this.$(), $tinyBars = $("#" + id + " .tinyBar"), $tinyBarItem = $("#" + id +
        " .tinyBarItem"),
    // $dimSelector = $("#" + id + " .dimSelector"),
    // $dimHeader = $("#" + id + " .dimHeader"),
    // $dimMember = $("#" + id + " .dimMember"),
    // $dimMemberAttr = $("#" + id + " .dimMemberAttr"),
    // $dataCell = $("#" + id + " .dataCell"),
    // $anyCell = $("#" + id + " .generalCell"),
    $dragger = $("#" + id + "-dragger"), $clipBoard = $("#" + id + "-gridClipBoard");

    //mobile events
    if (this.isOnDevice) {
        /*
        $tinyBars.on("tapone", this.fnOnClickTinyBar);
        $tinyBarItem.on("tapone", this.fnOnClickTinyBarItem);
        $dimMember.on("swipemove", this.fnOnSwipeDimMember);
        $dimMemberAttr.on("swipemove", this.fnOnSwipeDimMember);
        if(!$.isEmptyObject(this.hashOfCellData)){
            $dataCell.on("tapone", this.fnOnClickDataCell);
            $dataCell.on("tapdouble", this.fnOnDoubleClickDataCell);			
         }
         //$dataCell.on("focusout", this.fnOnDataCellLoseFocus);
         $anyCell.on("tapone", this.fnOnClickAnyCell);
         $this.on("swipemove", this.fnOnSwipe);
         */
    } else {
        $this.on(
            "click mousewheel DOMMouseScroll contextmenu mousedown mouseup mouseover dblclick focusout selectstart",
            this.fnOnCellEvent);
        this._registerCellEventHandlers("click", "td", "tinyBarItem", this.fnOnClickTinyBarItem);
        this._registerCellEventHandlers("click", "td", "dimSelector", this.fnOnClickDimSelectorCell);
        this._registerCellEventHandlers("click", "td", "dimHeader", this.fnOnClickDimHeaderCell);
        this._registerCellEventHandlers("mousedown", "span", "dimMemberIcon", this.fnOnClickDimMemberCell);
        this._registerCellEventHandlers("click", "td", "localMember", this.fnOnClickLocalFormulaMember);

        this._registerCellEventHandlers("mousewheel", "td", "dimMember", this.fnOnMouseWheelDimMember);
        this._registerCellEventHandlers("DOMMouseScroll", "td", "dimMember", this.fnOnMouseWheelDimMember);
        this._registerCellEventHandlers("mousewheel", "td", "dimMemberAttr", this.fnOnMouseWheelDimMember);
        this._registerCellEventHandlers("DOMMouseScroll", "td", "dimMemberAttr", this.fnOnMouseWheelDimMember);
        // this._registerCellEventHandlers("contextmenu", "dataCell", this.fnOnContextMenu);
        if (!$.isEmptyObject(this.hashOfCellData)) {
            // this._registerCellEventHandlers("mousedown", "dataCell", this.fnOnMouseDownDataCell);
            this._registerCellEventHandlers("mouseup", "td", "dataCell", this.fnOnMouseUpDataCell);
            this._registerCellEventHandlers("click", "td", "dataCell", this.fnOnClickDataCell);
        }
        
        this._registerCellEventHandlers("dblclick", "td", "editable", this.fnOnDoubleClickDataCell);
        this._registerCellEventHandlers("dblclick", "div", "resizableCol", this.fnOnDoubleClickResizableCell);
        this._registerCellEventHandlers("focusout", "td", "dataCell", this.fnOnDataCellLoseFocus);
        // this._registerCellEventHandlers("click", "generalCell", this.fnOnClickAnyCell);
        this._registerCellEventHandlers("mousedown", "td", "generalCell", this.fnOnMouseDownAnyCell);
        this._registerCellEventHandlers("mouseover", "td", "generalCell", this.fnOnMouseOverAnyCell);
        this._registerCellEventHandlers("selectstart", "td", "generalCell", this.fnOnSelectStartAnyCell);
        this._registerCellEventHandlers("click", "div", "colHeaderTooltip", this.fnOnClickColHeaderTooltip);

        $tinyBars.on("click", this.fnOnClickTinyBar);
        $tinyBarItem.on("click", this.fnOnClickTinyBarItem);
        // $dimSelector.on("click", this.fnOnClickDimSelectorCell);
        // $dimHeader.on("click", this.fnOnClickDimHeaderCell);
        // $dimMember.on("click", this.fnOnClickDimMemberCell);
        // $dimMember.on("mousewheel DOMMouseScroll", this.fnOnMouseWheelDimMember);
        // $dimMemberAttr.on("mousewheel DOMMouseScroll", this.fnOnMouseWheelDimMember);
        // $dataCell.on("contextmenu", this.fnOnContextMenu);
        // if(!$.isEmptyObject(this.hashOfCellData)){
        //    $dataCell.on("mousedown", this.fnOnMouseDownDataCell);
        //    $dataCell.on("mouseup", this.fnOnMouseUpDataCell);
        //    $dataCell.on("mouseover", this.fnOnMouseOverDataCell);
        //    $dataCell.on("click", this.fnOnClickDataCell);
        //    $dataCell.on("dblclick", this.fnOnDoubleClickDataCell);
        // }
        // //$dataCell.on("focusout", this.fnOnDataCellLoseFocus);
        // $anyCell.on("click", this.fnOnClickAnyCell);
        // $anyCell.on("mousedown", this.fnOnMouseDownAnyCell);
        // $anyCell.on("selectstart", this.fnOnSelectStartAnyCell);
        $clipBoard.on("paste", this.fnOnPasteInClipBoard);
        $dragger.on("mousedown", this.fnOnMouseDownDragger);
        $this.on("mousewheel DOMMouseScroll", this.fnOnMouseWheel);
        $this.on("mouseenter", this.fnOnMouseEnter);
        $(window).on("mouseup.analyticgrid", this.fnOnMouseUp);

        $this.on("keyup", this.fnOnKeyUp);
        $this.on("keydown", this.fnOnKeyDown);
        $this.on("keypress", this.fnOnKeyPress);
    }

    this._startVolatileEventHandlers();
    if(!!this.getDomRef()){
        this.resizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(), this.fnOnResized);
    }

    if (this.oHScrollBar) {
        this.oHScrollBar.attachScroll(this.fnOnHScroll);
    }
    if (this.oVScrollBar) {
        this.oVScrollBar.attachScroll(this.fnOnVScroll);
    }

    var commentsDataProvider = this.getCommentsDataProvider();
    this._startGridDProviderEvent();

    if (commentsDataProvider && commentsDataProvider !== gridDataProvider) {
        commentsDataProvider.onDataRefreshed({
            fnCallback : this._onCommentsDataRefreshed,
            oListener : this
        });

        commentsDataProvider.onExceptionHappened({
            fnCallback : this._onExceptionHappened,
            oListener : this
        });

        commentsDataProvider.onProgressUpdated({
            fnCallback : this._onProgressUpdated,
            oListener : this
        });
    }

    if (this.getFormulaBar()) {
        this.getFormulaBar().detachSaveFormula(this.fnOnSaveFormulaEvent);
        this.getFormulaBar().attachSaveFormula(this.fnOnSaveFormulaEvent);

        this.getFormulaBar().attachLiveChange(this.fnOnFormulaTextLiveChange);
        this.getFormulaBar().attachCellClickModeOn(this.fnCellClickModeOn);
        this.getFormulaBar().attachCellClickModeOff(this.fnCellClickModeOff);
        this.getFormulaBar().attachFormulaChange(this.fnFormulaChange);
    }

    if(this.profilingEnabled){
		this._PROFILER_.end(pid);
	}
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._shutdownEventHandlers = function() {
	var gridDataProvider = this.getGridDataProvider();
    var pid = this.profilingEnabled && this._PROFILER_.begin("analyticgrid.Grid._shutdownEventHandlers");
    var id = this.getId(), $this = this.$(), $tinyBars = $("#" + id + " .tinyBar"), $tinyBarItem = $("#" + id +
        " .tinyBarItem"), $dimSelector = $("#" + id + " .dimSelector"), $dimHeader = $("#" + id + " .dimHeader"), $dimMember = $("#" +
        id + " .dimMember"), $dimMemberAttr = $("#" + id + " .dimMemberAttr"), $dataCell = $("#" + id + " .dataCell"), $anyCell = $("#" +
        id + " .generalCell"), $clipBoard = $("#" + id + "-gridClipBoard");

    $tinyBars.off();
    $tinyBarItem.off();
    $dimSelector.off();
    $dimHeader.off();
    $dimMember.off();
    $dimMemberAttr.off();
    $dataCell.off();
    $anyCell.off();
    $this.off();
    $clipBoard.off();
    $(window).off(".analyticgrid");

    this._unregisterCellEventHandlers();
    this._shutdownVolatileEventHandlers();

    if (this.resizeListenerId) {
        sap.ui.core.ResizeHandler.deregister(this.resizeListenerId);
        this.resizeListenerId = null;
    }

    if (this.oHScrollBar) {
        this.oHScrollBar.detachScroll(this.fnOnHScroll);
    }
    if (this.oVScrollBar) {
        this.oVScrollBar.detachScroll(this.fnOnVScroll);
    }

    var commentsDataProvider = this.getCommentsDataProvider();

    this._shutDownGridDroviderEvent();

    if (commentsDataProvider && commentsDataProvider !== gridDataProvider) {
        commentsDataProvider.offDataRefreshed({
            fnCallback : this._onCommentsDataRefreshed,
            oListener : this
        });

        commentsDataProvider.offExceptionHappened({
            fnCallback : this._onExceptionHappened,
            oListener : this
        });

        commentsDataProvider.offProgressUpdated({
            fnCallback : this._onProgressUpdated,
            oListener : this
        });
    }

    if(this.profilingEnabled){
		this._PROFILER_.end(pid);
	}
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._generateHScrollBar = function() {
    if (!this.oHScrollBar && !this.isOnDevice) {
        this.oHScrollBar = new sap.ui.core.ScrollBar(this.getId() + "-hscrollbar", {
            vertical : false,
            scroll : this.fnOnHScroll
        });
        this.oHScrollBar.setParent(this, "innerComposition_HScrollBar", true);
    }

    return this.oHScrollBar;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._generateVScrollBar = function() {
    if (!this.oVScrollBar && !this.isOnDevice) {
        this.oVScrollBar = new sap.ui.core.ScrollBar(this.getId() + "-vscrollbar", {
            vertical : true,
            scroll : this.fnOnVScroll
        });
        this.oVScrollBar.setParent(this, "innerComposition_VScrollBar", true);
    }

    return this.oVScrollBar;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._generateTableDomCache = function() {
    var pid = this.profilingEnabled && this._PROFILER_.begin("analyticgrid.Grid._generateTableDomCache");
    this.arrTableDomCache = [];
    var tableDomRows = $("#" + this.getId() + " .sapEpmUiControlAnalyticgridGridTableInner>tbody>tr");
    var rowIndex = 0,
        colIndex = 0;
    for (rowIndex = 0; rowIndex < tableDomRows.length; rowIndex++) {
        var tableDomRow = tableDomRows.eq(rowIndex);
        var tableDomRowCols = tableDomRow.children("td");
        var arrDomRow = [];
        for (colIndex = 0; colIndex < tableDomRowCols.length; colIndex++) {
            arrDomRow.push(tableDomRowCols.eq(colIndex));
        }
        this.arrTableDomCache.push(arrDomRow);
    }
    if(this.profilingEnabled){
		this._PROFILER_.end(pid);
	}
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.registerCellDecorator = function(oCellDecorator) {
    this._cellDecorators.push(oCellDecorator);
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.unregisterCellDecorator = function(oCellDecorator) {
    this._cellDecorators.splice(this._cellDecorators.indexOf(oCellDecorator), 1);
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._buildComments = function() {
    this.hashOfComments = {};
    var i = 0;
    if (this.oGridData.comments) {
        //create indexed comments
        for (i = 0; i < this.oGridData.comments.length; i++) {
            this.hashOfComments[this.oGridData.comments[i].idx] = this.oGridData.comments[i];
        }
    }
};

//function used to clean properties which are "null"
sap.fpa.ui.control.analyticgrid.Grid.prototype._cleanDummyData = function(object) {
    Object.keys(object).forEach(function(key){
        if(object[key] === null || object[key] === undefined) {
            delete object[key];
        }
    });
    return object;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._buildCustomData = function() {
    var pid = this.profilingEnabled && this._PROFILER_.begin("analyticgrid.Grid._buildData");
    var i = 0;
    this.hashOfCustomCellData = {};

    this.numberOfTotalRows = 0;
    this.numberOfTotalCols = 0;
    this.numberOfHeaderRows = 0;
    this.numberOfHeaderCols = 0;
    this.numberOfDataRows = 0; //if no row dimensions, at least there's 1 row to display cell data
    this.numberOfDataCols = 0; //if no column dimensions, at least there's 1 column to display cell data

    //build custom data
    for (i = 0; i < this.oCustomGridData.cells.length; i++) {
        var item = this.oCustomGridData.cells[i];
        item = this._cleanDummyData(item);
	    this._updateCustomCell(item.x, item.y, item);
    }

    this.hashOfFormulas = this.oCustomGridData.formulas || {};
    this.hashOfFormulaRefs = this.oCustomGridData.formulaRefs || {};

    this._setSelectionBoxDefaultOption();

	if(this.profilingEnabled){
		this._PROFILER_.end(pid);
	}
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._buildData = function() {
    var pid = this.profilingEnabled && this._PROFILER_.begin("analyticgrid.Grid._buildData");
    var that = this, hideDimAttrs = this.getHideDimensionAttributes();

    this.hashOfCellObjects = {};
    this.hashOfCellData = {};
    this.hashOfDimensions = {};
    this.hashOfMembers = {};

    this.numberOfTotalRows = 0;
    this.numberOfTotalCols = 0;
    this.numberOfHeaderRows = 0;
    this.numberOfHeaderCols = 0;
    this.numberOfDataRows = 1; //if no row dimensions, at least there's 1 row to display cell data
    this.numberOfDataCols = 1; //if no column dimensions, at least there's 1 column to display cell data

    this.rowAxis = null;
    this.colAxis = null;

    //key: dimension ID
    //value: tree representation of given dimension
    this.rowDimension2Tree = {};
    this.colDimension2Tree = {};

    //--legacy--//key: member context, <seq>|<hier>|<dim1_mbr>/.../<seq>|<hier>|<dimn_mbr> e.g. 0|H1|2012.01/1|H2|CN; 
    //key: member context, <dim1_mbr_idx>/.../<dimn_mbr_idx> e.g. 0/0/0, 0/0/1, 1/1/7
    //value: {directSize, indirectSize} - size of direct tuples (not collapsable - self), and size of indirect tuples (collapsable children);
    this.rowMemberContext2Size = {};
    this.colMemberContext2Size = {};

    var hier = null;
    
    //calculate grid properties
    if (this.oGridData && this.oGridData.axes) {
        this.numberOfTotalRows = 1; //at least 1 row to put row dimension header even column is empty or hided
        this.numberOfHeaderRows = 1; //at least 1 row to put row dimension header even column is empty or hided

        jQuery.each(this.oGridData.axes, function(index, axis) {
            if (axis.ordinal === sap.fpa.ui.control.infra.constants.Analyticgrid.AXIS_ORDINAL.COL) {
                var numberOfColTuples = axis.tuples ? axis.tuples.length : 0;
                that.colAxis = axis;
                that.numberOfColDimensions = axis.dimensions ? axis.dimensions.length : 0;
                that.numberOfTotalRows += that.numberOfColDimensions;
                that.numberOfHeaderRows += that.numberOfColDimensions;
                that.numberOfDataCols = numberOfColTuples;

                //exclude filtered dimensions
                that.numberOfHeaderRows = that.numberOfHeaderRows - Object.keys(that.getFilterDimensions()).length;
                that.numberOfTotalRows = that.numberOfTotalRows - Object.keys(that.getFilterDimensions()).length;

                if (!hideDimAttrs) {
                    jQuery.each(axis.dimensions, function(dimIndex, dim) {
                        if(!that.getFilterDimensions()[dim.id]) {
                            var cntOfAttrs = dim.attrs ? dim.attrs.length : 0;
                            that.numberOfHeaderRows += cntOfAttrs;
                            that.numberOfTotalRows += cntOfAttrs;
                        }
                    });
                }
            } else if (axis.ordinal === sap.fpa.ui.control.infra.constants.Analyticgrid.AXIS_ORDINAL.ROW) {
                var numberOfRowTuples = axis.tuples ? axis.tuples.length : 0;
                that.rowAxis = axis;
                that.numberOfRowDimensions = axis.dimensions ? axis.dimensions.length : 0;
                that.numberOfTotalCols += that.numberOfRowDimensions;
                that.numberOfHeaderCols += that.numberOfRowDimensions;
                that.numberOfDataRows = numberOfRowTuples;

                if(that.numberOfRowDimensions === 0) {
                    that.numberOfHeaderRows--;
                }

                if (!hideDimAttrs) {
                    jQuery.each(axis.dimensions, function(dimIndex, dim) {
                        var cntOfAttrs = dim.attrs ? dim.attrs.length : 0;
                        that.numberOfHeaderCols += cntOfAttrs;
                        that.numberOfTotalCols += cntOfAttrs;
                    });
                }
            }

            jQuery.each(axis.dimensions, function(dimIndex, dim) {
                that.hashOfDimensions[dim.id] = {
                    axisOrdinal : axis.ordinal,
                    dimIndex : dimIndex
                };
                var hiers = dim.hiers || [];

                jQuery.each(dim.members, function(mbrIndex, mbr) {
                    hier = hiers.length === 0 ? "" : hiers[mbr.hier].id;
                    var uid = that._uidOf(dim.id, mbr.id, mbr.seq, hier);
                    that.hashOfMembers[uid] = {
                        mbrIndex : mbrIndex
                    };
                });
            });
        });
    }

    this.numberOfTotalCols += this.numberOfDataCols;
    this.numberOfTotalRows += this.numberOfDataRows;

    this.firstViewableDataRow = 0;
    this.firstViewableDataCol = 0;
    if (this.numberOfDataRows > 0) {
        this.lastViewableDataRow = this.numberOfDataRows - 1;
    }
    if (this.numberOfDataCols > 0) {
        this.lastViewableDataCol = this.numberOfDataCols - 1;
    }

    if (this.rowAxis) {
        //build dimension tree
        this.rowDimension2Tree = this._buildDimension2Tree(this.rowAxis);

        //calculate size for each member context
        this._buildMemberContexts(
            this.rowAxis,
            this.rowDimension2Tree,
            this.rowMemberContext2Size,
            this.rowMemberContext2TupleIndex);
    }

    if (this.colAxis) {
        //build dimension tree
        this.colDimension2Tree = this._buildDimension2Tree(this.colAxis);

        //calculate size for each member context
        this._buildMemberContexts(
            this.colAxis,
            this.colDimension2Tree,
            this.colMemberContext2Size,
            this.colMemberContext2TupleIndex);
    }
    var i = 0;
    //create indexed data cell
    for (i = 0; i < this.oGridData.cells.length; i++) {
    	//force the import grid data value to be string
    	this.oGridData.cells[i].val = this.oGridData.cells[i].val + "";
        this.hashOfCellData[this.oGridData.cells[i].idx] = this.oGridData.cells[i];
    }

    //added, this is currently provided for headers only
    //later the function should be refactored so that all cells will come from here
    this.hashOfCellObjects = this.buildGridContent();

    //added, this is currently provided for headers only
    //later the function should be refactored so that all cells will come from here
    this.hashOfCellObjects = this.buildGridContent();
    
    this._buildLocks();
    this._buildColHeaderTooltips();

    //restore cache drills if there's any
    this._restoreDrills(this.colAxis, this.drillOperations.col);
    this._restoreDrills(this.rowAxis, this.drillOperations.row);

    this._setSelectionBoxDefaultOption();
    if(this.profilingEnabled){
		this._PROFILER_.end(pid);
	}
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._buildDimension2Tree = function(axis) {
    var pid = this.profilingEnabled && this._PROFILER_.begin("analyticgrid.Grid._buildDimension2Tree");
    var dimension2Tree = {};
    var i = 0,
        j = 0;
    var node = null;
    if (axis.dimensions) {
        for (i = 0; i < axis.dimensions.length; i++) {
            var dimension = axis.dimensions[i];
            var parentAfter = dimension.parentAfter || false;
            var members = dimension.members || [];
            var memberCount = members.length;
            var member2Index = {};
            var parentIdx, parentNode;
            var tree = {
                nodes : [],
                roots : []
            };

            //initialize nodes
            for (j = 0; j < memberCount; j++) {
                var member = members[j];
                node = {
                    idx : j,
                    id : member.id,
                    seq : member.seq,
                    hier : member.hier,
                    parent : member.parent,
                    children : []
                };



                tree.nodes.push(node);
                if (!member.parent) {
                    node.parentIdx = -1;
                    tree.roots.push(node);
                }
            }

            //assign to parent
            if(parentAfter) {
                //reverse iterate if parent After
                for (j = memberCount-1; j >= 0; j--) {
                    node = tree.nodes[j];
                    member2Index[node.id] = j;
                    if (node.parent) {
                        parentIdx = member2Index[node.parent];
                        parentNode = tree.nodes[parentIdx];

                        node.parentIdx = parentIdx;
                        parentNode.children.push(node);
                    }
                }
            } else {
                for (j = 0; j < memberCount; j++) {
                    node = tree.nodes[j];
                    member2Index[node.id] = j;
                    if (node.parent) {
                        parentIdx = member2Index[node.parent];
                        parentNode = tree.nodes[parentIdx];

                        node.parentIdx = parentIdx;
                        parentNode.children.push(node);
                    }
                }
            }

            

            dimension2Tree[dimension.id] = tree;
        }
    }

    if(this.profilingEnabled){
		this._PROFILER_.end(pid);
	}
    return dimension2Tree;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._buildMemberContexts = function(axis, dimension2Tree,
    memberContext2Size, memberContexts2TupleIndex) {
    var pid = this.profilingEnabled && this._PROFILER_.begin("analyticgrid.Grid._buildMemberContexts");

    var tuples = axis.tuples, tupleCount = tuples.length, dimCount = axis.dimensions.length, memberContextStack = [];
    var i = 0,
        j = 0;
    var oSize = null;
    var memberContext = null,
        tuple = null;
        
    //calculate direct size
    for (i = 0; i < tupleCount; i++) {
        tuple = tuples[i];
        //place pointer back to root
        var currentHash = memberContexts2TupleIndex;

        for (j = 0; j < dimCount; j++) {
            var members = axis.dimensions[j].members;
            memberContext = tuple.slice(0, j + 1).join("/");
            var memberIndex = tuple[j], member = members[memberIndex];

            //we need to keep the member context as well for future reference
            if (!currentHash[member.id]) {
                currentHash[member.id] = {};
            }
            //place pointer to its children
            currentHash = currentHash[member.id];
            if (j === dimCount - 1) {
                currentHash.tupleIndex = i;
            }

            if (!memberContext2Size[memberContext]) { //recover: improve perfromance for data grid when too many rows/columns in grid
                oSize = {
                    startTupleIndex : i,
                    directSize : 1,
                    indirectSize : 0,
                    parentAfter : false
                };

                memberContext2Size[memberContext] = oSize;
                memberContextStack.push(memberContext);
            } else {
                oSize = memberContext2Size[memberContext];
                oSize.directSize++;
            }
        }
    }

    //calculate indirect size
    for (i = dimCount - 1; i >= 0; i--) {
        var stackSize = memberContextStack.length, dimId = axis.dimensions[i].id, tree = dimension2Tree[dimId];

        for (j = stackSize - 1; j >= 0; j--) {
            memberContext = memberContextStack[j];
            oSize = memberContext2Size[memberContext];
            tuple = memberContext.split("/");
            var size = tuple.length;

            if (size === i + 1) {
                var node = tree.nodes[tuple[i]];

                //check for each node instead of last node - do not rely on last node to detect parentAfter
                if (!oSize.parentAfter && !jQuery.isEmptyObject(node.children) && node.idx > node.children[0].idx) {
                    //node has children & its first children appears ealier
                    oSize.parentAfter = true;
                }

                while (node.parentIdx >= 0) {
                    tuple[i] = node.parentIdx;
                    node = tree.nodes[node.parentIdx];

                    var memberContextOfParent = tuple.join("/"), oSizeOfParent = memberContext2Size[memberContextOfParent];
                    if (oSizeOfParent) { //just in case parent is not in tuples
                        oSizeOfParent.indirectSize += oSize.directSize;
                    }
                }

                memberContextStack.splice(j, 1);
            } else {
                continue;
            }
        }
    }

    if(this.profilingEnabled){
		this._PROFILER_.end(pid);
	}
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._calcFont = function(oCell) {
    //define default font style
    var fontStyle = "400 13px Lato";
    var aStyles = fontStyle.split(" ");
    var oStyles;

    //custom font style only applicable to custom cell
    if(oCell.hasOwnProperty("styles")){
        oStyles = oCell.styles;
        if(oStyles.hasOwnProperty("font-weight")){
            aStyles[0] = oStyles["font-weight"];
        }

        if(oStyles.hasOwnProperty("font-size")){
            aStyles[1] = oStyles["font-size"];
        }

        if(oStyles.hasOwnProperty("font-family")){
            aStyles[2] = oStyles["font-family"];
        }
        fontStyle = aStyles.join(" ");
    }


    return fontStyle;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._adaptColWidth = function() {
    // re-use canvas object for better performance
    var canvas = document.createElement("canvas");
    var context = canvas.getContext("2d");
    context.font = "400 13px Lato";

    var _getTextWidth = function(text) {
        var metrics = context.measureText(text);
        return metrics.width + 17;
    };

    //adapt calc width
    //calc index & tiny bar delta
    var rowDelta = 0, colDelta = 0, tinyBarRow = -1;

    if (!this.getHideGridIndex()) {
        rowDelta += 1;
        colDelta += 1;
    }

    if (!this.getHideTinyBar()) {
        rowDelta += 1;
    }
    var col = 0,
        row = 0;
    for (col = colDelta; col < this.arrViewableCells[0].length; col++) {
        var maxColWidth = 0, oColHeaderCell = this.arrViewableCells[0][col], displayColIndex = oColHeaderCell.x;

        // if (this.positionOfHScroll + (col - colDelta - this.numberOfHeaderCols + this.numberOfHiddenDataCols) > this.numberOfDataCols - 1) {
        //     break;
        // }

        if (this.oColWidth[displayColIndex] === null || this.oColWidth[displayColIndex] === undefined) {
            for (row = rowDelta; row < this.arrViewableCells.length; row++) {
                // if (this.positionOfVScroll + (row - rowDelta - this.numberOfHeaderRows + this.numberOfHiddenDataRows) > this.numberOfDataRows - 1) {
                //     break;
                // }

                //if it's tiny bar
                if (this.arrViewableCells[row].length === 1) {
                    continue;
                }

                var oCell = null;
                if (row === tinyBarRow) {
                    oCell = this.arrViewableCells[row][col + 1];
                } else {
                    oCell = this.arrViewableCells[row][col];

                    if (oCell.x === this.POSITION_OF_TINYBAR) {
                        //if found tiny bar, mark current row as tiny bar row
                        tinyBarRow = row;
                        oCell = this.arrViewableCells[row][col + 1];
                    }
                }

                if (oCell.val && oCell.val !== "") {
                    var width = _getTextWidth(oCell.val);
                    //add horizontal paddings for row members
                    if (oCell.level !== null && oCell.level !== undefined && (col <= this.numberOfHeaderRows)) {
                        width = width + oCell.level * 20;
                    }

                    if (width > maxColWidth) {
                        maxColWidth = width;
                    }
                }
            }

            if (maxColWidth > 0) {
                this.oColWidth[displayColIndex] = (maxColWidth > this.CELL_WIDTH) ? maxColWidth : this.CELL_WIDTH;
            }
        }

        oColHeaderCell.width = this.oColWidth[displayColIndex] || this.CELL_WIDTH;
    }

};

sap.fpa.ui.control.analyticgrid.Grid.prototype.enforceShowTupleElement = function(grid, row, col){
	return false;
}

sap.fpa.ui.control.analyticgrid.Grid.prototype._doCalc = function() {
    var pid = this.profilingEnabled && this._PROFILER_.begin("analyticgrid.Grid._doCalc");

    var showColHeaderVertically = this.getShowColumnHeaderVertically();

    var numberOfColTuples = this.colAxis && this.colAxis.tuples && this.colAxis.tuples.length > 0 ? this.numberOfDataCols
        : 1, //if no column dimensions, at least there's 1 column to display cell data
    numberOfRowTuples = this.rowAxis && this.rowAxis.tuples && this.rowAxis.tuples.length > 0 ? this.numberOfDataRows
        : 1, //if no row dimensions, at least there's 1 row to display cell data
    numberOfHiddenDimensions = sap.fpa.ui.infra.common.Utility.lengthOfHashObject(this.hiddenDimensions), hideGridIndex = this
        .getHideGridIndex(), hideTinyBar = numberOfHiddenDimensions > 0 ? false : this.getHideTinyBar(), //tiny bar can no longer be hidden if user clicked on it
    hideDimAttrs = this.getHideDimensionAttributes(), increamentalWidth = 0, increamentalHeight = 0, col = 0, row = 0, that = this;

    //calculate grid frame size
    this._calcFrameSize();

    //minimum number of data rows/columns to be displayed; if viewable size cannot display so many rows/columns, then row/column header will be hidden
    var minNumberOfDataColumn = this.DATA_MIN_COL < numberOfColTuples ? this.DATA_MIN_COL : numberOfColTuples;
    var minNumberOfDataRow = this.DATA_MIN_ROW < numberOfRowTuples ? this.DATA_MIN_ROW : numberOfRowTuples;

    var lastNumberOfViewableCols = this.numberOfViewableCols;
    var lastNumberOfViewableRows = this.numberOfViewableRows;
    this.numberOfViewableCols = 0;
    this.numberOfViewableRows = 0;
    this.numberOfViewableDataRows = 0;
    this.numberOfViewableDataCols = 0;
    this.decorators = [];

    //index bar/tiny bar width/height - user might drag it to increase/decrease the size
    var indexColWidth = this.oColWidth[this.POSITION_OF_INDEXCELL] || this.INDEX_WIDTH, //A|B|C|D|...|AA|...|ZZZ|...
        indexRowHeight = this.oRowHeight[this.POSITION_OF_INDEXCELL] || this.INDEX_HEIGHT, //1|2|3|...|999|...
        tinyBarColWidth = this.oColWidth[this.POSITION_OF_TINYBAR] || this.TINYBAR_WIDTH, 
        tinyBarRowHeight = this.oRowHeight[this.POSITION_OF_TINYBAR] || this.TINYBAR_HEIGHT;

    //calculate number of viewable columns		
    this.hiddenRowDimensions = {};
    this.hiddenColDimensions = {};

    var headerColDisplayIndexes = [], headerRowDisplayIndexes = [], maxColWidth = this.frameWidth -
        (hideGridIndex ? 0 : indexColWidth) - (hideTinyBar ? 0 : tinyBarColWidth), maxRowHeight = this.frameHeight -
        (hideGridIndex ? 0 : indexRowHeight) - (hideTinyBar ? 0 : tinyBarRowHeight);
    var indexOfDim = 0;
    var i = 0,
        j = 0;
    var dim = null,
        mbrCtx = null,
        oSize = null,
        cntOfAttrs = 0;
    var oCell = null,
        oMember = null,
        flags = 0;
    var colIndex = 0,
        rowIndex = 0;
    var attrCnt = 0,
        attrName = "";
    var colDisplayIndex = 0,
        oStatus = null;
    var dimBase = 0;
    var colDelta = 0, 
        rowDelta = 0;
    var MEMBER_FLAG = 0;
    var rowDisplayIndex = 0;
    var oTuple = null, 
        base = 0;
    var mbrCtxCanHide = null;
    var attrIndex = 0,
        attrVal = "";
    var rowSeq = 0, 
        rowTinyBarPassed = false;
    var oTempCell = null;
    var pollingDimDict = {};
    var polling = false;


    //use reversed order to ensure the outer dimension be hidden first if no enough space to hold them	
    for (indexOfDim = this.numberOfRowDimensions - 1; indexOfDim >= 0; indexOfDim--) {
        dim = this.rowAxis.dimensions[indexOfDim];
        
        //checks whether the cell's dimension is a pool dimension - if ALLOCATION feature is not active it directly returns false 
        if (this.getPoolMapping() && this.getPoolMapping().isEditablePoolDimension(dim.id)) {
            pollingDimDict[dim.id] = true;
        }
        
        cntOfAttrs = hideDimAttrs ? 0 : (dim.attrs ? dim.attrs.length: 0);

        if(this.getFilterDimensions()[dim.id]) {
            continue;
        }

        if (this.hiddenDimensions[dim.id]) { //hide dimension and its attributes
            this.hiddenRowDimensions[dim.id] = true;
            col += cntOfAttrs + 1;
            continue;
        } else {
            var width = 0, maxWidth = maxColWidth - increamentalWidth - (this.CELL_WIDTH + this.CELL_PADDING) *
                minNumberOfDataColumn;

            if (this.hiddenDimensions.hasOwnProperty(dim.id)) { //user clicked tiny bar item, so cannot hide
                maxWidth = 1000000; //simply increase the maximum width to prevent hide
            }

            for (i = 0; i < cntOfAttrs + 1; i++) {
                width += this.oColWidth[this.numberOfHeaderCols - 1 - col - i] ? (this.oColWidth[this.numberOfHeaderCols -
                    1 - col - i] + this.CELL_PADDING) : (this.CELL_WIDTH + this.CELL_PADDING);
                if (width > maxWidth) { //should hide
                    width = 0;
                    break;
                }
            }

            if (width > 0) {
                increamentalWidth += width;
                this.numberOfViewableCols += cntOfAttrs + 1;
                for (i = 0; i < cntOfAttrs + 1; i++) {
                    headerColDisplayIndexes.push(this.numberOfHeaderCols - 1 - col - i); //push in array in reversed order
                }
            } else {
                this.hiddenRowDimensions[dim.id] = true;
                hideTinyBar = false; //cannot hide tiny bar if any dimension is hidden
            }

            col += cntOfAttrs + 1;
        }
    }

    headerColDisplayIndexes.reverse(); //reverse to recover order in right sequence

    col += this.positionOfHScroll;
    while (increamentalWidth < maxColWidth) {
        increamentalWidth += this.oColWidth[col] ? (this.oColWidth[col]  + this.CELL_PADDING) : (this.CELL_WIDTH + this.CELL_PADDING);
        this.numberOfViewableCols++;
        this.numberOfViewableDataCols++;
        col++;
    }

    if (this.numberOfViewableCols < lastNumberOfViewableCols) {
        this.numberOfViewableCols = lastNumberOfViewableCols;
    }


    //calculate number of viewable rows
    var cntOfTotalHiddenDim = 0;

    //use reversed order to ensure the outer dimension be hidden first if no enough space to hold them	
    for (indexOfDim = this.numberOfColDimensions - 1; indexOfDim >= 0; indexOfDim--) {
        dim = this.colAxis.dimensions[indexOfDim];

        if(this.getFilterDimensions()[dim.id]) {
            continue;
        }

        cntOfAttrs = hideDimAttrs ? 0 : (dim.attrs ? dim.attrs.length: 0);

        if (this.hiddenDimensions[dim.id]) { //hide dimension and its attributes
            this.hiddenColDimensions[dim.id] = true;
            cntOfTotalHiddenDim++;
            row += cntOfAttrs + 1;
            continue;
        } else {
            var height = 0, maxHeight = maxRowHeight - increamentalHeight - (this.CELL_HEIGHT + this.CELL_PADDING) *
                minNumberOfDataRow;

            if (this.hiddenDimensions.hasOwnProperty(dim.id)) { //user clicked tiny bar item, so cannot hide
                maxHeight = 1000000; //simply increase the maximum height to prevent hide
            }

            for (i = 0; i < cntOfAttrs + 1; i++) {
                height += this.oRowHeight[this.numberOfHeaderRows - 1 - row - i] ? (this.oRowHeight[this.numberOfHeaderRows -
                    1 - row - i] + this.CELL_PADDING) : (this.CELL_HEIGHT + this.CELL_PADDING);
                if (height > maxHeight) { //should hide
                    height = 0;
                    break;
                }
            }

            if (height > 0) {
                increamentalHeight += height;
                this.numberOfViewableRows += cntOfAttrs + 1;
                for (i = 0; i < cntOfAttrs + 1; i++) {
                    headerRowDisplayIndexes.push(this.numberOfHeaderRows - 1 - row - i); //push in array in reversed order
                }
            } else {
                this.hiddenColDimensions[dim.id] = true;
                cntOfTotalHiddenDim++;
                hideTinyBar = false; //cannot hide tiny bar if any dimension is hidden
            }

            row += cntOfAttrs + 1;
        }
    }


    var colDimHeadersHidden = this.colAxis && !jQuery.isEmptyObject(this.colAxis.dimensions) ? this.colAxis.dimensions.length === sap.fpa.ui.infra.common.Utility
        .lengthOfHashObject(this.hiddenColDimensions)
        : true, rowDimHeadersHidden = this.rowAxis && !jQuery.isEmptyObject(this.rowAxis.dimensions) ? this.rowAxis.dimensions.length === sap.fpa.ui.infra.common.Utility
        .lengthOfHashObject(this.hiddenRowDimensions)
        : true;


    if (showColHeaderVertically === true && !rowDimHeadersHidden) {
        //if rowDimHeadersHidden
        //self minus headerRowDisplayIndexes for 1
        this.numberOfHeaderRows -= 1;
        for(i = 0; i < headerRowDisplayIndexes.length; i++) {
            headerRowDisplayIndexes[i]--;
        }
    }

    if (showColHeaderVertically === true && !rowDimHeadersHidden) {
        this.numberOfHeaderRows += 1; // No header of col, just member
    }


    if (showColHeaderVertically === false) {
        if (!colDimHeadersHidden || !rowDimHeadersHidden) { //NOT all column dimensions are hidden & all row dimensions are also hidden
            var indexOfFirstRow = colDimHeadersHidden ? this.numberOfHeaderRows - 1 : 0;

            //1st row header - to put column or row dimension name
            increamentalHeight += this.oRowHeight[indexOfFirstRow] ? (this.oRowHeight[indexOfFirstRow] + this.CELL_PADDING) : (this.CELL_HEIGHT + this.CELL_PADDING);
            this.numberOfViewableRows += 1;
            headerRowDisplayIndexes.push(indexOfFirstRow);
            row++;
        }
    } else {//add getHideDimensionsName check
        if (!this.getHideDimensionsName() && !rowDimHeadersHidden) { //NOT all column dimensions are hidden & all row dimensions are also hidden
            var indexOfLastHeaderRow = this.numberOfHeaderRows - 1;

            // Last row header - to put empty
            increamentalHeight += this.oRowHeight[indexOfLastHeaderRow] ? (this.oRowHeight[indexOfLastHeaderRow] + this.CELL_PADDING) : (this.CELL_HEIGHT + this.CELL_PADDING);
            this.numberOfViewableRows += 1;
            headerRowDisplayIndexes.unshift(indexOfLastHeaderRow);
            row++;
        }
    }

    headerRowDisplayIndexes.reverse(); //reverse to recover order in right sequence	

    while (increamentalHeight < maxRowHeight) {
        increamentalHeight += this.oRowHeight[row] ? (this.oRowHeight[row] + this.CELL_PADDING) : (this.CELL_HEIGHT + this.CELL_PADDING);
        this.numberOfViewableRows++;
        this.numberOfViewableDataRows++;
        row++;
    }

    if (this.numberOfViewableRows < lastNumberOfViewableRows) {
        this.numberOfViewableRows = lastNumberOfViewableRows;
    }

    //calculate viewable cells
    this.arrViewableCells = [];
    var CELL_TYPE = sap.fpa.ui.control.analyticgrid.Grid._CELL_TYPE, CELL_FLAG = sap.fpa.ui.control.infra.constants.Analyticgrid.CELL_FLAG;
    if (!hideGridIndex) {
        this.arrViewableCells.push([]);
        this.arrViewableCells[0].push({
            type : CELL_TYPE.DIMENSION_SELECTOR,
            val : "",
            width : indexColWidth,
            height : indexRowHeight,
            x : this.POSITION_OF_INDEXCELL,
            y : this.POSITION_OF_INDEXCELL
        });
        
        for (col = 0; colIndex < this.numberOfViewableCols; col++) {
            if (col < this.numberOfHeaderCols && colIndex >= headerColDisplayIndexes.length) { //header columns completed
                col = this.numberOfHeaderCols - 1;
                continue;
            }

            colDisplayIndex = col < this.numberOfHeaderCols ? headerColDisplayIndexes[colIndex] : col +
                this.positionOfHScroll;

            oStatus = this._getStatusOfDiplayIndex(colDisplayIndex, true);
            if (oStatus.hidden) {
                continue;
            }

            this.arrViewableCells[0].push({
                type : CELL_TYPE.COL_INDEX_CELL,
                val : this._numberToZZ(colDisplayIndex),
                width : (this.oColWidth[colDisplayIndex] || this.CELL_WIDTH),
                minHeight : indexRowHeight,
                resizableCol : true,
                x : colDisplayIndex,
                y : this.POSITION_OF_INDEXCELL,
                tooltip : this.hashOfColTooltips[colDisplayIndex]
            });

            colIndex++;
        }
    }

    if (!hideTinyBar) {
        this.arrViewableCells.push([]);

        var arrLine;

        if (!hideGridIndex) {
            oCell = this.arrViewableCells[0][0];
            oCell.colSpan = 2;
            oCell.rowSpan = 2;
            oCell.width += tinyBarColWidth;
            oCell.height += tinyBarRowHeight;

            arrLine = this.arrViewableCells[1];
        } else {
            this.arrViewableCells[0].push({
                type : CELL_TYPE.DIMENSION_SELECTOR,
                val : "",
                width : tinyBarColWidth,
                height : tinyBarRowHeight,
                x : this.POSITION_OF_TINYBAR,
                y : this.POSITION_OF_TINYBAR
            });

            arrLine = this.arrViewableCells[0];
        }

        arrLine.push({
            type : CELL_TYPE.COL_TINYBAR,
            val : "",
            //width: increamentalWidth,
            height : tinyBarRowHeight,
            colSpan : this.numberOfViewableCols,
            x : 0,
            y : this.POSITION_OF_TINYBAR
        });
    }

    rowSeq = 0;
    rowTinyBarPassed = false;
    for (row = 0; rowSeq < this.numberOfViewableRows; row++) {
        if (row < this.numberOfHeaderRows && rowSeq >= headerRowDisplayIndexes.length) { //header rows completed
            row = this.numberOfHeaderRows - 1;
            continue;
        }

        rowDisplayIndex = row < this.numberOfHeaderRows ? headerRowDisplayIndexes[rowSeq] : row + this.positionOfVScroll;

        oStatus = this._getStatusOfDiplayIndex(rowDisplayIndex, false);
        if (oStatus.hidden) {
            continue;
        }

        this.arrViewableCells.push([]);

        rowIndex = rowSeq;

        if (!hideTinyBar) {
            rowIndex += 1;
        }

        if (!hideGridIndex) {
            rowIndex += 1;
            this.arrViewableCells[rowIndex].push({
                type : CELL_TYPE.ROW_INDEX_CELL,
                val : (rowDisplayIndex + 1).toString(),
                height : this.oRowHeight[rowDisplayIndex] || this.CELL_HEIGHT,
                width : indexColWidth,
                resizableRow : true,
                x : this.POSITION_OF_INDEXCELL,
                y : rowDisplayIndex
            });
        }

        if (!hideTinyBar && !rowTinyBarPassed) {
            rowTinyBarPassed = true;
            this.arrViewableCells[rowIndex].push({
                type : CELL_TYPE.ROW_TINYBAR,
                val : "",
                width : tinyBarColWidth,
                //height: increamentalHeight,
                rowSpan : this.numberOfViewableRows,
                x : this.POSITION_OF_TINYBAR,
                y : 0
            });
        }

        //initialize with dummy cells
        var colSeq = 0;
        for (col = 0; colSeq < this.numberOfViewableCols; col++) {
            if (col < this.numberOfHeaderCols && colSeq >= headerColDisplayIndexes.length) { //header columns completed
                col = this.numberOfHeaderCols - 1;
                continue;
            }

            colDisplayIndex = col < this.numberOfHeaderCols ? headerColDisplayIndexes[colSeq] : col +
                this.positionOfHScroll;

            oStatus = this._getStatusOfDiplayIndex(colDisplayIndex, true);
            if (oStatus.hidden) {
                continue;
            }

            oCell = {
                type : CELL_TYPE.DUMMY_CELL,
                val : "",
                x : colDisplayIndex,
                y : rowDisplayIndex
            };

            if (hideGridIndex && rowSeq === 0) {
                oCell.width = this.oColWidth[colDisplayIndex] || this.CELL_WIDTH;
                oCell.height = this.oRowHeight[rowDisplayIndex] || this.CELL_HEIGHT;
                oCell.resizableCol = true;
            }
            if (hideGridIndex && ((rowSeq > 0 && colSeq === 0) || (rowSeq === 0 && colSeq === 1))) {
                oCell.width = this.oColWidth[colDisplayIndex] || this.CELL_WIDTH;
                oCell.height = this.oRowHeight[rowDisplayIndex] || this.CELL_HEIGHT;
                oCell.resizableRow = true;
            }

            this.arrViewableCells[rowIndex].push(oCell);

            colSeq++;
        }

        rowSeq++;
    }

    //dimension selector
    var oDimSelectorCell = this.arrViewableCells[0][0];
    oDimSelectorCell.type = CELL_TYPE.DIMENSION_SELECTOR;

    //column dimension header and tuples
    if (!colDimHeadersHidden) {

        if (!hideGridIndex) {
            colDelta += 1;
            rowDelta += 1;
        }
        if (!hideTinyBar) {
            rowDelta += 1;
        }

        colDelta += headerColDisplayIndexes.length;

        dimBase = 0;
        if (showColHeaderVertically) {
            if (headerColDisplayIndexes.length > 0) {
                colIndex = colDelta - 1; // Print header on the left of Member, on the top of row dim
                rowTinyBarPassed = false;
                for (col = 0; col < this.numberOfColDimensions; col++) {
                    rowIndex = dimBase + rowDelta;

                    dim = this.colAxis.dimensions[col];

                    if (this.getFilterDimensions()[dim.id]) {
                        continue;
                    }

                    if (this.hiddenColDimensions[dim.id]) {
                        continue;
                    }

                    if (!hideTinyBar && !rowTinyBarPassed) {
                        colIndex += 1; // Add increment for tiny bar
                    }
                    if (rowIndex >= this.arrViewableCells.length || colIndex >= this.arrViewableCells[rowIndex].length) {
                        if (!hideTinyBar && !rowTinyBarPassed) {
                            colIndex -= 1; // Roll back the increment for tiny bar
                        }
                        break;
                    }

                    oCell = this.arrViewableCells[rowIndex][colIndex];
                    if (this.getHideDimensionsName()) {
                        oCell.val = "";//not set the cell type to avoid the CSS style.
                    } else {
                        oCell.val = dim.desc || dim.id;
                        oCell.type = CELL_TYPE.COL_DIMENSION_HEADER;
                    }
                    oCell.attrs = {
                        dimId : dim.id
                    };
                    dimBase++;
                    rowIndex++;

                    if (!hideTinyBar && !rowTinyBarPassed) {
                        colIndex -= 1; // Have passed Tiny bay, remove increment
                        rowTinyBarPassed = true;
                    }

                    if (!hideDimAttrs && dim.attrs) {
                        attrCnt = dim.attrs.length;
                        dimBase += attrCnt;
                        for (j = 0; j < attrCnt; j++) {
                            if (rowIndex >= this.arrViewableCells.length ||
                                colIndex >= this.arrViewableCells[rowIndex].length) {
                                break;
                            }

                            oCell = this.arrViewableCells[rowIndex][colIndex];
                            attrName = dim.attrs[j].desc || dim.attrs[j].id;

                            oCell.type = CELL_TYPE.COL_DIMENSION_HEADER_ATTR;
                            oCell.val = attrName;
                            rowIndex++;
                        }
                    }
                }
            }
        } else {
            for (col = 0; col < this.numberOfColDimensions; col++) {
                colIndex = dimBase + colDelta;

                dim = this.colAxis.dimensions[col];

                if (this.getFilterDimensions()[dim.id]) {
                    continue;
                }

                if (this.hiddenColDimensions[dim.id]) {
                    continue;
                }

                if (!hideTinyBar) {
                    colIndex += 1; //exactly the row contains row tiny bar, so add one to column index
                }

                if (rowDelta >= this.arrViewableCells.length || colIndex >= this.arrViewableCells[rowDelta].length) {
                    break;
                }

                oCell = this.arrViewableCells[rowDelta][colIndex];
                if (this.getHideDimensionsName()) {
                    oCell.val = "";
                } else {
                    oCell.type = CELL_TYPE.COL_DIMENSION_HEADER;
                    oCell.val = dim.desc || dim.id;
                }
                oCell.attrs = {
                    dimId : dim.id
                };
                dimBase++;
                colIndex++;

                if (!hideDimAttrs && dim.attrs) {
                    attrCnt = dim.attrs.length;
                    dimBase += attrCnt;
                    for (j = 0; j < attrCnt; j++) {
                        if (colIndex >= this.arrViewableCells[rowDelta].length) {
                            break;
                        }

                        oCell = this.arrViewableCells[rowDelta][colIndex];
                        attrName = dim.attrs[j].desc || dim.attrs[j].id;

                        oCell.type = CELL_TYPE.COL_DIMENSION_HEADER_ATTR;
                        oCell.val = attrName;
                        colIndex++;
                    }
                }
            }
        }

        rowDelta += 1;
        if (showColHeaderVertically) {
            rowDelta -= 1; // Use the same row, Member list on the right of header
        }
        colIndex = colDelta;
        var colMbrCtxCanHide = {};
        MEMBER_FLAG = sap.fpa.ui.control.infra.constants.Analyticgrid.MEMBER_FLAG;
        for (col = this.positionOfHScroll; col < this.numberOfDataCols; col++) {
            colDisplayIndex = col + this.numberOfHeaderCols;
            oStatus = this._getStatusOfDiplayIndex(
                colDisplayIndex,
                true);

            if (oStatus.hidden) {
                continue;
            }

            oTuple = this.colAxis.tuples[col]; 
            base = 0;

            rowTinyBarPassed = false;
            for (i = 0; i < oTuple.length; i++) {
                dim = this.colAxis.dimensions[i];
                mbrCtx = oTuple.slice(0, i + 1).join("/");
                oSize = this.colMemberContext2Size[mbrCtx];

                if (this.getFilterDimensions()[dim.id]) {
                    continue;
                }

                if (this.hiddenColDimensions[dim.id]) {
                    continue;
                }

                if (showColHeaderVertically && !hideTinyBar && !rowTinyBarPassed) {
                    colIndex += 1; // Add increment for tiny bar
                }

                mbrCtxCanHide = !this.enforceShowTupleElement(this, i, col) && oSize.startTupleIndex !== col && colMbrCtxCanHide[mbrCtx];
                //				if(oSize.startTupleIndex !== col && colMbrCtxCanHide[mbrCtx]) {
                //					base += 1 + (hideDimAttrs ? 0 : dim.attrs.length);
                //					continue; //member name can be hidden
                //				}

                if (rowDelta + base >= this.arrViewableCells.length ||
                    colIndex >= this.arrViewableCells[rowDelta + base].length) {
                    if (showColHeaderVertically && !hideTinyBar && !rowTinyBarPassed) {
                        colIndex -= 1; // Roll back the increment for tiny bar
                    }
                    break;
                }

                oCell = this.arrViewableCells[rowDelta + base][colIndex];
                oMember = dim.members[oTuple[i]];
				flags = this.hiddenMemberContextCols[mbrCtx] ? ((oMember.flags ^ MEMBER_FLAG.EXPANDED) | MEMBER_FLAG.EXPANSIBLE): (oMember.flags || 0);

                oCell.x = colDisplayIndex;
                oCell.type = CELL_TYPE.COL_DIMENSION_MEMBER;
                if (!mbrCtxCanHide) {
                    //oCell.val = oMember.desc || oMember.id;
                    if (!oMember.desc) {
                        oCell.val = oMember.shortId || oMember.id;
                    } else {
                        oCell.val = oMember.desc;
                    }

                    oCell.flags = flags;
                    oCell.level = oMember.level || 0;
                }
                oCell.attrs = {
                    mbrCtx : mbrCtx
                };
                base++;

                if (showColHeaderVertically && !hideTinyBar && !rowTinyBarPassed) {
                    colIndex -= 1; // Have passed Tiny bay, remove increment
                    rowTinyBarPassed = true;
                }

                if (!hideDimAttrs && dim.attrs) {
                    attrCnt = dim.attrs.length;
                    var decorator;
                    for (j = 0; j < attrCnt; j++) {
                        if (rowDelta + base >= this.arrViewableCells.length) {
                            break;
                        }

                        oCell = this.arrViewableCells[rowDelta + base][colIndex];
                        attrIndex = oMember.attr && oMember.attr.length > j ? oMember.attr[j] : -1;
                        attrVal = attrIndex >= 0 ? dim.attrs[j].choices[attrIndex] : "";

                        oCell.x = colDisplayIndex;
                        oCell.type = CELL_TYPE.COL_DIMENSION_MEMBER_ATTR;
                        if (!mbrCtxCanHide) {
                            oCell.val = attrVal;
                            oCell.flags = 0;
                            oCell.level = 0;
                        }
                        oCell.attrs = {
                            mbrCtx : mbrCtx
                        };
                        decorator = this._getDecorator(oCell.type, [dim.id, oMember.id, j, attrIndex]);
                        if(decorator) {
                            decorator.x = oCell.x;
                            decorator.y = oCell.y;
                            this.decorators.push(decorator);
                        }
                        base++;
                    }
                }

                colMbrCtxCanHide[mbrCtx] = true;
            }

            colIndex++;
        }
    }

    //row dimension header and tuples
    if (!rowDimHeadersHidden) {
        colDelta = 0;
        rowDelta = 0;

        if (!hideGridIndex) {
            colDelta += 1;
            rowDelta += 1;
        }
        if (!hideTinyBar) {
            rowDelta += 1;
        }

        rowDelta += headerRowDisplayIndexes.length - 1;

        dimBase = 0;
        for (row = 0; row < this.numberOfRowDimensions; row++) {
            colIndex = dimBase + colDelta;

            dim = this.rowAxis.dimensions[row];

            if(this.getFilterDimensions()[dim.id]) {
                continue;
            }

            if (this.hiddenRowDimensions[dim.id]) {
                continue;
            }

            if (colDimHeadersHidden && !hideTinyBar) {
                colIndex += 1; //exactly the row contains row tiny bar, so add one to column index
            }

            if (rowDelta >= this.arrViewableCells.length || colIndex >= this.arrViewableCells[rowDelta].length) {
                break;
            }

            oCell = this.arrViewableCells[rowDelta][colIndex];
            if (this.getHideDimensionsName()) {
                oCell.val = "";//not set the cell type to avoid the CSS style
            } else {
                oCell.type = CELL_TYPE.ROW_DIMENSION_HEADER;
                oCell.val = dim.desc || dim.id;
            }
            oCell.attrs = {
                dimId : dim.id
            };
            dimBase++;
            colIndex++;

            if (!hideDimAttrs && dim.attrs) {
                attrCnt = dim.attrs.length;
                dimBase += attrCnt;
                for (j = 0; j < attrCnt; j++) {
                    if (colIndex >= this.arrViewableCells[rowDelta].length) {
                        break;
                    }

                    oCell = this.arrViewableCells[rowDelta][colIndex];
                    attrName = dim.attrs[j].desc || dim.attrs[j].id;

                    oCell.type = CELL_TYPE.ROW_DIMENSION_HEADER_ATTR;
                    oCell.val = attrName;
                    colIndex++;
                }
            }
        }

        rowDelta += 1;
        rowIndex = rowDelta;
        var rowMbrCtxCanHide = {};
        MEMBER_FLAG = sap.fpa.ui.control.infra.constants.Analyticgrid.MEMBER_FLAG;
        for (row = this.positionOfVScroll; row < this.numberOfDataRows; row++) {
            if (rowIndex >= this.arrViewableCells.length || colDelta >= this.arrViewableCells[rowIndex].length) {
                break;
            }

            rowDisplayIndex = row + this.numberOfHeaderRows; 
            oStatus = this._getStatusOfDiplayIndex(
                rowDisplayIndex,
                false);

            if (oStatus.hidden) {
                continue;
            }

            oTuple = this.rowAxis.tuples[row];
            base = 0;

            for (i = 0; i < oTuple.length; i++) {
                if (rowIndex >= this.arrViewableCells.length ||
                    colDelta + base >= this.arrViewableCells[rowIndex].length) {
                    break;
                }

                dim = this.rowAxis.dimensions[i];

                if(this.getFilterDimensions()[dim.id]) {
                    continue;
                }

                mbrCtx = oTuple.slice(0, i + 1).join("/");
                oSize = this.rowMemberContext2Size[mbrCtx];
                polling = !!pollingDimDict[dim.id];

                if (this.hiddenRowDimensions[dim.id]) {
                    continue;
                }

                mbrCtxCanHide = !this.enforceShowTupleElement(this, row, i) && (oSize.startTupleIndex !== row && rowMbrCtxCanHide[mbrCtx]);
                //				if(oSize.startTupleIndex !== row && rowMbrCtxCanHide[mbrCtx]) {
                //					base += 1 + (hideDimAttrs ? 0 : dim.attrs.length);
                //					continue; //member name can be hidden
                //				}

                oCell = this.arrViewableCells[rowIndex][colDelta + base];
                oMember = dim.members[oTuple[i]];
				flags = this.hiddenMemberContextRows[mbrCtx] ? ((oMember.flags ^ MEMBER_FLAG.EXPANDED) | MEMBER_FLAG.EXPANSIBLE): (oMember.flags || 0);

                oCell.y = rowDisplayIndex;
                oCell.type = CELL_TYPE.ROW_DIMENSION_MEMBER;
                if (!mbrCtxCanHide) {
                    //oCell.val = oMember.desc || oMember.id;
                    if (!oMember.desc) {
                        oCell.val = oMember.shortId || oMember.id;
                    } else {
                        oCell.val = oMember.desc;
                    }
                    oCell.flags = flags;
                    oCell.level = oMember.level || 0;
                    //put a flag to indicate this is a polling member
                    oCell.polling = polling;
                } else {
                	var iii=0;
                	
                }
                oCell.attrs = {
                    mbrCtx : mbrCtx
                };
                base++;

                if (!hideDimAttrs && dim.attrs) {
                    attrCnt = dim.attrs.length;
                    for (j = 0; j < attrCnt; j++) {
                        if (colDelta + base >= this.arrViewableCells[rowIndex].length) {
                            break;
                        }

                        oCell = this.arrViewableCells[rowIndex][colDelta + base];
                        attrIndex = oMember.attr && oMember.attr.length > j ? oMember.attr[j] : -1;
                        attrVal = attrIndex >= 0 ? dim.attrs[j].choices[attrIndex] : "";

                        oCell.y = rowDisplayIndex;
                        oCell.type = CELL_TYPE.ROW_DIMENSION_MEMBER_ATTR;
                        if (!mbrCtxCanHide) {
                            oCell.val = attrVal;
                            oCell.flags = 0;
                            oCell.level = 0;
                        }
                        oCell.attrs = {
                            mbrCtx : mbrCtx
                        };
                        base++;
                    }
                }

                rowMbrCtxCanHide[mbrCtx] = true;
            }

            rowIndex++;
        }
    }

    //data cells
    if (this.oGridData && !jQuery.isEmptyObject(this.oGridData.cells)) {
        colDelta = 0;
        rowDelta = 0;

        if (!hideGridIndex) {
            colDelta += 1;
            rowDelta += 1;
        }
        if (!hideTinyBar) {
            rowDelta += 1;
        }

        colDelta += headerColDisplayIndexes.length;
        rowDelta += headerRowDisplayIndexes.length;

        colIndex = colDelta;
        var topLeftDataCell = {};
        topLeftDataCell.found = false;
        for (col = this.positionOfHScroll; col < numberOfColTuples; col++) {
            colDisplayIndex = col + this.numberOfHeaderCols;
            var oColStatus = this._getStatusOfDiplayIndex(
                colDisplayIndex,
                true);

            if (oColStatus.hidden) {
                continue;
            }

            rowIndex = rowDelta;
            rowTinyBarPassed = false;
            for (row = this.positionOfVScroll; row < numberOfRowTuples; row++) {
                rowDisplayIndex = row + this.numberOfHeaderRows;
                var oRowStatus = this._getStatusOfDiplayIndex(
                    rowDisplayIndex,
                    false);

                if (oRowStatus.hidden) {
                    continue;
                }

                if (colDimHeadersHidden && rowDimHeadersHidden && !hideTinyBar && !rowTinyBarPassed) {
                    colIndex += 1; //exactly the row contains row tiny bar, so add one to column index
                }

                if (rowIndex >= this.arrViewableCells.length || colIndex >= this.arrViewableCells[rowIndex].length) {
                    if (colDimHeadersHidden && rowDimHeadersHidden && !hideTinyBar && !rowTinyBarPassed) {
                        colIndex -= 1; // Roll back the increment for tiny bar
                    }
                    break;
                }

                oCell = this.arrViewableCells[rowIndex][colIndex];
                flags = 0;
                var idx = row * numberOfColTuples + col, formattedVal = "", cellVal = 0, oCellData = this.hashOfCellData[idx];
                var alertLevel = 0;
                var locks = this.getLocks();
                
                var invalid = false;
                

                // for data cells
                if (this.modifiedCells[idx]) {
                    oCell.modified = true;
                    cellVal = this.modifiedCells[idx].val;
                    formattedVal = this.modifiedCells[idx].formatted;
                    if (!formattedVal) {
                        formattedVal = this._formatDataCell(cellVal, this.modifiedCells[idx].idx);
                        this.modifiedCells[idx].formatted = formattedVal;
                    }
                    flags = oCellData ? oCellData.flags : (this._isCellEditable(idx) ? CELL_FLAG.EDITABLE : 0);
                    alertLevel = this.modifiedCells[idx].alertLevel;
                } else {
                    if (oCellData) {
                        flags = oCellData.flags;
                        cellVal = oCellData.val;
                        formattedVal = oCellData.formatted;
                        if (!formattedVal) {
                            formattedVal = this._formatDataCell(cellVal, oCellData.idx);
                            this.hashOfCellData[idx].formatted = formattedVal;
                        }
                        if(oCellData.invalid){
                        	invalid = oCellData.invalid; 
                        }
                        
                        
                    } else {
                        flags = this._isCellEditable(idx) ? CELL_FLAG.EDITABLE : 0;
                    }
                    if (this.hashOfCellData[idx]) {
                        alertLevel = this.hashOfCellData[idx].alertLevel;
                    }
                }

                if (this.hashOfComments[idx]) {
                    flags = flags | CELL_FLAG.COMMENTS_FILLED;
                } else {
                    flags = (flags | CELL_FLAG.COMMENTS_FILLED) ^ CELL_FLAG.COMMENTS_FILLED;
                }

                if (locks[idx] && locks[idx].enabled) {
                    flags = CELL_FLAG.LOCKED;
                }

                oCell.invalid = invalid;
                
                oCell.x = colDisplayIndex;
                oCell.y = rowDisplayIndex;
                oCell.type = (formattedVal === sap.fpa.ui.control.infra.constants.Analyticgrid.NULL_VALUE) ? CELL_TYPE.NULL_CELL
                    : CELL_TYPE.DATA_CELL;
                oCell.idx = idx;
                oCell.val = formattedVal;
                oCell.flags = flags;
                oCell.condition = alertLevel;
                oCell.attrs = {
                    idx : idx,
                    row : rowIndex,
                    col : colIndex
                };
                if (!topLeftDataCell.found) {
                    topLeftDataCell.found = true;
                    topLeftDataCell.rowIndex = rowIndex;
                    topLeftDataCell.colIndex = colIndex;
                }

                if (colDimHeadersHidden && rowDimHeadersHidden && !hideTinyBar && !rowTinyBarPassed) {
                    colIndex -= 1; //no more rows contains row tiny bar, so subtract one from column index
                    rowTinyBarPassed = true;
                }

                rowIndex++;
            }

            colIndex++;
        }
        if (topLeftDataCell.found) {
            var iRow = topLeftDataCell.rowIndex;
            var iCol = topLeftDataCell.colIndex;
            var iter = 0;
            for (iter = iCol; iter < this.arrViewableCells[iRow].length; iter++) {
                oCell = this.arrViewableCells[iRow][iter];
                oCell.topDataCell = true;
            }
            oCell = this.arrViewableCells[iRow][iCol];
            oCell.leftDataCell = true;
            if (!hideTinyBar && colDimHeadersHidden && rowDimHeadersHidden) {
                iCol -= 1;
            }
            for (iter = iRow + 1; iter < this.arrViewableCells.length; iter++) {
                oCell = this.arrViewableCells[iter][iCol];
                oCell.leftDataCell = true;
            }
        }
    }


    //focused cell, highlighted index cells, selected cells, ...
    var countOfRows = this.arrViewableCells.length, highlightedRows = {}, highlightedCols = {};
	var customMarkStyle = this.selectionBoxOption.customHighlightClass;

    rowDelta = 0;
    colDelta = 0;
    if (!hideTinyBar) {
        rowDelta += 1;
        colDelta += 1;
    }
    if (!hideGridIndex) {
        rowDelta += 1;
        colDelta += 1;
    }
    rowTinyBarPassed = false;
    for (row = 0; row < countOfRows; row++) {
        var countOfCols = this.arrViewableCells[row].length;
        for (col = 0; col < countOfCols; col++) {
            oCell = this.arrViewableCells[row][col];
            var oCustomCell = null;
            if (oCell.type === CELL_TYPE.DUMMY_CELL) {
                oCustomCell = this._getCustomCell(oCell.x, oCell.y, true); // the data of dummy cells
                flags = this.getFreeEdit() && !this.getDisableEdit() ? CELL_FLAG.EDITABLE : CELL_FLAG.NONE;
                if(oCustomCell){
                    if(oCustomCell["cell-reference"] && typeof(oCustomCell["cell-reference"].flags) === "number"){
                        flags = oCustomCell["cell-reference"].flags;
                    }
                }
                oCell.flags = flags;
            }
            
            var colspan = 1, rowspan = 1;

            oCell.styles = oCell.styles || {};
            oCell.attributes = oCell.attributes || {};
            oCell.classes = oCell.classes || {};

            if (this.oFocusedCell.col === oCell.x && this.oFocusedCell.row === oCell.y) {
                oCell.focused = true;
            }
            if (this.oEditingCell.col === oCell.x && this.oEditingCell.row === oCell.y) {
                oCell.editing = true;
            }
            if (this._withinSelectedRange(oCell.x, oCell.y)) {
                oCell.selected = true;
                oCell.markStyle = customMarkStyle;
                
                //highlightedCols[col] = true;
                //highlightedRows[row] = true;

                if (rowTinyBarPassed === false) {
                    if (row === rowDelta && col >= colDelta && !hideTinyBar) {
                        highlightedCols[col - 1] = true; // Skip tiny bar for column index
                        highlightedRows[row] = true;
                    } else {
                        highlightedCols[col] = true;
                        highlightedRows[row] = true;
                    }

                    if (row > rowDelta) {
                        rowTinyBarPassed = true;
                    }
                } else {
                    highlightedCols[col] = true;
                    highlightedRows[row] = true;
                }

            }

            if (oCustomCell) {
                oCell.styles = jQuery.extend(true, oCell.styles, oCustomCell.styles);
                oCell.attributes = jQuery.extend(true, oCell.attributes, oCustomCell.attributes);
                oCell.classes = jQuery.extend(true, oCell.classes, oCustomCell.classes);

                if (!oCustomCell.formatted || oCustomCell.formatted === "") {
                    oCell.val = oCustomCell.val;
                } else {
                    oCell.val = oCustomCell.formatted;
                }

                if (jQuery.type(oCustomCell.alertLevel) === "number") {
                    oCell.condition = oCustomCell.alertLevel;
                }

                if (oCustomCell.starred) {
                    oCell.starred = true;
                }

                if (oCustomCell.attributes) {
                    //special handling for attributes colspan
                    if (oCustomCell.attributes.colspan) {
                        colspan = parseInt(oCustomCell.attributes.colspan,10);
                        for (i = col + 1; i < col + colspan && i < countOfCols; i++) {
                            oTempCell = this.arrViewableCells[row][i];
                            if (oTempCell) {
                                oTempCell.styles = oTempCell.styles || {};
                                oTempCell.styles.display = "none";
                            }
                            
                        }
                    }

                    //special handling for attributes rowspan
                    if (oCustomCell.attributes.rowspan) {
                        rowspan = parseInt(oCustomCell.attributes.rowspan,10);
                        for (i = row + 1; i < row + rowspan && i < countOfRows; i++) {
                            for (j = col; j < col + colspan; j++) {
                                oTempCell = this.arrViewableCells[i][j];
                                if (oTempCell) {
                                    oTempCell.styles = oTempCell.styles || {};
                                    oTempCell.styles.display = "none";
                                }
                                
                            }
                        }
                    }
                }
                
            }
        }
    }

    //adapt cell width
    this._adaptColWidth();

    if (!hideGridIndex) {
        that = this;
        jQuery.each(highlightedCols, function(col) {
            oCell = that.arrViewableCells[0][col]; //index cell always top-most
            if (oCell.y === that.POSITION_OF_INDEXCELL) {
                oCell.highlighted = true;
            }
        });

        jQuery.each(highlightedRows, function(row) {
            oCell = that.arrViewableCells[row][0]; //index cell always left-most
            if (oCell.x === that.POSITION_OF_INDEXCELL) {
                oCell.highlighted = true;
            }
        });
    }
    
	if(this.profilingEnabled){
		this._PROFILER_.end(pid);
	}
};

/////////////////////////////////////////////////////////////////////////////////
//data provider event handlers
/////////////////////////////////////////////////////////////////////////////////
sap.fpa.ui.control.analyticgrid.Grid.prototype._onGridDataRefreshed = function(oResult) {
    var pid = this.profilingEnabled && this._PROFILER_.begin("analyticgrid.Grid._onGridDataRefreshed");
    var oParams = oResult.params;
    var bHard = oParams ? oParams.bHard : false;
	var self = this;

    this._cleanData(bHard);

    if(oParams && oParams.cellDecorator) {
        this.hashOfDecorators = oParams.cellDecorator;
    }

    if (this.oComments) { //merge comments into grid data
        this.oGridData = jQuery.extend(true, this.oComments, oResult);
        this.oComments = null;
        this._buildComments();
    } else {
        this.oGridData = oResult;
        this._buildComments(); //grid data provider might also serve as comments data provider
    }

    this._buildData();

    //if it's hard refresh, go back focus by default
    if (bHard) {
        this._focusOnCell(this.numberOfHeaderCols, this.numberOfHeaderRows, false, false, false);
    }

    this.invalidate();

	setTimeout(jQuery.proxy(function() { //make UI event asyncronized
		self.fireSelectionChanged({
			status : "end",
			focusedCell : self._memberContextOfDataCell(self.oFocusedCell.col, self.oFocusedCell.row),
			selectedRegions : self.getSelectedMemberContext()
		});
	}, this), 1);

    if(this.profilingEnabled){
		this._PROFILER_.end(pid);
	}
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onGridCustomDataRefreshed = function(oResult) {
    var pid = this.profilingEnabled && this._PROFILER_.begin("analyticgrid.Grid._onGridCustomDataRefreshed");
    var that = this;
    var oParams = null;
    var bHard = false;
    
    if (oResult && oResult.params && oResult.cells) {
        oParams = oResult.params;
        bHard = oParams ? oParams.bHard : false;
        //clean data
        this._cleanData(bHard);

        this.oCustomGridData = oResult;

        this._buildCustomData();

        that.invalidate();
    }

    //if it's hard refresh, go back focus by default
    if (bHard) {
        this._focusOnCell(0, 0, false, false, false);
    }

    if(this.profilingEnabled){
		this._PROFILER_.end(pid);
	}
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onGridDataSubmitted = function() {
    var that = this;

    //merge modified into original data
    jQuery.each(this.modifiedCells, function(idx, cell) {
        that.hashOfCellData[idx].val = cell.val;
        that.hashOfCellData[idx].formatted = cell.formatted;
        
    });

    //reset modified cells and undo/redo stack
    this.modifiedCells = {};
    this.undoStack = [];
    this.redoStack = [];
    this._redrawGrid();
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onGridDataModified = function(oResult) {
    var that = this, modifiedCells = {};

    // first merge modified into original data
    jQuery.each(this.modifiedCells, function(idx, cell) {
        that.hashOfCellData[idx].val = cell.val;
        that.hashOfCellData[idx].formatted = cell.formatted;
    });
    //reset modified cells
    this.modifiedCells = {};

    //change status of modified cells
    jQuery.each(oResult, function(idx, cell) {
        if (!cell.formatted) {
            cell.formatted = that._formatDataCell(cell.val, idx);
        }

        if (that.hashOfCellData[idx]) {
            modifiedCells[idx] = cell;
        }
    });

    jQuery.extend(true, this.modifiedCells, modifiedCells);
    this._redrawGrid();
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onCommentsDataRefreshed = function(oResult) {
    if (this.oGridData) {
        //merge comments into grid data and display
        this.oGridData = jQuery.extend(true, this.oGridData, oResult);
        this._buildComments();
        this._redrawGrid();
    } else {
        //temporary store it, comments cannot be displayed without grid data
        this.oComments = oResult;
    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onExceptionHappened = function() {

};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onProgressUpdated = function() {

};

/////////////////////////////////////////////////////////////////////////////////
//control event handlers
/////////////////////////////////////////////////////////////////////////////////
sap.fpa.ui.control.analyticgrid.Grid.prototype._onResize = function() {
    this.invalidate();
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onHScroll = function() {
    var position = this.oHScrollBar.getScrollPosition(), deltaX = position - this.positionOfHScroll, deltaY = 0;

    this._performScroll(deltaX, deltaY, this.HORIZONTAL_AXIS, null, false);
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onVScroll = function() {
    var position = this.oVScrollBar.getScrollPosition(), deltaX = 0, deltaY = position - this.positionOfVScroll;
    this._performScroll(deltaX, deltaY, this.VERTICAL_AXIS, null, false);
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onCellEvent = function(oEventData) {
    var target = oEventData.target;
    var res = this._dispatchCellEventHandlers(target, oEventData.type, oEventData);

    if (res !== null && res !== undefined) {
        return res;
    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onClickTinyBar = function(oEventData) {
    oEventData.stopImmediatePropagation();
    return false;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onClickTinyBarItem = function(oEventData) {
    oEventData.stopImmediatePropagation();

    var $target = $(oEventData.currentTarget), dimId = $target.attr("dim"), hide = !sap.fpa.ui.infra.common.Utility
        .bool($target.attr("hide"));

    this.hiddenDimensions[dimId] = hide;

    this.invalidate();
    return false;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onClickDimSelectorCell = function(oEventData) {
    oEventData.stopImmediatePropagation();

    if (!this.oGridData) {
        return;
    }

    this.oEditingCell = {};

    if (!oEventData.ctrlKey) {
        this.oSelectedRegions = {};
    }

    var oRegion = {
        x1 : this.numberOfHeaderCols,
        y1 : this.numberOfHeaderRows,
        x2 : this.numberOfHeaderCols + this.numberOfDataCols - 1,
        y2 : this.numberOfHeaderRows + this.numberOfDataRows - 1
    };

    var key = oRegion.x1 + "-" + oRegion.y1 + "-" + oRegion.x2 + "-" + oRegion.y2;
    this.oSelectedRegions[key] = oRegion;

    this.oFocusedCell = {
        col : this.numberOfHeaderCols + this.positionOfHScroll,
        row : this.numberOfHeaderRows + this.positionOfVScroll
    };

    this._redrawAffectCells();

    //	setTimeout(jQuery.proxy(function() { //make UI event asyncronized
    //		this.fireDimSelectorPressed();
    //	}, this), 1);

    return false;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onClickDimHeaderCell = function(oEventData) {
    oEventData.stopImmediatePropagation();

    var dimId = oEventData.currentTarget.attributes.dimId.value;

    setTimeout(jQuery.proxy(function() { //make UI event asyncronized	
        this.fireDimHeaderPressed({
            dimId : dimId
        });
    }, this), 1);

    return false;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._restoreDrills = function(axis, drillOperations) {
    var that = this;
    var mbrCtx;
    var isCol = (axis === this.colAxis);

    $.each(drillOperations, function(key, memberContext){
        //remove old drills
        delete drillOperations[key];
        //re-calc mbrctx
        mbrCtx = that._memberContext2MbrCtx(memberContext, axis);
        if(mbrCtx) {
            that.drillByCache(mbrCtx, isCol);
        }
    });
};


sap.fpa.ui.control.analyticgrid.Grid.prototype._mbrCtx2MemberContext = function(x, y, mbrCtx, axis) {
    var isCol = (axis === this.colAxis);
    var tupleIndex = -1;
    var tupleElements;
    //non-contextual node
    var ncTupleElements;

	if (isCol) {
        tupleIndex = x - this.numberOfHeaderCols;
    } else {
        tupleIndex = y - this.numberOfHeaderRows;
    }

    ncTupleElements = mbrCtx.split("/");

    tupleElements = axis.tuples[tupleIndex];

    var ctx = {};
    var i = 0;
    for (i = 0; i < tupleElements.length; i++) {
        var dim = axis.dimensions[i];
        var member = dim.members[tupleElements[i]];
        ctx[dim.id] = {
            idx : i,
            dimension: dim,
            member: member,
            //the last element in mbrctx is determined as non-contextual node
            context: i !== (ncTupleElements.length - 1)
        };
    }

    return ctx;
};

//to turn the member context generated from exportDrillByAxis to mbrCtx of current grid data again
sap.fpa.ui.control.analyticgrid.Grid.prototype._memberContext2MbrCtx = function(memberContext, axis, strict) {
    var isCol = (axis === this.colAxis);
    var tuple = [], tupleIndex = -1;
    var ncIdx = -1;
    var i = 0;
    var idx = 0;
    var memberContexts2TupleIndex = isCol?this.colMemberContext2TupleIndex:this.rowMemberContext2TupleIndex;
    strict = true;

    //for strict mode, we also check the number of dimensions
    if(strict) {
        var length = axis ? axis.dimensions.length : 0;
        var ctxLength = Object.keys(memberContext).length;
        if(ctxLength !== length) {
            return "";
        }

        i = 0;
        $.each(memberContext, function(dimId, ctx){
            i++;
            idx = ctx.idx;
            if(dimId !== axis.dimensions[idx].id) {
                return "";
            }
            if(ctx.context === false) {
            	//record non-contextual dim index
            	ncIdx = i;
            }
        });

    }

    var _getTupleIndex = function(axis, memberContexts2TupleIndex) {
        tupleIndex = -1;
        var dimensions = axis.dimensions;
        var currentHash = memberContexts2TupleIndex;
        for (i = 0; i < dimensions.length; i++) {
            var dim = dimensions[i];
            var member = memberContext[dim.id].member;

            //if there's dimension not existing in current layout
            if (!member) {
                break;
            }

            currentHash = currentHash[member.id];

            //if we can't find a match
            if (!currentHash) {
                break;
            }
        }
        if (currentHash) {
            if (currentHash.tupleIndex !== undefined) {
                tupleIndex = currentHash.tupleIndex;
            }
        }

        return tupleIndex;
    };


    _getTupleIndex(axis, memberContexts2TupleIndex);
    tuple = axis.tuples[tupleIndex];


    if(tuple && ncIdx !== -1) {
        return tuple.slice(0, ncIdx).join("/"); 
    }

    return "";
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.exportDrill = function() {
    var rowDrillOperations = $.extend(true, {}, this.drillOperations.row);
    var colDrillOperations = $.extend(true, {}, this.drillOperations.col);
    var aDrillOperations = [];
    var drillInfo;

    var _processDrillOperations = function(drillOperations) {
        $.each(drillOperations, function(key, memberContext){
            var member = {};
            var nodeIdx = -1;
            var contextMembers = [];
            $.each(memberContext, function(dimId, ctx){
                drillInfo = {};
                drillInfo.dimId = dimId;
                drillInfo.memberId = ctx.member.id;
                if(ctx.context === false) {
                    member = drillInfo;
                    nodeIdx = ctx.idx;
                    return;
                }
            });

            $.each(memberContext, function(dimId, ctx){
                drillInfo = {};
                drillInfo.dimId = dimId;
                drillInfo.memberId = ctx.member.id;
                if(ctx.context === true && ctx.idx < nodeIdx) {
                    contextMembers.push(drillInfo);
                }
            });

            aDrillOperations.push({
                member: member,
                contextMembers: contextMembers
            });
        });
    };

    _processDrillOperations(rowDrillOperations);
    _processDrillOperations(colDrillOperations);

    return aDrillOperations;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.drillByCache = function(mbrCtx, isCol) {
    var oSize = {};
    var stackArray = [];
    var hiddenMemberContext = {};
    var begin = 0, count = 0, i;
    var expanded = false;
    var stackInArray, oHiddenInStack;
    var x, y;
    var drillOperations = {};
    var axis;

    //calculate oSize
    if (isCol) {
        stackArray = this.hiddenDataColsStackArray;
        hiddenMemberContext = this.hiddenMemberContextCols;
        axis = this.colAxis;
        drillOperations = this.drillOperations.col || {};
        oSize = this.colMemberContext2Size[mbrCtx];
        x = this.numberOfHeaderCols + oSize.startTupleIndex; //do not use original "x" to avoid member position doesn't indicate its start position
        if (oSize.parentAfter) {
            begin = x - oSize.indirectSize;
            count = oSize.indirectSize;
        } else {
            begin = x + oSize.directSize;
            count = oSize.indirectSize;
        }
    } else {
        stackArray = this.hiddenDataRowsStackArray;
        hiddenMemberContext = this.hiddenMemberContextRows;
        axis = this.rowAxis;
        drillOperations = this.drillOperations.row || {};
        oSize = this.rowMemberContext2Size[mbrCtx];
        y = this.numberOfHeaderRows + oSize.startTupleIndex; //do not use original "y" to avoid member position doesn't indicate its start position
        if (oSize.parentAfter) {
            begin = y - oSize.indirectSize;
            count = oSize.indirectSize;
        } else {
            begin = y + oSize.directSize;
            count = oSize.indirectSize;
        }
    }

    expanded = !!!hiddenMemberContext[mbrCtx];

    if(oSize.indirectSize !== 0) { //collapse or expand
       var oHidden = {
           begin: begin,
           count: count,
           mbrCtx: mbrCtx
       };

       if(expanded) { //collapse it
           var stack = [oHidden,[]],
               insertPosition = stackArray.length;
           for(i = stackArray.length - 1; i >= 0 ; i--) {
                stackInArray = stackArray[i];
                oHiddenInStack = stackInArray[0];

               if(oHiddenInStack.begin >= oHidden.begin) {
                   insertPosition = i;
                   if(oHiddenInStack.count + oHiddenInStack.begin - oHidden.begin <= oHidden.count) {
                       stack[1].push(stackInArray); //reserved order
                       stackArray.splice(i, 1);
                   }
               }
           }
           stackArray.splice(insertPosition, 0, stack); //insert it order by begin position
           hiddenMemberContext[mbrCtx] = true;
           drillOperations[mbrCtx] = this._mbrCtx2MemberContext(x, y, mbrCtx, axis);
       } else { //expand it
           for(i = stackArray.length - 1; i >= 0 ; i--) {
                stackInArray = stackArray[i];
                oHiddenInStack = stackInArray[0];
               if(oHiddenInStack.begin === oHidden.begin && oHiddenInStack.count === oHidden.count) {
                   stackArray.splice(i, 1);
                   for(var j = 0; j < stackInArray[1].length; j++) {
                       stackArray.splice(i, 0, stackInArray[1][j]); //insert back with reserved order which makes it right order:)
                   }
                   break;
               }
           }

           delete hiddenMemberContext[mbrCtx];
           delete drillOperations[mbrCtx];
       }


       //calculate number of hiddend data row/col
       var numberOfHiddenData = 0;
       for(i = stackArray.length - 1; i >= 0 ; i--) {                
           numberOfHiddenData += stackArray[i][0].count;
       }

       if(isCol) {
           this.numberOfHiddenDataCols = numberOfHiddenData;
       } else {
           this.numberOfHiddenDataRows = numberOfHiddenData;
       }

       this.firstViewableDataRow = this._getVisiblePosition(0, false, true);
       this.firstViewableDataCol = this._getVisiblePosition(0, true, true);
       this.lastViewableDataRow = this._getVisiblePosition(this.numberOfDataRows - 1, false, true);
       this.lastViewableDataCol = this._getVisiblePosition(this.numberOfDataCols - 1, true, true);
   }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onClickDimMemberCell = function(oEventData) {
    oEventData.stopImmediatePropagation();

    var enforceBackendHierarchyOperations = this.getEnforceBackendHierarchyOperations()
    
    //now we click on span element so the actual target should be parent td
    var $target = $(oEventData.currentTarget.parentElement), mbrCtx = $target.attr("mbrCtx"), x = parseInt($target
        .attr("x"),10), y = parseInt($target.attr("y"),10), isCol = $target.hasClass("colDimMemberCell");
    var expanded = false;
    var i = 0;

    if ($target.hasClass("expanded") || $target.hasClass("expansible")) {
        expanded = $target.hasClass("expanded"); 
        
        if(enforceBackendHierarchyOperations){
        	
            var axis = null;
            var expandedMbrCtx = [];
            var tuples = mbrCtx.split("/");
            var AXIS_ORDINAL = sap.fpa.ui.control.infra.constants.Analyticgrid.AXIS_ORDINAL;
            var MEMBER_FLAG = sap.fpa.ui.control.infra.constants.Analyticgrid.MEMBER_FLAG;
            var axisOrdinal, tupleIndex;
            expanded = false;

            if (isCol) {
                axis = this.colAxis;
                axisOrdinal = AXIS_ORDINAL.COL;
                tupleIndex = x - this.numberOfHeaderCols;
            } else {
                axis = this.rowAxis;
                axisOrdinal = AXIS_ORDINAL.ROW;
                tupleIndex = y - this.numberOfHeaderRows;
            }

            for (i = 0; i < tuples.length; i++) {
                var dim = axis.dimensions[i], member = dim.members[tuples[i]], hiers = dim.hiers || [], ctx = {
                    dimId : dim.id,
                    member : {
                        id : member.id,
                        seq : member.seq,
                        hier : hiers.length === 0 ? "" : hiers[member.hier].id
                    }
                };

                //special for data provider like firefly which support drill up; drill down on expanded member means drill up
                if (i === tuples.length - 1 && (member.flags & MEMBER_FLAG.EXPANDED)) {
                    expanded = true;
                }

                expandedMbrCtx.push(ctx);
            }

            var oDrillDownData = {
                axisOrdinal : axisOrdinal,
                tupleIndex : tupleIndex,
                expanded : expanded,
                memberContext : expandedMbrCtx
            };

            setTimeout(jQuery.proxy(function() { //make UI event asyncronized
               	this.fireDrillDown(oDrillDownData);
            }, this), 1);        	
        	
        	
        	return false;
        }
        
        var oSize = {}, stackArray = [], hiddenMemberContext = {}, begin = 0, count = 0;

        if (isCol) {
            stackArray = this.hiddenDataColsStackArray;
            hiddenMemberContext = this.hiddenMemberContextCols;
            oSize = this.colMemberContext2Size[mbrCtx];
            x = this.numberOfHeaderCols + oSize.startTupleIndex; //do not use original "x" to avoid member position doesn't indicate its start position
            if (oSize.parentAfter) {
                begin = x - oSize.indirectSize;
                count = oSize.indirectSize;
            } else {
                begin = x + oSize.directSize;
                count = oSize.indirectSize;
            }
        } else {
            stackArray = this.hiddenDataRowsStackArray;
            hiddenMemberContext = this.hiddenMemberContextRows;
            oSize = this.rowMemberContext2Size[mbrCtx];
            y = this.numberOfHeaderRows + oSize.startTupleIndex; //do not use original "y" to avoid member position doesn't indicate its start position
            if (oSize.parentAfter) {
                begin = y - oSize.indirectSize;
                count = oSize.indirectSize;
            } else {
                begin = y + oSize.directSize;
                count = oSize.indirectSize;
            }
        }

        if(oSize.indirectSize !== 0) { //collapse or expand
            this.drillByCache(mbrCtx, isCol);
            this.invalidate();
        } else { //drill down
            var axis = null;
            var expandedMbrCtx = [];
            var tuples = mbrCtx.split("/");
            var AXIS_ORDINAL = sap.fpa.ui.control.infra.constants.Analyticgrid.AXIS_ORDINAL;
            var MEMBER_FLAG = sap.fpa.ui.control.infra.constants.Analyticgrid.MEMBER_FLAG;
            var axisOrdinal, tupleIndex;
            expanded = false;

            if (isCol) {
                axis = this.colAxis;
                axisOrdinal = AXIS_ORDINAL.COL;
                tupleIndex = x - this.numberOfHeaderCols;
            } else {
                axis = this.rowAxis;
                axisOrdinal = AXIS_ORDINAL.ROW;
                tupleIndex = y - this.numberOfHeaderRows;
            }

            for (i = 0; i < tuples.length; i++) {
                var dim = axis.dimensions[i], member = dim.members[tuples[i]], hiers = dim.hiers || [], ctx = {
                    dimId : dim.id,
                    member : {
                        id : member.id,
                        seq : member.seq,
                        hier : hiers.length === 0 ? "" : hiers[member.hier].id
                    }
                };

                //special for data provider like firefly which support drill up; drill down on expanded member means drill up
                if (i === tuples.length - 1 && (member.flags & MEMBER_FLAG.EXPANDED)) {
                    expanded = true;
                }

                expandedMbrCtx.push(ctx);
            }

            var oDrillDownData = {
                axisOrdinal : axisOrdinal,
                tupleIndex : tupleIndex,
                expanded : expanded,
                memberContext : expandedMbrCtx
            };

            setTimeout(jQuery.proxy(function() { //make UI event asyncronized
                this.fireDrillDown(oDrillDownData);
            }, this), 1);
        }
    }

//     var oSelectionRegion = {
//        x1: x, y1: y, 
//        x2: x, y2: y
//     };
//     var key = oSelectionRegion.x1 + "-" + oSelectionRegion.y1 + "-" + oSelectionRegion.x2 + "-" + oSelectionRegion.y2;
//     this.oSelectedRegions = {};//clear the selection cells.
//     this.oSelectedRegions[key] = oSelectionRegion;

    // this._redrawAffectCells();
    return false;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onClickDataCell = function(oEventData) {
    //don't stop immediate propagation and let _onClickAnyCell continue handling
    //oEventData.stopImmediatePropagation()

    var $target = $(oEventData.currentTarget), col = parseInt($target.attr("x"),10), row = parseInt($target.attr("y"),10), idx = parseInt($target
        .attr("idx"),10);

    var memberContext = this._memberContextOfDataCell(col, row), hasComments = false, dataHistory = {
        originalValue : this.hashOfCellData[idx].val,
        currentValue : this.modifiedCells[idx] ? this.modifiedCells[idx].val : this.hashOfCellData[idx].val
    };

    if ($target.hasClass("commentsfilled")) {
        hasComments = true;
    }

    setTimeout(jQuery.proxy(function() { //make UI event asyncronized
        this.fireDataCellPressed({
            memberContext : memberContext,
            hasComments : hasComments,
            dataHistory : dataHistory
        });
    }, this), 1);

//     if(this.isOnDevice) {
//        var oCurrentTarget = oEventData.currentTarget;
//        this._showPopoverMenuOnDevice(oCurrentTarget);
//     }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onClickColHeaderTooltip = function(oEventData) {
	this.fireShowColHeaderTooltip({
		tooltipObj : $(oEventData.target)
	});
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._showPopoverMenuOnDevice = function() {
//    var oItem = null,
//        that = this,
//        $target = $(oCell),
//        editable = sap.fpa.ui.infra.common.Utility.bool($target.attr("editable"));
//
//    var flexBox = new sap.m.FlexBox({
//        //fitContainer : true
//    });
//
//    var popoverMenu = new sap.m.Popover({
//    placement : sap.m.PlacementType.Top,
//        showHeader : false,
//        enableScrolling : false,
//    beforeOpen: function(){
//
//    },
//    afterClose: function(){
//        popoverMenu.destroy();
//    }
//    });
//
//    oItem = new sap.m.Button({
//    text : "Copy",
//    press : function(){
//        popoverMenu.close();
//        that._onCopy();
//    }
//    });
//    flexBox.addItem(oItem);
//
//    if(editable) {
//     oItem = new sap.m.Button({
//        text : "Cut",
//        press : function(){
//            popoverMenu.close();
//            that._onCut();
//        }
//    });
//    flexBox.addItem(oItem);
//    }
//
//    oItem = new sap.m.Button({
//    text : "Paste",
//    press : function(){
//        popoverMenu.close();
//        that._onPasteEnd();
//    }
//    });
//    flexBox.addItem(oItem);
//
//    if(editable) {
//    oItem = new sap.m.Button({
//        text : "Editor",
//        press : function(){
//            popoverMenu.close();
//        }
//    });
//    flexBox.addItem(oItem);
//    }
//
//    popoverMenu.addContent(flexBox);
//
//    if (flexBox.getItems().length > 0) {
//        popoverMenu.openBy(oCell);
//    }

};

//sap.fpa.ui.control.analyticgrid.Grid.prototype._onClickAnyCell = function(oEventData) {
//// oEventData.stopImmediatePropagation();
//return;		
//};

sap.fpa.ui.control.analyticgrid.Grid.prototype._focusOnCell = function(col, row, ctrlKey, shiftKey, tabKey) {

	//click cell mode
	var oFormula = this.getFormulaBar();
    if (oFormula && oFormula.getCellClickMode()) {
        var sCell = String(this._numberToZZ(col))+ (row + 1);
        oFormula.setCellFormula(sCell);
        //oFormula.getFormulaBar().focus();
        //oFormula.getFormulaBar().setCursor(oFormula.getFormula().length);

        // var $cell = $("#" + this.getId() + " td[x='" + col + "'][y='" + row + "']");
        // $cell.css("border-style", "dotted");
        return;
    }

    var originalFocusedCell = jQuery.extend(true, {}, this.oFocusedCell), lastSelectionKey = null, localMembers = this
        .getLocalMembers(), isApplicableForMemberExpression = false;
    var oGrid = this;

    this.oEditingCell = {};
    var oRegion = null,
        key = "";
    var row1 = null,
        row2 = null,
        col1 = null,
        col2 = null;
    localMembers = localMembers || {
        row : [],
        col : []
    };

    this._setSelectionBoxDefaultOption();

    var _setSelectedRegion = function(key, oRegion) {
        if (oGrid.oSelectedRegions && oGrid.oSelectedRegions[key]) {
            delete oGrid.oSelectedRegions[key];
        }

        oGrid.oSelectedRegions[key] = oRegion;
    };

    //not tiny bar and dimension selector
    if (col !== this.POSITION_OF_TINYBAR && row !== this.POSITION_OF_TINYBAR) {
        //special handling for click index cell on the left
        if (col === this.POSITION_OF_INDEXCELL && row === this.POSITION_OF_INDEXCELL) {
            if (!ctrlKey) {
                this.oSelectedRegions = {};
            }

            oRegion = {
                x1 : 0,
                y1 : 0,
                x2 : this.POSITION_OF_ALL,
                y2 : this.POSITION_OF_ALL
            };

            key = oRegion.x1 + "-" + oRegion.y1 + "-" + oRegion.x2 + "-" + oRegion.y2;
            lastSelectionKey = key;
            _setSelectedRegion(key, oRegion);

            if (!shiftKey) {
                this.oFocusedCell = {
                    col : this.positionOfHScroll,
                    row : this.positionOfVScroll
                };
            }
        } else if (col === this.POSITION_OF_INDEXCELL) {
            if (!ctrlKey) {
                this.oSelectedRegions = {};
            }

            row1 = row;
            row2 = row;

            if (shiftKey) {
                if (originalFocusedCell.row < row) {
                    row1 = originalFocusedCell.row;
                } else {
                    row2 = originalFocusedCell.row;
                }
            }

            oRegion = {
                x1 : 0,
                y1 : row1,
                x2 : this.POSITION_OF_ALL,
                y2 : row2
            };

            key = oRegion.x1 + "-" + oRegion.y1 + "-" + oRegion.x2 + "-" + oRegion.y2;
            lastSelectionKey = key;
            _setSelectedRegion(key, oRegion);

            if (!shiftKey) {
                this.oFocusedCell = {
                    col : this.positionOfHScroll,
                    row : row
                };
            }
            //index cell on the top
        } else if (row === this.POSITION_OF_INDEXCELL) {
            if (!ctrlKey) {
                this.oSelectedRegions = {};
            }

            col1 = col;
            col2 = col;

            if (shiftKey) {
                if (originalFocusedCell.col < col) {
                    col1 = originalFocusedCell.col;
                } else {
                    col2 = originalFocusedCell.col;
                }
            }

            oRegion = {
                x1 : col1,
                y1 : 0,
                x2 : col2,
                y2 : this.POSITION_OF_ALL
            };

            key = oRegion.x1 + "-" + oRegion.y1 + "-" + oRegion.x2 + "-" + oRegion.y2;
            lastSelectionKey = key;
            _setSelectedRegion(key, oRegion);

            if (!shiftKey) {
                this.oFocusedCell = {
                    col : col,
                    row : this.positionOfVScroll
                };
            }
        } else {
            if (!ctrlKey) {
                this.oSelectedRegions = {};
            }

            row1 = row;
            row2 = row;
            col1 = col;
            col2 = col;

            if (shiftKey && !tabKey) {
                if (originalFocusedCell.row < row) {
                    row1 = originalFocusedCell.row;
                } else {
                    row2 = originalFocusedCell.row;
                }

                if (originalFocusedCell.col < col) {
                    col1 = originalFocusedCell.col;
                } else {
                    col2 = originalFocusedCell.col;
                }
            }

            oRegion = {
                x1 : col1,
                y1 : row1,
                x2 : col2,
                y2 : row2
            };

            key = oRegion.x1 + "-" + oRegion.y1 + "-" + oRegion.x2 + "-" + oRegion.y2;
            lastSelectionKey = key;
            _setSelectedRegion(key, oRegion);

            if (!shiftKey || tabKey) {
                this.oFocusedCell = {
                    col : col,
                    row : row
                };
            }
            this._updateFormulaDisplay(col, row, this._isDataCell(col, row) ? 0 : 1);
            isApplicableForMemberExpression = (this._getApplicableMemberExpression(this.oFocusedCell) !== null && this._getApplicableMemberExpression(this.oFocusedCell) !== undefined);
        }
    }

    var oSelectedRegions = this.getSelectedMemberContext();

    var iCol = this.oFocusedCell.col, iRow = this.oFocusedCell.row;
    var oFocusedCellContext = {};
    if (iCol >= this.numberOfHeaderCols && iRow >= this.numberOfHeaderRows) {
        //skip the member cells
        oFocusedCellContext = this._memberContextOfDataCell(iCol, iRow);
    }
    setTimeout(jQuery.proxy(function() { //make UI event asyncronized
        this.fireSelectionChanged({
            status : "start",
            focusedCell : oFocusedCellContext,
            selectedRegions : oSelectedRegions,
            applicatbleForMemberExpression : isApplicableForMemberExpression,
			typeOfMemberExpression: this._getApplicableMemberExpression(this.oFocusedCell)
        });
    }, this), 1);

    this._redrawAffectCells();

    return lastSelectionKey;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._getAdaptedRightBottomCell = function() {
    var rightBottomCol = this.numberOfViewableCols - 1, rightBottomRow = this.numberOfViewableRows - 2, rightX = rightBottomCol +
        this.positionOfHScroll - 1, bottomY = rightBottomRow + this.positionOfVScroll - 2;

    return {
        x : rightX,
        y : bottomY,
        col : rightBottomCol,
        row : rightBottomRow
    };
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._inGridRange = function(col, row) {
    var rightBottomCell = this._getAdaptedRightBottomCell();
    var id = this.getId(), leftTopCell = null;
    if (this.numberOfHeaderRows === 0 && this.numberOfHeaderCols === 0) {
        //leftTopCell = $('#' + id + ' td[x="' + this.POSITION_OF_INDEXCELL + '"][y="' + this.POSITION_OF_INDEXCELL + '"]').parent().siblings("tr").eq(0).find("td").eq(1);
        leftTopCell = $("#" + id + " .sapEpmUiControlAnalyticgridGridTableInner td.dummyCell:first");
    } else {
        leftTopCell = $("#" + id + " td[row='" + (this.numberOfHeaderRows + 1) + "'][col='" +
            (this.numberOfHeaderCols + 1) + "']");
    }

    var left = parseInt(leftTopCell.attr("x"),10) || 0, top = parseInt(leftTopCell.attr("y"),10) || 0, right = rightBottomCell.x, bottom = rightBottomCell.y;

    return col > left && col <= right && row > top && row <= bottom;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._moveToCell = function(col, row, moveToCenter) {
    var id = this.getId(), leftTopCell = null;
    //For SUMMARY, there is no first data cell
    if (this.numberOfHeaderRows === 0 && this.numberOfHeaderCols === 0) {
        //leftTopCell = $('#' + id + ' td[x="' + this.POSITION_OF_INDEXCELL + '"][y="' + this.POSITION_OF_INDEXCELL + '"]').parent().siblings("tr").eq(0).find("td").eq(1);
        leftTopCell = $("#" + id + " .sapEpmUiControlAnalyticgridGridTableInner td.dummyCell:first");
    } else {
        leftTopCell = $("#" + id + " td[row='" + (this.numberOfHeaderRows + 1) + "'][col='" +
            (this.numberOfHeaderCols + 1) + "']");
    }

    var left = parseInt(leftTopCell.attr("x"),10) || 0, top = parseInt(leftTopCell.attr("y"),10) || 0, rightBottomCell = this._getAdaptedRightBottomCell(), right = rightBottomCell.x, bottom = rightBottomCell.y, deltaX = 0, deltaY = 0, direction = 0;

    var tempMovetoCenter = moveToCenter || false;
    //TODO: maybe need to do some change after release the dummy cells for navigation
    if (tempMovetoCenter) {
        var iCenterCol = 0, iCenterRow = 0, iLeftTopX = 0, iLeftTopY = 0, iRightDownX = 0, iRightDownY = 0;
        var showedGrid = $("#" + id + " td.dataCell[tabindex = 1]");//datacell Grid

        iLeftTopX = parseInt($(showedGrid[0]).attr("x"),10);
        iLeftTopY = parseInt($(showedGrid[0]).attr("y"),10);
        iRightDownX = parseInt($(showedGrid.last()).attr("x"),10); // the right bottom conner.
        iRightDownY = parseInt($(showedGrid.last()).attr("y"),10);

        //           iLeftTopx = parseInt($(".dataCell.topDataCell.leftDataCell").attr("x"));
        //           iLeftTopY = parseInt($(".dataCell.topDataCell.leftDataCell").attr("y"));
        //           iRightDownX = parseInt($(showedGrid.last()).attr("x")); // the right bottom conner.
        //           iRightDownY = parseInt($(showedGrid.last()).attr("y"));

        if (col >= iLeftTopX && col <= iRightDownX && row >= iLeftTopY && row <= iRightDownY) {// this grid is in the screen, no needs to scrolls.
            deltaX = 0;
            deltaY = 0;
        } else {
            iCenterCol = parseInt((iLeftTopX + iRightDownX) / 2, 10);
            iCenterRow = parseInt((iLeftTopY + iRightDownY) / 2, 10);
            deltaX = col - iCenterCol;
            direction = direction || this.HORIZONTAL_AXIS;
            deltaY = row - iCenterRow;
            direction = direction || this.VERTICAL_AXIS;
        }
    } else {
        if (col < left) {
            deltaX = col - left;
            direction = direction || this.HORIZONTAL_AXIS;
        }
        if (col > right) {
            deltaX = col - right;
            direction = direction || this.HORIZONTAL_AXIS;
        }
        if (row < top) {
            deltaY = row - top;
            direction = direction || this.VERTICAL_AXIS;
        }
        if (row > bottom) {
            deltaY = row - bottom;
            direction = direction || this.VERTICAL_AXIS;
        }
    }

    if (deltaX !== 0 || deltaY !== 0) {
        this._performScroll(deltaX, deltaY, direction, null, true);
    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onTapAnyCell = function(oEventData) {
    oEventData.stopImmediatePropagation();

    this._onClickAnyCell(oEventData);

    //behavior of single click/tap is different for desktop and mobile; therefore, it is suggested
    //to reset editing cell to currently tapped cell rather than prevent clearing editing cell in _onClickAnyCell
    this.oEditingCell = {
        col : this.oFocusedCell.col,
        row : this.oFocusedCell.row
    };

    return false;
};

//sap.fpa.ui.control.analyticgrid.Grid.prototype._onContextMenu = function(oEventData) {
//    return false;
//};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onMouseUpDataCell = function(oEventData) {
    if (oEventData.which !== 3) {
        //this is not right mouse button
        return;
    }

    var cell = oEventData.currentTarget;
    var $target = $(cell);
    var col = parseInt($target.attr("x"),10);
    var row = parseInt($target.attr("y"),10);
    var contextMenu = this.getContextMenu();

    if (contextMenu && contextMenu.openBy && typeof (contextMenu.openBy) === "function") {
//         oEventData.preventDefault();
//         oEventData.stopPropagation();
//
//         if(contextMenu.beforePopup && typeof(contextMenu.beforePopup) === "function") {
//            contextMenu.beforePopup(memberContext, dataHistory);
//         }
//
//         var fn = null;
//         function _afterContextMenuClose() {
//            if(contextMenu.afterPopup && typeof(contextMenu.afterPopup) === "function") {
//                contextMenu.afterPopup(memberContext, dataHistory);
//            }
//
//            contextMenu.detachAfterClose(fn);
//         }
//
//         fn = jQuery.proxy(_afterContextMenuClose, this);
//
//         contextMenu.attachAfterClose(fn);
//         contextMenu.openBy(cell);
    } else {
        this._focusOnCell(col, row, false, false, false);
    }
};
//
//sap.fpa.ui.control.analyticgrid.Grid.prototype._onMouseDownDataCell = function(oEventData) {	
//    if(oEventData.which !== 1) {
//        //this is not left mouse button
//        return;
//    }
//
//    this.isMouseDown = true;
//
//    var $target = $(oEventData.currentTarget),
//        col = parseInt($target.attr("x")),
//        row = parseInt($target.attr("y"));
//
//    if(col === this.oEditingCell.col && row === this.oEditingCell.row) {
//        //if selectstart in an editing cell, do default
//        return;
//    }
//
//    this.selectionStartCell = {
//        col: col,
//        row: row
//    };
//
//    this.lastSelectionKey = this._focusOnCell(col, row, oEventData.ctrlKey, oEventData.shiftKey, false);
//
//    this._updateFormulaDisplay(col, row, 0);
//
//    return false;
//};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onMouseDownAnyCell = function(oEventData) {
    if (oEventData.which !== 1) {
        //this is not left mouse button
        return;
    }

    this.isMouseDown = true;

    var $target = $(oEventData.currentTarget), col = parseInt($target.attr("x"),10), row = parseInt($target.attr("y"),10);

    if (col === this.oEditingCell.col && row === this.oEditingCell.row) {
        //if selectstart in an editing cell, do default
        return;
    }

    this.selectionStartCell = {
        col : col,
        row : row
    };

    this.lastSelectionKey = this._focusOnCell(col, row, oEventData.ctrlKey||oEventData.metaKey, oEventData.shiftKey, false);

    return false;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onMouseDownDragger = function(oEventData) {
    if (oEventData.which !== 1) {
        //this is not left mouse button
        return;
    }

    var $target = $(oEventData.currentTarget);

    //on dragger should help grid gain focus
    $target.focus();

    var lastSelectedRegion = this.oSelectedRegions[this.lastSelectionKey];
    if (lastSelectedRegion) {
        this.draggerOrigin = {
            clientX : oEventData.clientX,
            clientY : oEventData.clientY,
            x1 : lastSelectedRegion.x1,
            y1 : lastSelectedRegion.y1,
            x2 : lastSelectedRegion.x2,
            y2 : lastSelectedRegion.y2
        };
    }

    return false;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onMouseDownResizeCol = function(oEventData) {
    //if enter resize event, record current target and bind events
    this.cell2Resize = $(oEventData.currentTarget).parent().parent();
    var cellWidth = this.cell2Resize.outerWidth();
    var cellInnerWidth = this.cell2Resize.width();
    var cellPos = this.cell2Resize.position();
    this.resizeOrigin = {
        clientX : oEventData.clientX,
        width : cellWidth,
        innerWidth : cellInnerWidth,
        x : this.cell2Resize.attr("x")
    };
    var $window = $(window), id = this.getId(), $ruler = $("#" + id + " .sapEpmUiControlAnalyticgridGridTableInner")
        .siblings(".resizeRuler");
    $ruler.css({
        "display" : "block",
        "width" : "0",
        "height" : "100%",
        "left" : cellPos.left + cellWidth,
        "border-left" : "1px dashed"
    });
    $window.on("mousemove.resizeCol", jQuery.proxy(this._onMouseMoveResizeCol, this));
    $window.on("mouseup.resizeCol", jQuery.proxy(this._onMouseUpResizeCol, this));
    return false;
};

//sap.fpa.ui.control.analyticgrid.Grid.prototype._onMouseLeaveResizeCol = function(oEventData) {
//	//resize stops when mouse up, unbind all events under namespace .resizeCol
//	this.cell2Resize = null;
//	var $this = this.$();
//	$this.off(".resizeCol");
//	
//	var offsetX = oEventData.clientX - this.resizeOrigin.clientX;
//	var updatedWidth = this.resizeOrigin.width + offsetX;
//	this.oColWidth[this.resizeOrigin.x] = updatedWidth;
//	
//	this.invalidate();
//
//	return false; //stop selecting whole column
//};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onMouseUpResizeCol = function(oEventData) {
    //resize stops when mouse up, unbind all events under namespace .resizeCol
    this.cell2Resize = null;
    var $window = $(window);
    $window.off(".resizeCol");

    var offsetX = oEventData.clientX - this.resizeOrigin.clientX;
    var updatedWidth = this.resizeOrigin.innerWidth + offsetX + 1;
    if (updatedWidth <= this.CELL_MIN_WIDTH) {
        updatedWidth = this.CELL_MIN_WIDTH;
    }

    this.oColWidth[this.resizeOrigin.x] = updatedWidth;

    this.invalidate();
    return false; //stop selecting whole column
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onMouseMoveResizeCol = function(oEventData) {
    //if current resize target is not available, immediately return
    if (!this.cell2Resize || !this.resizeOrigin) {
        return;
    }

    var cellWidth = this.cell2Resize.outerWidth();
    var cellPos = this.cell2Resize.position();
    var offsetX = oEventData.clientX - this.resizeOrigin.clientX;
    var updatedWidth = this.resizeOrigin.width + offsetX;
    if (updatedWidth <= this.CELL_MIN_WIDTH || offsetX === 0) {
        return;
    }

    var id = this.getId();
    var $ruler = $("#" + id + " .sapEpmUiControlAnalyticgridGridTableInner")
        .siblings(".resizeRuler");

    $ruler.css({
        "left" : cellPos.left + cellWidth + offsetX
    });
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onMouseDownResizeRow = function(oEventData) {
    //if enter resize event, record current target and bind events
    this.cell2Resize = $(oEventData.currentTarget).parent().parent();
    var cellHeight = this.cell2Resize.outerHeight();
    var cellInnerHeight = this.cell2Resize.height();
    var cellPos = this.cell2Resize.position();
    this.resizeOrigin = {
        clientY : oEventData.clientY,
        height : cellHeight,
        innerHeight : cellInnerHeight,
        y : this.cell2Resize.attr("y")
    };
    var $window = $(window), id = this.getId(), $ruler = $("#" + id + " .sapEpmUiControlAnalyticgridGridTableInner")
        .siblings(".resizeRuler");
    $ruler.css({
        "display" : "block",
        "width" : "100%",
        "height" : "0",
        "top" : cellPos.top + cellHeight,
        "border-top" : "1px dashed"
    });
    $window.on("mousemove.resizeRow", jQuery.proxy(this._onMouseMoveResizeRow, this));
    $window.on("mouseup.resizeRow", jQuery.proxy(this._onMouseUpResizeRow, this));
    return false;
};

//sap.fpa.ui.control.analyticgrid.Grid.prototype._onMouseLeaveResizeRow = function(oEventData) {
//	//resize stops when mouse up, unbind all events under namespace .resizeCol
//	this.cell2Resize = null;
//	var $this = this.$();
//	$this.off(".resizeRow");
//	
//    var offsetY = oEventData.clientY - this.resizeOrigin.clientY;
//	var updatedHeight = this.resizeOrigin.height + offsetY;
//	this.oRowHeight[this.resizeOrigin.y] = updatedHeight;
//
//	this.invalidate();
//    return false; //stop selecting whole column
//};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onMouseUpResizeRow = function(oEventData) {
    //resize stops when mouse up, unbind all events under namespace .resizeCol
    this.cell2Resize = null;
    var $window = $(window);
    $window.off(".resizeRow");

    var offsetY = oEventData.clientY - this.resizeOrigin.clientY;
    var updatedHeight = this.resizeOrigin.innerHeight + offsetY;
    if (updatedHeight <= this.CELL_MIN_HEIGHT) {
        updatedHeight = this.CELL_MIN_HEIGHT;
    }

    this.oRowHeight[this.resizeOrigin.y] = updatedHeight;
    this.invalidate();
    return false; //stop selecting whole column
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onMouseMoveResizeRow = function(oEventData) {
    //if current resize target is not available, immediately return
    if (!this.cell2Resize || !this.resizeOrigin) {
        return;
    }

    var cellPos = this.cell2Resize.position();
    var cellHeight = this.cell2Resize.outerHeight();
    var offsetY = oEventData.clientY - this.resizeOrigin.clientY;
    var updatedHeight = this.resizeOrigin.innerHeight + offsetY;
    if (updatedHeight <= this.CELL_MIN_HEIGHT || offsetY === 0) {
        return;
    }

    var id = this.getId(), $ruler = $("#" + id + " .sapEpmUiControlAnalyticgridGridTableInner")
        .siblings(".resizeRuler");

    $ruler.css({
        "top" : cellPos.top + cellHeight
    });
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onMouseOverAnyCell = function(oEventData) {
    if (this.draggerOrigin) {
        this._handleDraggerMoving(oEventData.currentTarget, oEventData);
    } else {
        this._handleMouseOverAnyCell(oEventData.currentTarget);
    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onSelectStartAnyCell = function(oEventData) {
    var $target = $(oEventData.currentTarget), col = parseInt($target.attr("x"),10), row = parseInt($target.attr("y"),10);

    if (col !== this.oEditingCell.col || row !== this.oEditingCell.row) {
        //if selectstart not in an editing cell, prevent it
        return false;
    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onDoubleClickDataCell = function(oEventData) {
    var $target = $(oEventData.currentTarget);

    this._editCell($target);
    return false;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onDoubleClickResizableCell = function() {
    var maxWidth = 0;
    var numberOfTotalRows = this.lastViewableDataRow + 1;
    //find length of text
    var c = document.createElement("canvas");
    var ctx = c.getContext("2d");
    var row = 0;
    var cell;
    var CELL_TYPE = sap.fpa.ui.control.analyticgrid.Grid._CELL_TYPE;
    var MEMBER_FLAG = sap.fpa.ui.control.infra.constants.Analyticgrid.MEMBER_FLAG;
    var col = parseInt(this.resizeOrigin.x, 10);



    // for data rows
    // find max text length
    for(row = 0; row < numberOfTotalRows; row++) {
        //this should return you all the cell objects of different types
        cell = this.getCellObject(col, row);

        //only calculate when there's formatted value in a cell
        if(cell.formatted) {
            ctx.font = this._calcFont(cell);
            if (cell) {
                var length = ctx.measureText(cell.formatted).width + this.CELL_PADDING;
                //increase indentation for levels
                if(cell.type === CELL_TYPE.ROW_DIMENSION_MEMBER) {
                    length = length + 20*cell.level;
                    //add icon size if not leaf
                    if(cell.flags === MEMBER_FLAG.EXPANSIBLE
                        || cell.flags === MEMBER_FLAG.EXPANDED) {
                        length += 16;
                    }
                }

                if (length > maxWidth) {
                    maxWidth = length;
                }
            }
        }
    }

    if (maxWidth > 0) {
        this.oColWidth[this.resizeOrigin.x] = maxWidth;
    }

};

sap.fpa.ui.control.analyticgrid.Grid.prototype._editCell = function($target) {
	var inputControl = this.getInputControl();

    if (!sap.fpa.ui.infra.common.Utility.bool($target.attr("editable"))) {
        return;
    }

    //for starred input control
    if(inputControl) {
        var $starred = $target.find("span.starred");
        if ($starred.length === 0) {
            return;
        }
    }

    var col = parseInt($target.attr("x"),10), row = parseInt($target.attr("y"),10);

    this.oSelectedRegions = {};
    var oRegion = {
        x1 : col,
        y1 : row,
        x2 : col,
        y2 : row
    };
    var key = oRegion.x1 + "-" + oRegion.y1 + "-" + oRegion.x2 + "-" + oRegion.y2;
    this.oSelectedRegions[key] = oRegion;

    this.oFocusedCell = {
        col : col,
        row : row
    };

    this.oEditingCell = {
        col : col,
        row : row
    };

    this._redrawAffectCells();
    this._beginDataCellModification($target);
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._beginDataCellModification = function($target) {
    var x = parseInt($target.attr("x"),10);
    var y = parseInt($target.attr("y"),10);
    var cellWidth = $target.css("width");
    var cellHeight = $target.css("height");
    var editValue, str;
  
    this.editingCellOrignalValue = this._getGridCellCurrVal(x, y);
    editValue = this.editingCellOrignalValue.editValue;

    if(editValue === undefined || editValue === null) {
        editValue = this.editingCellOrignalValue.val;
        this.editingCellOrignalValue.editValue = editValue;
    }

    $target.html("<div contenteditable='true' style='color:rgb(51, 145, 213); outline:none;position:relative;width:" + cellWidth + ";height:" +
        cellHeight + ";line-height:" + cellHeight + "'>" + editValue + "</div>");

    var $input = $target.children().first(), that = this;

    that.inEditMode = true;

    //update the selectedbox style 
    this._drawSelectionBox();

    $input.focus();
    if(editValue !== undefined || editValue !== null) {
        str = editValue.toString();
        $input.select();
    }
    if (window.getSelection) {
        var sel = window.getSelection();
        if(sel.modify){
            sel.modify("move", "backward", "line");
            sel.modify("extend", "forward", "line");
        }
    }
    $input.keydown(function(e) {
        if (e.which === 13) { //enter
            that.leaveEditingCellStateUnchanged = true;
            $input.blur();
        } else if (e.which === 9) { //tab
            $input.blur();
        }
    });

    $input.keyup(function() {
        var value = $(this).text();
        var formulaBar = that.getFormulaBar();
        // if(formulaBar && value && value !== formulaBar.getText()){
        //     formulaBar.setText(value);
        // }
        if (formulaBar) {
            if (value.indexOf("=") === 0) {
                formulaBar.setMode2Formula();
                formulaBar.setFormula(value);
            } else {
                formulaBar.setFormula("");
            }
        }        
    });

    if (!this._isDataCell(x, y)) {
        
        var oEventData = {
            x: x,
            y: y,
            element: $target
        };
        var oPoolDimension = this.getPoolMapping() ? this.getPoolMapping().getPoolDimensionForCell(x, y, this.rowAxis.dimensions) : undefined;
        if (oPoolDimension){
            oEventData.poolDimension = oPoolDimension;
        }
        
		$input.on("input", function(){
			setTimeout(jQuery.proxy(function() { //make UI event asyncronized
	            that.fireGridEditChange(oEventData);
	        }, that), 1);
		});

	    setTimeout(jQuery.proxy(function() { //make UI event asyncronized
	        that.fireGridEditStart(oEventData);
	    }, that), 1);
	}
    $input.blur(function(e) {
        //check if a function has been provided as a call back to be executed before the blur hasdler
        if (jQuery.type(that.getOnBeforeBlur()) === "function"){
            //if the allocation feature is active excute the provided function pool mapping context
            if (that.getPoolMapping() && sap.fpa.ui.infra.common.FeatureToggle.isAllocationActive()){
                that.getOnBeforeBlur().apply(that.getPoolMapping(), [e, $input.parent(), that ]);
            }
        }
        
        $input.off("input");
        if (window.getSelection) {
            var sel = window.getSelection();
            if(sel.empty){
                sel.empty();
            }
        }
        that._endDataCellModification.call(that, $target, cellWidth, cellHeight);
    });
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._endDataCellModification = function($target, cellWidth, cellHeight) {
    var $input = $target.children().first(), 
		newValue = $input.text(), 
		formattedVal = "", 
		col = parseInt($target.attr("x"),10), 
		row = parseInt($target.attr("y"),10), 
		changed = false, 
		that = this;
    var undoItem = [];
	var result = {};
    var editValue;
    var oCell;
    //for dummy cells data change
    if ($target.hasClass("dummyCell")) {
		oCell = this._initCustomCell(col, row); 
		var cellKey = this._buildCellKey(col, row);
		result = {};

		if (oCell && oCell["cell-reference"]) {
			result = this._validateDataCell(newValue, this.editingCellOrignalValue.val);
		} else {
			result = {
				value: {
					val: $target.text(),
					formatted: $target.text(),
					editValue: $target.text()
				},
				valid : true
			};
		}

        editValue = result.value.editValue;
        if(editValue === undefined || editValue === null) {
            editValue = result.value.val;
            result.value.editValue = editValue;
        }



        if (!result.valid || (result.valid && result.value.editValue.toString() === this.editingCellOrignalValue.editValue.toString())) {//simply rollback if the value is not changed because of the formatter maybe caused the inconsistent display
            newValue = this.editingCellOrignalValue.val; //simply rollback
            formattedVal = this.editingCellOrignalValue.formatted;
        } else {
            formattedVal = result.value.formatted;
        }

        // the part of the condition where the val properties are compared is needed for spreading where the val property is reset directly; so, please keep this condition
        if (result.valid && (result.value.editValue.toString() !== this.editingCellOrignalValue.editValue.toString() || result.value.val.toString() !== this.editingCellOrignalValue.val.toString())) {
            var undoCell = jQuery.extend(true, {}, this._initCustomCell(col, row));

            //check if there is a formula on this cell, if so, remove the formula
			if (that.hashOfFormulas && that.hashOfFormulas[cellKey]) {
				var fCell = {x: col, y:row};
				that._removeFormulaOnCell(fCell);
			}

            //check if this is a formula
            if ($.trim(result.value.editValue).indexOf("=") === 0) {
            	result = this._addFormulaToCell(oCell, result.value.editValue);
            	if (result.valid) {
            		formattedVal = result.value.formatted;
            	}            	
            }

            this._changeCustomCellValue(col, row, {
                val : result.value.val,
                editValue : result.value.editValue,
                formatted : result.value.formatted
            });
            
            //update undoStack
            undoItem = [];
            undoCell.val = this.editingCellOrignalValue.val;
            undoCell.formatted = this.editingCellOrignalValue.formatted;
            undoItem[0] = undoCell;
            this.redoStack = [];
            this.undoStack.push(undoItem);
        }

        if (this.leaveEditingCellStateUnchanged) {
            this.leaveEditingCellStateUnchanged = false;
        } else {
            this.oEditingCell = {};
        }

        this.editingCellOrignalValue = null;

        //qianze.zhang
        //workaround for ellipsis
        $input.remove();
        $target.html(jQuery.sap.encodeHTML(String(formattedVal)));
        this.starredHtml(col, row, undefined, $target);
        setTimeout(function(){
            formattedVal = $target.html();
            $target.html("");
            setTimeout(function(){
                $target.html(jQuery.sap.encodeHTML(String(formattedVal)));
            }, 0);
        }, 0);
    } else if($target.hasClass("dimMember")){
        //for member editing
        oCell = this._getInternalCellObject(col, row);
        result = {
            value: {
                val: $target.text(),
                formatted: $target.text()
            }
        };
       
        if (result.value.formatted.toString() !== this.editingCellOrignalValue.val.toString()) {
            this._changeMemberCellValue(col, row, {
                val : result.value.val,
                formatted : result.value.formatted
            });
        } else {
            //the value has not changed, restore previous state
            $target.html(jQuery.sap.encodeHTML(String(this.editingCellOrignalValue.formatted)));
            //we have a dim member cell, so we add the needed classes
            $target.prepend("<span class = dimMemberLeaf dimMemberIcon></span>");
            this.starredHtml(col, row, undefined, $target);
        }

        if (this.leaveEditingCellStateUnchanged) {
            this.leaveEditingCellStateUnchanged = false;
        } else {
            this.oEditingCell = {};
        }

        this.editingCellOrignalValue = null;

        $input.attr("contenteditable", "false");
    } else {
        //for normal data cells change
        result = this._validateDataCell(newValue, this.editingCellOrignalValue.val);
        if (!result.valid || (result.valid && result.value.val.toString() === this.editingCellOrignalValue.val.toString())) {//simply rollback if the value is not changed because of the formatter maybe caused the inconsistent display
            newValue = this.editingCellOrignalValue.val; //simply rollback
            formattedVal = this.editingCellOrignalValue.formatted;
        } else {
            formattedVal = result.value.formatted; 
        }

        if (result.valid && result.value.val.toString() !== this.editingCellOrignalValue.val.toString()) {
            changed = true;

            this._changeDataCellValue(col, row, {
                val : result.value.val,
                formatted : formattedVal
            });

            //update undoStack
            undoItem = [];
            undoItem[0] = {
                col : col,
                row : row,
                val : this.editingCellOrignalValue.val,
                formatted : this.editingCellOrignalValue.formatted
            };
            this.redoStack = [];
            this.undoStack.push(undoItem);
        }

        if (this.leaveEditingCellStateUnchanged) {
            this.leaveEditingCellStateUnchanged = false;
        } else {
            this.oEditingCell = {};
        }

        this.editingCellOrignalValue = null;

        $input.attr("contenteditable", "false");
        if (typeof formattedVal === "object") {
            $target.empty();//delete the value.
            var idx = this._convertToIndex(col, row);
            this.hashOfCellData[idx].formatted = formattedVal;//update the formated values for scrolling
            var divCellFormatterId = "divContainer" + idx.toString();
            $target.html("<div id ='" + divCellFormatterId + "' style='position:relative;width:" + cellWidth +
                ";height:" + cellHeight + ";line-height:" + cellHeight + ";'>" + "</div>");
            this.formatedCellsIdx.push(idx);
            formattedVal.placeAt(divCellFormatterId, "only");
        } else {
            $target.html("<div style='position:relative;width:" + cellWidth + ";height:" + cellHeight +
                ";line-height:" + cellHeight + ";'>" + jQuery.sap.encodeHTML(String(formattedVal)) + "</div>");
        }
    }

    that.inEditMode = false;

};

sap.fpa.ui.control.analyticgrid.Grid.prototype.getCellFormula = function(x, y) {
    var key = this._buildCellKey(x, y);
    var formula = this.hashOfFormulas[key] || "";
    return {formula: formula};
};

/**
 * Calculate the value of the cell if it has a formula
 * @param  {oCell} cell object, like {x:2, y:2}	
 * @return {null}
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype._applyFormulaOnCell = function(oCell) {
	var key = this._buildCellKey(oCell.x, oCell.y);
    var orgValue = this._getGridCellCurrVal(oCell.x, oCell.y);
    var formula = this.hashOfFormulas[key];    
    
    if(formula) {
		var result = this._addFormulaToCell(oCell, formula);
		if (result.valid) {
			return result.value;
		}
    } else {
        return orgValue;
    }
    return {};
};

// sap.fpa.ui.control.analyticgrid.Grid.prototype._getRoundFormulaObj = function(sFormula) {
// 	var indexOfBeginParentheses = sFormula.indexOf("(");
// 	var indexOfComma = sFormula.indexOf(",");
// 	var indexOfCloseParentheses = sFormula.lastIndexOf(")");
// 	var formula = sFormula.substring(indexOfBeginParentheses + 1, indexOfComma).replace(/\"/g, "").replace(/\'/g, "").trim();
// 	var precision = sFormula.substring(indexOfComma + 1, indexOfCloseParentheses).trim();
// 	return {
// 		"formula" : formula,
// 		"precision" : precision
// 	};
// };

// sap.fpa.ui.control.analyticgrid.Grid.prototype._getFormattedValueWithSuffix = function(oCell) {
// 	var formatted = "";
//     var suffix = "";
// 	if (oCell && oCell.unit) {
// 		var displayValue = 0;
// 		displayValue = (oCell.val / oCell.unit.magnitude).toFixed(2);
// 		formatted = displayValue + " " + oCell.suffix;
// 	} else {
// 		formatted = oCell.val + suffix;
// 	}
// 	return formatted;
// };


sap.fpa.ui.control.analyticgrid.Grid.prototype.isFormulaString = function(strFormula) {
	return /^=/.test(strFormula);
};

/**
 * add new formula to cell. If the cell already has a formula, it will be removed firstly.
 * @param {oCell} cell object, like {x:2, y:2}
 * @param {strFormula} the formula string, like "A1+B2"
 * @return {object} like {val: "25", formatted:"25.00"}
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype.addFormulaToCell = function(oCell, strFormula) {
    this._addFormulaToCell(oCell, strFormula);
};

/**
 * add new formula to cell. If the cell already has a formula, it will be removed firstly.
 * @param {oCell} cell object, like {x:2, y:2}	
 * @param {strFormula} the formula string, like "A1+B2"
 * @return {object} like {val: "25", formatted:"25.00"}
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype._addFormulaToCell = function(oCell, strFormula) {
	var formulaKey = this._buildCellKey(oCell.x, oCell.y);
	var isNewFormula = true;
	var that = this;
    var i = 0;
    strFormula = $.trim(strFormula);
    if (!that.isFormulaString(strFormula)) {
    	strFormula = "=" + strFormula;
    }
    
	var reportAddFormulaError = function () {
        var sMessage = that.bundleManager.getText("ADD_FORMULA_FAILED");
        that._postMsg(sap.fpa.ui.infra.common.Message.Type.ERROR, sMessage);
		return {
			valid: false,
			value: null
		};
	};

    var formulaHelper = this.getFormulaHelper();
    if (formulaHelper && formulaHelper.parseExpression && formulaHelper.evaluateWithOptions) {

    	if (this._checkFormulaCircleReference(oCell, strFormula)) {
    		return reportAddFormulaError();
    	} 

		if (this.hashOfFormulas && this.hashOfFormulas[formulaKey] && this.hashOfFormulas[formulaKey] === strFormula) {
			isNewFormula = false;
		}
        
        if (isNewFormula) {
            this._removeFormulaOnCell(oCell);
            this.hashOfFormulas[formulaKey] = strFormula;
        }


        //formula should be used in following way in the future
        var result = formulaHelper.parseExpression(strFormula);
        if (result) {
            var formulaRef = {x: oCell.x, y: oCell.y};
            var oCellObject = this._initCustomCell(oCell.x, oCell.y) || {};
            var oFormatMetaData = oCellObject.formattingSpecification || {};
            var aVariables = result.variables;
            var sPattern = result.pattern;
            var sVariable = "";
            var oVariables = {};
            oFormatMetaData.inherit = {
            	pattern1: sPattern 
            };
            for (i = aVariables.length - 1; i >= 0; i--) {
            	sVariable = aVariables[i];
                if(this._validateOrdinate(sVariable)){
                	oVariables[sVariable] = {};
                    var xy = this._convertOrdinateToXY(sVariable);
                    if (isNewFormula) {
	                    //save formula reference to temp hash table
	                    var formulaRefKey = this._buildCellKey(xy.x, xy.y);
	                    if(!this.hashOfFormulaRefs[formulaRefKey]) {
	                        this.hashOfFormulaRefs[formulaRefKey] = [];
	                        
	                    } 
                        if($.inArray(formulaRef, this.hashOfFormulaRefs[formulaRefKey]) === -1) {
                            this.hashOfFormulaRefs[formulaRefKey].push(formulaRef);
                        }
                    }

                    //store cell in formula element for later formatting & evaluating
                    oVariables[sVariable].data = jQuery.extend(true, {}, this._initCustomCell(xy.x, xy.y));
                    oVariables[sVariable].value = oVariables[sVariable].data.val;
                    if(oVariables[sVariable].data.hasOwnProperty("cell-reference")){
                    	//if it's a cell with cell reference
                    	sPattern = sPattern.replace("{"+ sVariable +"}", "v");
                    } else {
                    	sPattern = sPattern.replace("{"+ sVariable +"}", "n");
                    }
                }
            }
            oFormatMetaData.inherit.pattern2 = sPattern;
            oFormatMetaData.inherit.variables = oVariables;
            var value = formulaHelper.evaluateWithOptions(result.tree, oVariables);

			return {
				valid: true,
				value: {
					val: value.val + "",
					editValue: strFormula,
					formatted: value.formatted	
				}
			};
        }
        //if no result get from parser, it's a parser error
        return {
            valid: true,
            value: {
                val: "#REF!",
                formatted: "#REF!"
            }
        };
    } else {
		return reportAddFormulaError();
	}
};

/**
 * Remove the formula on cell if it has formula
 * @param  {oCell} cell object, like {x:2, y:2}
 * @return {null}
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype._removeFormulaOnCell = function(oCell) {
    var key = this._buildCellKey(oCell.x, oCell.y);
    var formula = this.hashOfFormulas[key];
    var that = this;
    var i = 0,
        j = 0;
    var oFormatTypes = this.getFormatTypes();

    if(oFormatTypes) {
    	//if format type is used, remove inherit info if there's any
    	oCell = this._initCustomCell(oCell.x, oCell.y);
    	var oFormatMetaData = oCell.formattingSpecification;
    	if(oFormatMetaData) {
    		delete oFormatMetaData.inheirt;
    	}
    }

    if (formula) {        
        var formulaHelper = this.getFormulaHelper();
        if (formulaHelper && formulaHelper.parseFormula && formulaHelper.parseFormulaStr) {
            var arrFormula = formulaHelper.parseFormulaStr(formula);
            //remove formula reference
            for (i = arrFormula.length - 1; i >= 0; i--) {
                if(arrFormula[i].type === "operand" && that._validateOrdinate(arrFormula[i].value)){
                    var xy = that._convertOrdinateToXY(arrFormula[i].value);
                    //save formula reference to temp hash table
                    var formulaRefKey = that._buildCellKey(xy.x, xy.y);
                    if(that.hashOfFormulaRefs[formulaRefKey] && that.hashOfFormulaRefs[formulaRefKey].length > 0) {
                        var arrFormulaRefs = [];
                        var len = that.hashOfFormulaRefs[formulaRefKey].length;
                        for (j = 0; j < len; j++) {
                            var formulaRef = that.hashOfFormulaRefs[formulaRefKey][j];
                            if (formulaRef && (formulaRef.x !== oCell.x || formulaRef.y !== oCell.y)) {
                                arrFormulaRefs.push(formulaRef);
                            }
                        }
                        that.hashOfFormulaRefs[formulaRefKey] = arrFormulaRefs;
                    } 
                }
            }  
        }      
        //remove formula hash table 
        delete this.hashOfFormulas[key]; 
    }
};

/**
 * remove the formula on cells
 * @param  {array} aCells the cells on which formula will be removed
 * @return {null}
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype.removeCellsFormula = function(aCells) {
	for (var i = 0; i < aCells.length; i++) {
		var oCell = aCells[i];
		this._removeFormulaOnCell(oCell);
	}
};


/**
 * check if the formula to set has circle reference or not
 * @param  {oCell} 
 * @param  {sFormulaString} 
 * @return {bCircle} true or false
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype._checkFormulaCircleReference = function(oCell, sFormulaString) {
	var cellsWithFormula = [], that = this, bCircle =  false;
	var cellKey = this._buildCellKey(oCell.x, oCell.y);
	cellsWithFormula.push(cellKey);

	function checkFormula(formula) {
	    var formulaHelper = that.getFormulaHelper();
        var i = 0;
	    if (formulaHelper && formulaHelper.parseFormula && formulaHelper.parseFormulaStr) {
	        var arrFormula = formulaHelper.parseFormulaStr(formula);
	        //remove formula reference
	        for (i = arrFormula.length - 1; i >= 0; i--) {
	            if(arrFormula[i].type === "operand" && that._validateOrdinate(arrFormula[i].value)){
	                var xy = that._convertOrdinateToXY(arrFormula[i].value);                
	                var formulaKey = that._buildCellKey(xy.x, xy.y);
	                //if the key has been in Array, it has a circle
	                if($.inArray(formulaKey, cellsWithFormula) !== -1) {
                        bCircle = true;
	                }
	                //there is a formula on this cell
	                var sTempFormula = that.hashOfFormulas[formulaKey];
	                if (sTempFormula) {
                        checkFormula(sTempFormula);
	                }
	            }
	        }  
	    }		
	}

	checkFormula(sFormulaString);
	return bCircle;
};


sap.fpa.ui.control.analyticgrid.Grid.prototype._addFormulaClickedCell = function(oCell) {
    var $cell = $("#" + this.getId() + " td[x='" + oCell.x + "'][y='" + oCell.y + "']");   

    if(!oCell.className) {
        var styleClassName = "formula-click-cell-" + parseInt(Math.random() * 7 + 1,10);
        oCell.className = styleClassName;	    
    }   
    this.arrFormulaClickedCells.push(oCell); 

    //$cell.removeClass("formula-click-cell-1 formula-click-cell-2 formula-click-cell-3 formula-click-cell-4 formula-click-cell-5 formula-click-cell-6 formula-click-cell-7").addClass(oCell.className);    
    $cell.attr("class", function () {
	    return $(this).attr("class").replace(/formula-click-cell-\d*/g, "");
	});
	$cell.addClass(oCell.className); 
	$cell.css("border-style", "dotted");   
};


sap.fpa.ui.control.analyticgrid.Grid.prototype._emptyFormulaClickedCells = function() {
    var i = 0;
	var fCellAttr = function () {
		return $(this).attr("class").replace(/formula-click-cell-\d*/g, "");
	};
	for (i = this.arrFormulaClickedCells.length - 1; i >= 0; i--) {
		var oCell = this.arrFormulaClickedCells[i];
		var $cell = $("#" + this.getId() + " td[x='" + oCell.x + "'][y='" + oCell.y + "']");	
		$cell.attr("class", fCellAttr);
	}
   
    this.arrFormulaClickedCells = [];
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._getCellObjectFromArray = function(oCell, arrFormulaCells) {
	var oRetCell = "";
    var i = 0;
	for (i = arrFormulaCells.length - 1; i >= 0; i--) {
		if(arrFormulaCells[i].x === oCell.x && arrFormulaCells[i].y === oCell.y) {
			oRetCell = arrFormulaCells[i];
			break;
		}
	}
   
    return oRetCell;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._parseFormulaToClickedCells = function(formula) {
	var arrFormulaClickedCells = this.arrFormulaClickedCells;
    var i = 0;
	this._emptyFormulaClickedCells();
	this.arrFormulaClickedCells = [];
    if (formula) {        
        var formulaHelper = this.getFormulaHelper();
        if (formulaHelper && formulaHelper.parseFormula && formulaHelper.parseFormulaStr) {
            var arrFormula = formulaHelper.parseFormulaStr(formula);

            for (i = arrFormula.length - 1; i >= 0; i--) {
                if(arrFormula[i].type === "operand" && this._validateOrdinate(arrFormula[i].value)){
                    var oCell = this._convertOrdinateToXY(arrFormula[i].value);
                    var oExistCell = this._getCellObjectFromArray(oCell, arrFormulaClickedCells);
                    if(!oExistCell) {
                        oExistCell = oCell;
                    }

                    this._addFormulaClickedCell(oExistCell);                            
                }
            }
        }        
    }    
};
/**
 * Build this.hashOfFormulaRefs from this.hashOfFormulas
 * @return {null} 
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype._buildHashOfFormulaRefs = function() {
	var formulas = this.hashOfFormulas;
	var newHashOfFormulaRefs = {};
	var that = this;

	$.each(formulas, function(key, formula){
		var i = 0;

		var formulaRef = that._formulaKeyToXY(key);

		if (formula) {
			var formulaHelper = that.getFormulaHelper();
        	if (formulaHelper && formulaHelper.parseFormula && formulaHelper.parseFormulaStr) {
        		var arrFormula = formulaHelper.parseFormulaStr(formula);

        		if (arrFormula.length > 0) {
		            for (i = arrFormula.length - 1; i >= 0; i--) {
		                if(arrFormula[i].type === "operand" && that._validateOrdinate(arrFormula[i].value)){
		                    var xy = that._convertOrdinateToXY(arrFormula[i].value);
			                var formulaRefKey = that._buildCellKey(xy.x, xy.y);
			                if(!newHashOfFormulaRefs[formulaRefKey]) {
			                    newHashOfFormulaRefs[formulaRefKey] = [];			                        
			                } 
		                    if($.inArray(formulaRef, newHashOfFormulaRefs[formulaRefKey]) === -1) {
		                        newHashOfFormulaRefs[formulaRefKey].push(formulaRef);
		                    }
		                }
		            }
		        }	
        	}
		}		
	});

	this.hashOfFormulaRefs = newHashOfFormulaRefs;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._validateFormula = function(formula, fnGetNewXY, col, indics) {
		var that = this;
		var formulaHelper = that.getFormulaHelper();
		if (formulaHelper && formulaHelper.parseFormula && formulaHelper.parseFormulaStr) {
		    var arrFormula = formulaHelper.parseFormulaStr(formula);
		    var i = 0, refer_error = false;
		    for (i = arrFormula.length - 1; i >= 0; i--) {
		        if(arrFormula[i].type === "operand" && that._validateOrdinate(arrFormula[i].value)){
		        	var xy = that._convertOrdinateToXY(arrFormula[i].value);
		        	var newXY = fnGetNewXY(xy, col, indics);
		        	
		        	if (newXY.valid) {
		        		arrFormula[i].value = that._convertXYToOrdinate(newXY);
		        	} else {
		        		arrFormula[i].value = "#REF!";
		        		refer_error = true;
		        	}		            
		        }
		    }

		    var newFormula = formulaHelper.formulaToStr(arrFormula);

		    return {
				formula: newFormula,
				valid: !refer_error
			};
		}
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onCellClickModeOn = function() {	
	var that = this;
	var key = that._buildCellKey(that.oFocusedCell.col, that.oFocusedCell.row);
    var formula = that.hashOfFormulas[key] || "";
    //check if there is a formula on focused cell
    if (formula) {
        that._parseFormulaToClickedCells(formula);
    } else {
        that.arrFormulaClickedCells = [];
    }    
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onCellClickModeOff = function() {
    var that = this;
    that._emptyFormulaClickedCells();    
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onSwipe = function() {
// this._doSwipe(oEventData, oCustomData, 1, 1);
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onSwipeDimMember = function() {
//    oEventData.stopImmediatePropagation();
//
//    var $target = $(oEventData.currentTarget),
//    mbrCtx = $target.attr("mbrCtx"),
//    factorX = 1,
//    factorY = 1;
//
//    if($target.length > 0 && mbrCtx) {
//    var isCol = $target.hasClass("colDimMemberCell") || $target.hasClass("colDimMemberAttrCell"),
//        oSize;
//
//    if(isCol) {
//        oSize = this.colMemberContext2Size[mbrCtx];
//        factorX *= oSize.directSize;
//    } else {
//        oSize = this.rowMemberContext2Size[mbrCtx];
//        factorY *= oSize.directSize;
//    }
//    }
//
//    this._doSwipe(oEventData, oCustomData, factorX, factorY);
};

// sap.fpa.ui.control.analyticgrid.Grid.prototype._doSwipe = function(oEventData, oCustomData, factorX, factorY) {
//    factorX = factorX || 1;
//    factorY = factorY || 1;
//
//    var _self = this;
//    //swipe delta less than threshold value won't be accepted
//    var swipeGestureThreshold = 5,
//    originalEvent = oCustomData.originalEvent,
//    enabledRTL = sap.ui.getCore().getConfiguration().getRTL(),
//    factor = enabledRTL ? -1 : 1,
//    direction = (Math.abs(oCustomData.delta[0].lastX) > Math.abs(oCustomData.delta[0].lastY))? this.HORIZONTAL_AXIS: this.VERTICAL_AXIS,
//    deltaX = direction === this.HORIZONTAL_AXIS ? oCustomData.direction.lastX * factor : 0,
//    deltaY = direction === this.VERTICAL_AXIS ? oCustomData.direction.lastY : 0,
//    deltaAbsX = direction === this.HORIZONTAL_AXIS ? Math.abs(oCustomData.delta[0].lastX) : 0,
//    deltaAbsY = direction === this.VERTICAL_AXIS ? Math.abs(oCustomData.delta[0].lastY) : 0;
//
//    if (deltaAbsX < swipeGestureThreshold && deltaAbsY < swipeGestureThreshold) {
//    return false;
//    }
//
//    if(this.isScrolling){
//    return false;
//    }
//
//    this.isScrolling = true;
//
//    setTimeout(function(){
//    _self.isScrolling = false;
//    }, 100);
//
//    deltaX *= factorX;
//    deltaY *= factorY;
//
//    //scroll on mobile is reversed so we use -delta
//    this._performScrollOnDevice(-deltaX, -deltaY, direction, originalEvent, false);
// };

sap.fpa.ui.control.analyticgrid.Grid.prototype._onMouseWheel = function(oEventData) {
    this._doMouseWheel(oEventData, 1, 1);
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onMouseWheelDimMember = function(oEventData) {
    oEventData.stopImmediatePropagation();

    var $target = $(oEventData.currentTarget), mbrCtx = $target.attr("mbrCtx"), factorX = 1, factorY = 1;

    if ($target.length > 0 && mbrCtx) {
        var isCol = $target.hasClass("colDimMemberCell") || $target.hasClass("colDimMemberAttrCell"), oSize;

        if (isCol) {
            oSize = this.colMemberContext2Size[mbrCtx];
            factorX *= oSize.directSize;
        } else {
            oSize = this.rowMemberContext2Size[mbrCtx];
            factorY *= oSize.directSize;
        }
    }

    this._doMouseWheel(oEventData, factorX, factorY);
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._doMouseWheel = function(oEventData, factorX, factorY) {
    factorX = factorX || 1;
    factorY = factorY || 1;

    var originalEvent = oEventData.originalEvent, direction = oEventData.originalEvent.axis === oEventData.originalEvent.VERTICAL_AXIS ? this.VERTICAL_AXIS
        : this.HORIZONTAL_AXIS, deltaX = (direction === this.HORIZONTAL_AXIS) ? Math.floor(originalEvent.detail / 3 ||
        -originalEvent.wheelDelta / 120) : 0, deltaY = (direction === this.VERTICAL_AXIS) ? Math
        .floor(originalEvent.detail / 3 || -originalEvent.wheelDelta / 120) : 0;

    deltaX *= factorX;
    deltaY *= factorY;

    this._performScroll(deltaX, deltaY, direction, oEventData, true);
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._checkShouldBlockKeyEvent = function() {
    return sap.ui.getCore().getCurrentFocusedControlId() !== this.getId();
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._checkShouldBeginEdit = function(oEventData) {
    var sKeyCode = oEventData.keyCode;
    var bResult = (oEventData.shiftKey) ? ((sKeyCode === 187 || sKeyCode === 56) ? true : false)
        : ((sKeyCode !== 188 && ((sKeyCode >= 48 && sKeyCode <= 57) || (sKeyCode >= 96 && sKeyCode <= 111) || (sKeyCode >= 187 && sKeyCode <= 191))) || sKeyCode === 8 ? true : false);

    var bDummyCellEditable = ((sKeyCode >= 48 && sKeyCode <= 111) || (sKeyCode >= 186 && sKeyCode <= 222)) && $(oEventData.target).hasClass("dummyCell");
    return bResult || bDummyCellEditable;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onKeyPress = function() {
	// NOTE: Be careful!! Keycode here means ASCII code, 
	// it's different with keycode of keyup/kendown event.
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onKeyUp = function(oEventData) {
    var preventDefault = false;
    var that = this;
    var i = 0;
    for (i = that.arrTimeoutMove.length - 1; i >= 0; i--) {
        clearTimeout(that.arrTimeoutMove[i]);
    }
    that.arrTimeoutMove = [];

    switch (oEventData.keyCode) {
    case 65: // ctrl + A
        if(oEventData.ctrlKey) {
            this._focusOnCell(this.POSITION_OF_INDEXCELL, this.POSITION_OF_INDEXCELL, false, false, false);
        }
        break;    	
    case 86: //ctrl + V
        if (/*oEventData.ctrlKey && */this.keyDownRecord["86"] ) { //ctrlKey flag almost never set - not sure why, just don't check it
            this._onPasteEnd();
            this.keyDownRecord["86"] = false;
        }
        break;
    case 90: //ctrl + Z
        if (oEventData.ctrlKey) {
            this.undo();
        }
        break;
    case 89: //ctrl + Y
        if (oEventData.ctrlKey) {
            this.redo();
        }
        break;
    case 46: //delete
        if (!oEventData.ctrlKey && !oEventData.shiftKey) {
            this._onDelete();
        }
        break;
    case 33: //page up
    case 34: //page down
    case 37: //left
    case 38: //up
    case 39: //right
    case 40: //down
        if (!this.editingCellOrignalValue) { //not in editing mode
            preventDefault = true;
        }
        break;
    case 13: //return
        var $target = $("#" + this.getId() + " td[x='" + this.oFocusedCell.col + "'][y='" + this.oFocusedCell.row +
            "']");
        if (($.isEmptyObject(this.oEditingCell)) && ($target.attr("editable") === "true") && (this.nextLine === false)) {
            this._editCell($target);
        } else {
            this.nextLine = false;
        }
        preventDefault = true;
        break;
    case 9: //tab
        preventDefault = true;
        break;
  
    }

    if (preventDefault) {
        return false;
    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onKeyDown = function(oEventData) {
    var delta = 0, direction = this.VERTICAL_AXIS, enabledRTL = sap.ui.getCore().getConfiguration().getRTL();
    var that = this;
    var id = this.getId();
    var $target = null;
    function _bottomY() {
        var $leftTopCell = $("#" + id + " td.dataCell").first();
        var top = parseInt($leftTopCell.attr("y"),10);
        var leftTopCol = parseInt($leftTopCell.attr("col"),10);
        var leftTopRow = parseInt($leftTopCell.attr("row"),10);
        var rightBottomCol = leftTopCol + that.numberOfViewableDataCols - 1;
        var rightBottomRow = leftTopRow + that.numberOfViewableDataRows - 1;
        var selection = "#" + id + " td.dataCell[row='" + rightBottomRow + "'][col='" + rightBottomCol + "']";
        var $rightBottomCell = $(selection);
        var bottom = parseInt($rightBottomCell.attr("y"),10);

        return bottom - top + 1;
    }

    if (this._checkShouldBeginEdit(oEventData) && (!oEventData.ctrlKey) && (!oEventData.metaKey)) {
        $target = $("#" + this.getId() + " td[x='" + this.oFocusedCell.col + "'][y='" + this.oFocusedCell.row +
            "']");
        if (($.isEmptyObject(this.oEditingCell)) && ($target.attr("editable") === "true")) {
            this._editCell($target);
        }
    }

    switch (oEventData.keyCode) {
    case 67: //ctrl + C
        if (oEventData.ctrlKey || oEventData.metaKey) {
            this._onCopy();
            this.fireReportCopy();
        }
        break;
    case 88: //ctrl + X
        if (oEventData.ctrlKey) {
            this._onCut();
        }
        break;
    case 86: //ctrl + V
        if ((oEventData.metaKey || oEventData.ctrlKey) && !this.keyDownRecord["86"]) { 
            this.keyDownRecord["86"] = true;
            this._onPasteStart();
        }
        break;
    case 27: //ESC
        that.oEditingCell = {};
        if (that.inEditMode) {
            $(oEventData.target).attr("contenteditable", "false");
            $(oEventData.target).text(that.editingCellOrignalValue.val);
            that._focusOnCell(that.oFocusedCell.col, that.oFocusedCell.row, false, false, false);
        }

        break;
    case 33: //page up
        if (!this.editingCellOrignalValue) { //not in editing mode
            //delta = -this.numberOfViewableDataRows;
            delta = -_bottomY.apply(this);
        }
        break;
    case 34: //page down
        if (!this.editingCellOrignalValue) { //not in editing mode
            //delta = this.numberOfViewableDataRows;
            delta = _bottomY.apply(this);
        }
        break;
    case 37: //left
        if (!this.editingCellOrignalValue) { //not in editing mode
            direction = this.HORIZONTAL_AXIS;
            if (enabledRTL) { //make it visually nature in RTL environment
                delta = 1;
            } else {
                delta = -1;
            }
        }
        break;
    case 38: //up
        if (!this.editingCellOrignalValue) { //not in editing mode
            delta = -1;
        }
        break;
    case 39: //right
        if (!this.editingCellOrignalValue) { //not in editing mode
            direction = this.HORIZONTAL_AXIS;
            if (enabledRTL) { //make it visually nature in RTL environment
                delta = -1;
            } else {
                delta = 1;
            }
        }
        break;
    case 40: //down
        if (!this.editingCellOrignalValue) { //not in editing mode
            delta = 1;
        }
        break;
    case 13: //return
        $target = $("#" + this.getId() + " td[x='" + this.oFocusedCell.col + "'][y='" + this.oFocusedCell.row +
            "']");
        if (this.preTarget === null || this.preTarget === undefined) {
            this.preTarget = $target;
        }
        if (!(($.isEmptyObject(this.oEditingCell)) && ($target.attr("editable") === "true"))) {
            this.oEditingCell = {};
            delta = 1;
            this.nextLine = true;
        }
        break;
    case 9: //tab
        direction = this.HORIZONTAL_AXIS;
        if (!oEventData.ctrlKey) {
            if (oEventData.shiftKey) {
                delta = -1;
            } else {
                delta = 1;
            }
        }
        break;
    }

    if (delta !== 0) {
        var timeout = setTimeout(function() {
            clearTimeout(timeout);
            that._performMove(delta, direction, oEventData);
        }, 0);
        this.arrTimeoutMove.push(timeout);
        return false;
    }
};

//================================================================================================
// dragging/copy relevant
//================================================================================================

sap.fpa.ui.control.analyticgrid.Grid.prototype._handleDraggerMoving = function(item, oEventData) {
    //when mouse up or dragging within the editing cell, disable multi-cell selection
    if (!this.draggerOrigin || !$.isEmptyObject(this.oEditingCell) || this.cell2Resize || !this.oSelectedRegions) {
        return;
    }

    var id = this.getId();
    var currentTarget = $(item);
    var col = parseInt(currentTarget.attr("x"),10);
    var row = parseInt(currentTarget.attr("y"),10);
    var left = currentTarget.offset().left;
    var top = currentTarget.offset().top;
    var width = currentTarget.outerWidth();
    var height = currentTarget.outerHeight();
    var iBegin, iEnd, $beginCell, beginCellLeft, beginCellWidth, beginCellTop, beginCellHeight;
    var horizontal = false, positive = false;
    var clientX = oEventData.clientX, clientY = oEventData.clientY;
    var oRegion = {
        x1 : this.draggerOrigin.x1,
        y1 : this.draggerOrigin.y1
    };    
    var oOriginRealRegion = this._calculateRealRegion(this.draggerOrigin);
    var oOrigin = this._parseRegion(oOriginRealRegion.x1, oOriginRealRegion.y1, oOriginRealRegion.x2, oOriginRealRegion.y2);
    var colInterval = oOrigin.hasMergedCell ? oOrigin.colSize : 1;
    var rowInterval = oOrigin.hasMergedCell ? oOrigin.rowSize : 1;
    var oMergedCell = oOrigin.cells[oOrigin.x2 + "-" + oOrigin.y2].mergedCellInfo;
    var originX2 = oOrigin.x2, originY2 = oOrigin.y2, originX1 = oOrigin.x1, originY1 = oOrigin.y1;
    
    this.currMousePosition = {
        x : col,
        y : row
    };

    if(oMergedCell && oMergedCell.isMerged) {
        if(oMergedCell.colSpan) {
            originX2 = oOrigin.x2 + oMergedCell.colSpan - 1;
        }
        if(oMergedCell.rowSpan) {
            originY2 = oOrigin.y2 + oMergedCell.rowSpan - 1;
        }
    }

    horizontal = Math.abs(clientX - this.draggerOrigin.clientX) > Math.abs(clientY - this.draggerOrigin.clientY);
    positive = horizontal ? clientX > this.draggerOrigin.clientX : clientY > this.draggerOrigin.clientY;

    // start point is same with origin region, just need to calculate end point of target region
    // 
    // If there are merged cells in dragger origin, the target region resize will be 
    // based on size of dragger origin region (In this case, resize step will be colInterval, rowInterval), 
    // not based on single cell (For both then col and row, resize step is 1).
    // 
    if (horizontal) {
        oRegion.y2 = oOrigin.y2;
        if (positive) {
            if(colInterval > 1) {
                iBegin = originX2 + colInterval * parseInt((col - originX2) / colInterval,10) + 1;
                iEnd = originX2 + colInterval * (parseInt((col - originX2) / colInterval,10) + 1);
                $beginCell = $("#" + id + " td[x='" + iBegin + "'][y='" + originY2 + "']");
                beginCellLeft = $beginCell.offset().left;
                beginCellWidth = $beginCell.outerWidth();

                oRegion.x2 = (clientX >= beginCellLeft + beginCellWidth / 2) ? iEnd : iBegin - 1;
			} else {
				oRegion.x2 = (clientX >= left + width / 2) ? col : col - 1;
			}
        } else {
            if(colInterval > 1) {
                iBegin = originX1 - colInterval * parseInt((originX1 - col) / colInterval,10) - 1;
                iBegin = iBegin < 0 ? 0 : iBegin;
                iEnd = originX1 - colInterval * (parseInt((originX1 - col) / colInterval,10) + 1);
                iEnd = iEnd < 0 ? 0 : iEnd;
                $beginCell = $("#" + id + " td[x='" + iBegin + "'][y='" + originY2 + "']");
                beginCellLeft = $beginCell.offset().left;
                beginCellWidth = $beginCell.outerWidth();

                oRegion.x2 = (clientX < beginCellLeft + beginCellWidth / 2) ? iEnd  : iBegin + 1;
			} else {
				oRegion.x2 = (clientX < left + width / 2) ? col : col + 1;
			}
        }
    } else {
        oRegion.x2 = oOrigin.x2;
        if (positive) {
            if(rowInterval > 1) {
                iBegin = originY2 + rowInterval * parseInt((row - originY2) / rowInterval,10) + 1;
                iEnd = originY2 + rowInterval * (parseInt((row - originY2) / rowInterval,10) + 1);
                $beginCell = $("#" + id + " td[x='" + originX2 + "'][y='" + iBegin + "']");
                beginCellTop = $beginCell.offset().top;
                beginCellHeight = $beginCell.outerHeight();

                oRegion.y2 = (clientY >= beginCellTop + beginCellHeight / 2) ? iEnd  : iBegin - 1;
            } else {
                oRegion.y2 = (clientY >= top + height / 2) ? row : row - 1;
            }
        } else {
            if(rowInterval > 1) {
                iBegin = originY1 - rowInterval * parseInt((originY1 - row) / rowInterval,10) - 1;
                iBegin = iBegin < 0 ? 0 : iBegin;
                iEnd = originY1 - rowInterval * (parseInt((originY1 - row) / rowInterval,10) + 1);
                iEnd = iEnd < 0 ? 0 : iEnd;
                $beginCell = $("#" + id + " td[x='" + originX2 + "'][y='" + iBegin + "']");
                beginCellTop = $beginCell.offset().top;
                beginCellHeight = $beginCell.outerHeight();

                oRegion.y2 = (clientY < beginCellTop + beginCellHeight / 2) ? iEnd  : iBegin + 1;
            } else {
                oRegion.y2 = (clientY < top + height / 2) ? row : row + 1;
            }
        }
    }

    // limit dragging box, width and height will not bigger than dragger origin width and height
    if (oRegion.x2 >= oOrigin.x1 && oRegion.x2 <= originX2) {
        oRegion.x2 = originX2;
    }

    if (oRegion.y2 >= oOrigin.y1 && oRegion.y2 <= originY2) {
        oRegion.y2 = originY2;
    }

    if (oRegion.x1 > oRegion.x2) {
        oRegion.x1 = oRegion.x2;
        oRegion.x2 = originX2;
    }
    if (oRegion.y1 > oRegion.y2) {
        oRegion.y1 = oRegion.y2;
        oRegion.y2 = originY2;
    }

    oRegion = this._calculateRealRegion(oRegion);
    oRegion = this._parseRegion(oRegion.x1, oRegion.y1, oRegion.x2, oRegion.y2);

    // reset selected region
    var currKey = oRegion.x1 + "-" + oRegion.y1 + "-" + oRegion.x2 + "-" + oRegion.y2;
    delete this.oSelectedRegions[this.lastSelectionKey];
    this.lastSelectionKey = currKey;
    this.oSelectedRegions[currKey] = oRegion;
/*
    var that = this;
    setTimeout(function() {
        that._performAutoScroll(col, row, currentTarget.position().left + currentTarget.outerWidth(), currentTarget
            .position().top +
            currentTarget.outerHeight());
    }, 200);
*/
    this._redrawAffectCells();
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onDragCopy = function() {
    var id = this.getId();
    var $selectionBox = $("#" + id + "-selectionBox");

    var that = this;
    var hashItems = {};
    var undoItems = [];
    var x = 0,
        y = 0;
    $.each(this.oSelectedRegions, function(key, oRegion) {
        var oDraggerOrigin = jQuery.extend(true, {}, that.draggerOrigin);
        var oMergedCell;

        // for merged cells, recalculate region
       oMergedCell = that._getMergedCell(oDraggerOrigin.x2, oDraggerOrigin.y2);
       if(oMergedCell && oMergedCell.isMerged) {
            if(oMergedCell.colSpan) {
                oDraggerOrigin.x2 = oDraggerOrigin.x2 + oMergedCell.colSpan - 1;
            }
            if(oMergedCell.rowSpan) {
                oDraggerOrigin.y2 = oDraggerOrigin.y2 + oMergedCell.rowSpan - 1;
            }
       }

        var colOffset = oDraggerOrigin.x2 - oDraggerOrigin.x1 + 1;
        var rowOffset = oDraggerOrigin.y2 - oDraggerOrigin.y1 + 1;
        var copyFromX, copyFromY;

        // check if target region is OK for drag copy
        // for example, target region has merged cells...
        var bAvailabeForDragCopy = that._validateDragTargetRegion(oDraggerOrigin, oRegion);

        if(bAvailabeForDragCopy && !bAvailabeForDragCopy.valid) {
            if(bAvailabeForDragCopy.message) {
                that._postMsg(sap.fpa.ui.infra.common.Message.Type.WARNING, bAvailabeForDragCopy.message);
            }
            return;
        }

        for (x = oRegion.x1; x <= oRegion.x2; x++) {
            for (y = oRegion.y1; y <= oRegion.y2; y++) {
                // if item is in dragger origin region, ignore it
                if (x >= oDraggerOrigin.x1 && x <= oDraggerOrigin.x2 && y >= oDraggerOrigin.y1 &&
                    y <= oDraggerOrigin.y2) {
                    continue;
                }

                // handle vertical drag
                if (x >= oDraggerOrigin.x1 && x <= oDraggerOrigin.x2) {
                    copyFromX = x;

                    if (oDraggerOrigin.y2 < y) {
                        copyFromY = oDraggerOrigin.y1 + (y - oDraggerOrigin.y1) % rowOffset;
                    }

                    if (oDraggerOrigin.y1 > y) {
                        copyFromY = oDraggerOrigin.y1 + (rowOffset - ((oDraggerOrigin.y1 - 1 - y) % rowOffset)) - 1;
                    }
                }

                // handle horizontal drag
                if (y >= oDraggerOrigin.y1 && y <= oDraggerOrigin.y2) {
                    copyFromY = y;

                    if (oDraggerOrigin.x2 < x) {
                        copyFromX = oDraggerOrigin.x1 + (x - oDraggerOrigin.x1) % colOffset;
                    }

                    if (oDraggerOrigin.x1 > x) {
                        copyFromX = oDraggerOrigin.x1 + (colOffset - ((oDraggerOrigin.x1 - 1 - x) % colOffset)) - 1;
                    }
                }

                // if source cell is invisible, escape
                var $cell = $("#" + id + " td[x='" + copyFromX + "'][y='" + copyFromY + "']");
                if(!$cell.is(":visible")) {
                    continue;
                }

                // copy data from corresponding item in dragger origin region
                var bNoFormula = false;
                if ($.isNumeric(copyFromX) && $.isNumeric(copyFromY)) {
                    var oSourceCell;
                    if(!$cell.hasClass("dummyCell") && that._isInDataCellRange(copyFromX, copyFromY)) {
                        oSourceCell = that.hashOfCellData[that._convertToIndex(copyFromX, copyFromY)];
                    } else {
                        oSourceCell = jQuery.extend(true, {}, that.getCellObject(copyFromX, copyFromY));
                    }

                    var copyFromKey = that._buildCellKey(copyFromX, copyFromY);
                    var copyFromFormula = that.hashOfFormulas[copyFromKey];

                    if (copyFromFormula) {
                        //current index: (x, y), copy from (copyFromX, copyFromY)
                        var deltaX = x - copyFromX;
                        var deltaY = y - copyFromY;

                        var strFormula = copyFromFormula;

                        var formulaHelper = that.getFormulaHelper();
                        if (formulaHelper && formulaHelper.parseFormula && formulaHelper.parseFormulaStr) {
                            var arrFormula = formulaHelper.parseFormulaStr(strFormula);
                            var i = 0;
                            for (i = arrFormula.length - 1; i >= 0; i--) {
                                if(arrFormula[i].type === "operand" && that._validateOrdinate(arrFormula[i].value)){
                                    var xy = that._convertOrdinateToXY(arrFormula[i].value);

                                    var newX = xy.x, newY = xy.y + 1;
                                    if (deltaX === 0 && !xy.dollarY) {
                                        newY = xy.y + 1 + deltaY > 0 ? xy.y + 1 + deltaY : -1;
                                    }
                                    if (deltaY === 0 && !xy.dollarX) {
                                        newX = xy.x + deltaX >= 0 ? xy.x + deltaX : -1;
                                    }
                                    //exception case for anti-direction drag
                                    if (newX === -1 || newY === -1) {
                                        bNoFormula = true;
                                        break;
                                    }

                                    var newCordinate = (xy.dollarX ? "$" : "") + that._numberToZZ(newX) + (xy.dollarY ? "$" : "") + newY;
                                    arrFormula[i].value = newCordinate;                            
                                }
                            }

                            if (!bNoFormula) {
                                var newFormula = formulaHelper.formulaToStr(arrFormula);
                                var oCell = {x:x, y:y};
                                var result = that._addFormulaToCell(oCell, newFormula);
                                if (result.valid) {
									jQuery.extend(true, oSourceCell, result.value);
                                }
                                
                            }
                        }
                    }

                    // if it's drillstate, and target is not in data range, avoid copy.
                    var bTargetInDataRange = that._isInDataCellRange(x, y);
                    if(that.oGridData && !bTargetInDataRange) {
                        return;
                    }

                    var oTargetCell = bTargetInDataRange ? that.hashOfCellData[that._convertToIndex(x, y)] :
                                                           jQuery.extend(true, {}, that.getCellObject(x, y));
                    
                    // hash for redo
                    hashItems[x + "/" + y] = bTargetInDataRange ? {
                        col: x,
                        row: y,
                        val: oTargetCell.val,
                        formatted: oTargetCell.formatted
                    } : oTargetCell;

                    // copy data
                    oSourceCell.x = x;
                    oSourceCell.y = y;
                    if(oSourceCell["cell-reference"]) {
                        delete oSourceCell["cell-reference"];
                    }

                    that._changeGridCellValue(x, y, oSourceCell);
                }
            }
        }
    });

    $.each(hashItems, function(key, item) {
        undoItems.push(item);
    });

    if (undoItems.length !== 0) {
        this.undoStack.push(undoItems);
        this.redoStack = [];
    }

    if (!$.isEmptyObject(hashItems)) {
        this._redrawGrid();
    }

    this.draggerOrigin = null;
    $selectionBox.css("border-style", "solid");
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._isInDataCellRange = function(x, y) {	
	// out of range of data cells
	if(y > this.numberOfHeaderRows + this.numberOfDataRows - 1|| x > this.numberOfHeaderCols + this.numberOfDataCols - 1) {
		return false;
	}

	return true;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._validateDragTargetRegion = function(oOriginRegion, oTargetRegion) {
	var oResult = {
		valid : true,
		message : ""
	};
	var oOrigin = this._calculateRealRegion(oOriginRegion);
	var oTarget = this._calculateRealRegion(oTargetRegion);

	// Since oTarget overlap oDraggerOrigin, re-calculate target region
	var oCopyTarget = jQuery.extend(true, {}, oTarget);

	// horizontal
	if(oTarget.y1 === oOrigin.y1 && oTarget.y2 === oOrigin.y2) {
		// positive
		if(oTarget.x2 >= oOrigin.x2) {
			oCopyTarget.x1 = oOrigin.x2 + 1;
		}

		// negative
		if(oTarget.x1 < oOrigin.x1) {
			oCopyTarget.x2 = oOrigin.x1 - 1;
		}
	}

	// vertical
	if(oTarget.x1 === oOrigin.x1 && oTarget.x2 === oOrigin.x2) {
	    // positive
        if (oTarget.y2 > oOrigin.y2) {
            oCopyTarget.y1 = oOrigin.y2 + 1;
        }

	    // negative
		if(oTarget.y1 < oOrigin.y1) {
			oCopyTarget.y2 = oOrigin.y1 - 1;
		}
	}

    oCopyTarget = this._parseRegion(oCopyTarget.x1, oCopyTarget.y1, oCopyTarget.x2, oCopyTarget.y2);

    // if there is no merged cell in target region, escape validation
    if(!oCopyTarget.hasMergedCell && $.isEmptyObject(oCopyTarget.invisibleCells)) {
        return oResult;
    }

    var oCellSize = {}, aCellSize = [], numberOfCell = 0;
    Object.keys(oCopyTarget.cells).forEach(function(key) {
        var col, row;
        var oMergedCell = oCopyTarget.cells[key].mergedCellInfo;
        if(oMergedCell && oMergedCell.isMerged) {
            col = oMergedCell.colSpan || 1;
            row = oMergedCell.rowSpan || 1;
            numberOfCell += oMergedCell.containedCells ? oMergedCell.containedCells.length : 1;
        } else {
            col = 1;
            row = 1;
            numberOfCell += 1;
        }

        var sSize = col + "-" + row;
        if(!oCellSize[sSize]) {
            oCellSize[sSize] = sSize;
            aCellSize.push(sSize);
        }
    });

    // in target region, there are more than 1 size cell (merged cell),
    // cannot decide how to copy to this region
    if(aCellSize.length > 1) {
		oResult.valid = false;
		oResult.message = this.bundleManager.getText("DRAG_COPY_DIFFERENT_MERGED_CELL");
		return oResult;
    }

    // If some invisible cells are not contained in internal merged cell (from broken outside merged cell),
    // cannot do copy in this case.
    var bAllCellContained = true;
    $.each(oCopyTarget.invisibleCells, function(key1, invisibleCell) {
        var bContainedByMergedCell = false;

        $.each(oCopyTarget.cells, function(key2, visibleCell) {
            if(visibleCell.mergedCellInfo) {
                var oContainedCells = visibleCell.mergedCellInfo.containedCells;
                if(oContainedCells && oContainedCells[invisibleCell.x2 + "-" + invisibleCell.y2]) {
                    bContainedByMergedCell = true;

                    // if contains, return from loop
                    return false;
                }
            }
        });

        // if one cell not contained by inside merged cell, return from loop
        if(!bContainedByMergedCell) {
            bAllCellContained = false;
            return false;
        }
    });

    if(!bAllCellContained) {
        oResult.valid = false;
        oResult.message = this.bundleManager.getText("DRAG_COPY_INVALID_RANGE");
        return oResult;
    }

    // if some merged cell is broken by copy target, cannot copy.
    var bMergedCellBroken = false;
    $.each(oCopyTarget.cells, function(key1, oCell) {
        if(oCell.mergedCellInfo) {
            var oContainedCells = oCell.mergedCellInfo.containedCells;
            $.each(oContainedCells, function(key2, containedCell) {
                var $cell = $("#" + this.getId() + " td[x='" + containedCell.x + "'][y='" + containedCell.y + "']");
                if(!$cell.is(":visible")) {
                    // try to find it in inside invisible cells
                    if(!oCopyTarget.invisibleCells[containedCell.x + "-" + containedCell.y]) {
                        bMergedCellBroken = true;
                        return false;
                    }
                }
            });
		}

		if(bMergedCellBroken) {
			return false;
		}
    });

    if(bMergedCellBroken) {
        oResult.valid = false;
        oResult.message = this.bundleManager.getText("DRAG_COPY_INVALID_RANGE");
        return oResult;
    }

    return oResult;
};

/**
 * It's possible that region contains merged cells. 
 * The region may not reflect the real range in the grid.
 * For example, for region (x1, y1, x2, y2), cell (x2, y2) has colspan=2 and rowspan=2,
 * the real range is (x1, y1, x2 +2 -1, y2 + 2 -1).
 *
 * @author karl.liu@sap.com
 * @param  {Object} oRegion Region to re-calculate.
 * @return {Object}         Re-calculated region.
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype._calculateRealRegion = function(oRegion) {
	var oResult = jQuery.extend(true, {}, oRegion);	
	var oMergedCell = this._getMergedCell(oRegion.x2, oRegion.y2);

	if(oMergedCell && oMergedCell.isMerged) {
		if(oMergedCell.colSpan) {
			oResult.x2 = oResult.x2 + oMergedCell.colSpan - 1;
		}

		if(oMergedCell.rowSpan) {
			oResult.y2 = oResult.y2 + oMergedCell.rowSpan - 1;
		}
	}

	return oResult;
};

/**
 * Tries to get basic information of merged cell. 
 * Such as rowspan, colspan, contained cells, etc.
 *
 * @author karl.liu@sap.com
 * @param  {Number} iX x index of cell
 * @param  {Number} iY y index of cell
 * @return {Object}    Detailed information of merged cell.
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype._getMergedCell = function(iX, iY) {
	var oMergedCell = {
		isMerged : false,
		attributes : {}
	};
	var $cell = $("#" + this.getId() + " td[x='" + iX + "'][y='" + iY + "']");

    var i = 0,
        j = 0;
	if(!$cell || $cell.length <= 0) {
		return oMergedCell;
	}

	var sColSpan = $cell.attr("colspan");
	var sRowSpan = $cell.attr("rowspan");
	var iColSpan, iRowSpan;

	if(sColSpan) {
		iColSpan = parseInt(sColSpan,10);
		if(iColSpan > 1) {
			oMergedCell.isMerged = true;
			oMergedCell.colSpan = iColSpan;
			oMergedCell.attributes.colspan = iColSpan;
		}
	}

	if(sRowSpan) {
		iRowSpan = parseInt(sRowSpan,10);
		if(iRowSpan > 1) {
			oMergedCell.isMerged = true;
			oMergedCell.rowSpan = iRowSpan;
			oMergedCell.attributes.rowspan = iRowSpan;
		}
	}

	iColSpan = iColSpan || 1;
	iRowSpan = iRowSpan || 1;

	oMergedCell.containedCells = oMergedCell.containedCells || {};
	for(i = 0; i < iColSpan; i++) {
		for(j = 0; j < iRowSpan; j++) {
			var key = (iX + i) + "-" + (iY + j);
			if(!oMergedCell.containedCells[key]) {
				oMergedCell.containedCells[key] = {
					key : key,
					x : iX + i,
					y : iY + j
				};
			}
		}
	}

	return oMergedCell;
};

/**
 * It parses given region, find out more region info, such as
 * if the region has merged cell, cells contained by merged cell, and col/row size...
 *
 * @author karl.liu@sap.com
 * @param  {Object} oRegion Region to parse which has basic info of a region (x1, y1, x2, y2)
 * 
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype._parseRegion = function(x1, y1, x2, y2) {
	var id = this.getId();
	var oRegion = {
		x1 : x1,
		y1 : y1,
		x2 : x2,
		y2 : y2
	};
    var x = 0,
        y = 0;
	oRegion.colSize = x2 - x1 + 1;
	oRegion.rowSize = y2 - y1 + 1;
	oRegion.cells = oRegion.cells || {};
	oRegion.invisibleCells = oRegion.invisibleCells || {};
	oRegion.hasMergedCell = false;

	for(x = x1; x <= x2; x++) {
		for(y = y1; y <= y2; y++) {
			var key = x + "-" + y;
			var oCell = {
                key : key,
                x : x,
                y : y
            };
			var $cell = $("#" + id + " td[x='" + x + "'][y='" + y + "']");
			if(!$cell.is(":visible")) {
                oRegion.invisibleCells[key] = oCell;
                continue;
            }

            oRegion.cells[key] = oCell;

			var oMergedCell = this._getMergedCell(x, y);
			if(oMergedCell && oMergedCell.isMerged) {
				oRegion.hasMergedCell = true;
				oRegion.cells[key].mergedCellInfo = oMergedCell;
			}			
		}
	}

	// if right bottom is invisible (inside a merged cell), find the merged cell which belongs to, 
	// make the merged cell the right bottom.
	// 
	// But there is still chance the right bottom is inside a merged cell which is out of range of paseed region.
	// So in this case, after parsing, right bottom cell is still invisible.
	var $rightBottom = $("#" + id + " td[x='" + oRegion.x2 + "'][y='" + oRegion.y2 + "']");
	if(!$rightBottom.is(":visible")) {
		$.each(oRegion.cells, function(key, oCell) {
			if(oCell.mergedCellInfo) {
				var oContainedCells = oCell.mergedCellInfo.containedCells;
				if(oContainedCells && oContainedCells[oRegion.x2 + "-" + oRegion.y2]) {
					oRegion.x2 = oCell.x;
					oRegion.y2 = oCell.y;
					return false;
				}
			}
		});
	}

	return oRegion;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onMouseUp = function() {
	if(!this.isMouseDown && !this.draggerOrigin) {
		return;
	}

    this.isMouseDown = false;

    if (this.draggerOrigin) {
        this._onDragCopy();
    }

    this._resetAutoScroll();

    var oSelectedRegions = this.getSelectedMemberContext();

    var iCol = this.oFocusedCell.col, iRow = this.oFocusedCell.row;
    var oFocusedCellContext = this._memberContextOfDataCell(iCol, iRow);
    setTimeout(jQuery.proxy(function() { //make UI event asyncronized
        this.fireSelectionChanged({
            status : "end",
            focusedCell : oFocusedCellContext,
            selectedRegions : oSelectedRegions
        });
    }, this), 1);
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onMouseEnter = function(oEventData) {
    if (oEventData.which !== 1){
        this.isMouseDown = false;
    } 
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onCopy = function() {
    var id = this.getId();
    var POSITION_OF_ALL = this.POSITION_OF_ALL;
    var numberOfHeaderCols = this.numberOfHeaderCols;
    var numberOfHeaderRows = this.numberOfHeaderRows;
    var numberOfDataCols = this.numberOfDataCols;
    var numberOfDataRows = this.numberOfDataRows;
    var $selectionBox = $("#" + id + "-selectionBox");
    $selectionBox.css("border-style", "dashed");

    //prevent multiselection copy
    var regionsNum = Object.keys(this.oSelectedRegions).length;
    if (regionsNum > 1) {
    	var sMessage = this.bundleManager.getText("COPY_MULTIPLE_SELECTION_FAILED");
        this._postMsg(sap.fpa.ui.infra.common.Message.Type.ERROR, sMessage);
        return false;
    }

    var clipBoard = $("#" + this.getId() + "-gridClipBoard"), rows = [], cols = [];
    var oRegion = $.extend(true, {}, this.oSelectedRegions[Object.keys(this.oSelectedRegions)[0]]);
    var row = 0,
        col = 0;

    if (numberOfHeaderRows === 0 && numberOfHeaderCols === 0) { //summary        
        oRegion = this.getAdaptedRegion(oRegion);
    } else { //drillstate
        oRegion.y2 = (oRegion.y2 === POSITION_OF_ALL) ? numberOfHeaderRows + numberOfDataRows : oRegion.y2;
        oRegion.x2 = (oRegion.x2 === POSITION_OF_ALL) ? numberOfHeaderCols + numberOfDataCols : oRegion.x2;    
    }    

    for (row = oRegion.y1; row <= oRegion.y2; row++) {
        cols = [];

        for (col = oRegion.x1; col <= oRegion.x2; col++) {
            var cellValue = this._getGridCellCurrVal(col, row);
            var formatted = cellValue.val;
            cols.push(formatted);
        }

        rows.push(cols.join("\t"));
    }

    var rep = rows.join("\n");
    
    //fix for copy from empty cells
    rep += "\n";

    clipBoard.val(rep);
    //temp fix for last "\n" missing in summary copy
    clipBoard.data("cells", rep);
    if (!this.isOnDevice) { //avoid default input on device
        clipBoard.select();
    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onCut = function() {
    this._onCopy();
    // Update document.cccvlipboard so data fomatting is not lost on paste to summary
    this.fireReportCopy();
    this.onCut = true;
    this.cutRegion = this.oSelectedRegions[Object.keys(this.oSelectedRegions)[0]];
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onPasteInClipBoard = function(oEventData) {
    // Mac (or Chrome browser running on Mac) eats "keyup" events after a paste event.	
    var clipBoard = $("#" + this.getId() + "-gridClipBoard");
    var isMac = (navigator.userAgent.toLowerCase().search("macintosh") !== -1);
    if (isMac) {
        var clipContent = oEventData.originalEvent.clipboardData.getData("text/plain");
        clipBoard.val(clipContent);
        this._onPasteEnd();
        this.keyDownRecord["86"] = false;
    } else {
        clipBoard.val(""); //avoid Ctrk+V key down for long time
    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onPasteStart = function() {
    var clipBoard = $("#" + this.getId() + "-gridClipBoard");
    clipBoard.val("").select();
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onPasteEnd = function() {
    if ($.isEmptyObject(this.oFocusedCell)){
        return;
    }
    //if a special paste behaviour has been defined fire that event.
    // Note: The execution in this function will continue after that, however 
    var disableDefaultPaste = this.getDisableDefaultPaste() && (this.mEventRegistry.reportPaste !== undefined);
    if (disableDefaultPaste) {
        this.fireReportPaste({

        });
    }
    
    var clipBoard = $("#" + this.getId() + "-gridClipBoard");
    var lastStr = clipBoard.val().charAt(clipBoard.val().length - 1);
    var finalStr;
    if (lastStr === "\n") {
        finalStr = clipBoard.val().substring(0, clipBoard.val().length - 1);
    } else {
        finalStr = clipBoard.val();
    }
    if (finalStr === "") { //noting in clipboard
        if (this.onCut) {
            this.onCut = false;
        }

        return;
    }

    var rows = finalStr.split("\n");
    var oRegion = this.oSelectedRegions[Object.keys(this.oSelectedRegions)[0]];
    var startCol = oRegion.x1; //this.oFocusedCell.col; //first cell not necessarily to be focused cell, for example, paste to selected whole row/column while first cell is invisible
    var startRow = oRegion.y1; //this.oFocusedCell.row;
    var endCol = startCol, endRow = startRow;

    var that = this;
    var hashItems = {};
    var row = 0,
        col = 0;
    var item = null,
        currVal = null;
    if (this.onCut) {
        this.onCut = false;
        for (row = this.cutRegion.y1; row <= this.cutRegion.y2; row++) {
            for (col = this.cutRegion.x1; col <= this.cutRegion.x2; col++) {
                currVal = this._getGridCellCurrVal(col, row);
                item = {
                    col : col,
                    row : row,
                    val : currVal.val,
                    formatted : currVal.formatted
                };

                if (currVal.val !== "" && that._changeGridCellValue(col, row, {
                    val : "",
                    formatted : ""
                })) {
                    hashItems[col + "/" + row] = item;
                }
            }
        }
    }
    
    var aCellsOrNot = rows[0].split("\t");
    var key = "";
//    if (disableDefaultPaste) {
//        // Do nothing. Already fired. Not deleting this if-block to avoid code-formatting changes in last minute
//    }
	if(!disableDefaultPaste){
        if (rows.length === 1 && aCellsOrNot.length === 1) {
            var rowIndex = startRow, colIndex = startCol;
            endRow = rowIndex + oRegion.y2 - oRegion.y1;
            endCol = colIndex + oRegion.x2 - oRegion.x1;
            var currCol = 0;
	        for (rowIndex = startRow; rowIndex <= endRow; rowIndex++) {
	            var cells = rows[0].split("\t");
	            for (currCol = colIndex; currCol <= endCol; currCol++) {

	                var cell = cells[0];
	                var cellFormattedVal = parseFloat(cell);
	                key = currCol + "/" + rowIndex;
	                item = hashItems[key];
	                currVal = item || that._getGridCellCurrVal(currCol, rowIndex);
	                var hashItem = {
	                    col : currCol,
	                    row : rowIndex,
	                    val : currVal.val,
	                    formatted : currVal.formatted
	                };
	                //if not float number, use string "" instead of 0.0
	                if (that.getFreeEdit()) {
	                    cellFormattedVal = cell;
	                } else if (isNaN(cellFormattedVal) || cellFormattedVal.toString() !== cell) {
	                    cellFormattedVal = "";
	                }

	                if (currVal.val.toString() !== cell) {
	                    if (that._changeGridCellValue(currCol, rowIndex, {
	                        val : cellFormattedVal,
	                        formatted : ""
	                    })) {
	                        hashItems[key] = hashItem;
	                    }
	                }
	            }
	        }
	    } else {
	        $.each(rows, function(i, row) {
	            var rowIndex = startRow + i;
	            endRow = rowIndex;
	            if (!that.getFreeEdit() && rowIndex >= that.numberOfTotalRows) {
	                return false;
	            }
	            var cells = row.split("\t");
	            $.each(cells, function(j, cell) {
	                var colIndex = startCol + j;

	                endCol = colIndex;
	                if (!that.getFreeEdit() && colIndex >= that.numberOfTotalCols) {
	                    return false;
	                }
	                key = colIndex + "/" + rowIndex;
                    var item = hashItems[key], currVal = item ||
	                    that._getGridCellCurrVal(colIndex, rowIndex), cellFormattedVal = parseFloat(cell);
	                var hashItem;
	                if(that._isEditingFreeCell(colIndex, rowIndex)) {
                        hashItem = jQuery.extend(true, {}, that._initCustomCell(colIndex, rowIndex));
	                } else {
                        hashItem = {
                            col : colIndex,
                            row : rowIndex,
                            val : currVal.val,
                            formatted : currVal.formatted
                        };
	                }
	                 

	                if (that.getFreeEdit()) {
	                    cellFormattedVal = cell;
	                } else if (isNaN(cellFormattedVal) || cellFormattedVal.toString() !== cell) {
	                    cellFormattedVal = "";
	                }
	                if (currVal.val.toString() !== cell) {
	                    if (that._changeGridCellValue(colIndex, rowIndex, {
	                        val : cellFormattedVal,
	                        formatted : ""
	                    })) {
	                        hashItems[key] = hashItem;
	                    }
	                }
	            });
	        });
	    }
	    var undoItems = [];
	    $.each(hashItems, function(key, item) {
	        undoItems.push(item);
	    });

	    if (undoItems.length !== 0) {
	        this.undoStack.push(undoItems);
	        this.redoStack = [];
	    }

	    if (startCol !== endCol || startRow !== endRow) {
	        this.oSelectedRegions = {};
	        key = oRegion.x1 + "-" + oRegion.y1 + "-" + oRegion.x2 + "-" + oRegion.y2;
	        this.oSelectedRegions[key] = {
	            x1 : startCol,
	            y1 : startRow,
	            x2 : endCol,
	            y2 : endRow
	        };

	        this._redrawAffectCells();
	    }
    }
    
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onDelete = function() {
    if ($.isEmptyObject(this.oFocusedCell) ||
        (this.oFocusedCell.col === this.oEditingCell.col && this.oFocusedCell.row === this.oEditingCell.row)){
        return;
    }

    var that = this;

    $.each(this.oSelectedRegions, function(key, orgRegion) {
        that.removeCustomCellsInRegion(orgRegion);
    });

	var formulaBar = that.getFormulaBar();
	if(formulaBar) {
	    formulaBar.setText("");
	    formulaBar.setFormula("");
	}

	//this._redrawGrid();
};

/////////////////////////////////////////////////////////////////////////////////
//actions
/////////////////////////////////////////////////////////////////////////////////

sap.fpa.ui.control.analyticgrid.Grid.prototype._recalcViewableRange = function() {
    var id = this.getId(), $dataCells = $("#" + id + " td.dataCell");
    var $dataCell = null;
    if ($dataCells.length === 0) {
        return;
    }
    //	var	$table = $("#" + id + " .sapEpmUiControlAnalyticgridGridTableSurround td:first-child");
    var $leftTopCell = $("#" + id + " td.dataCell").first(),
    //		right = $table.css("width"),	
    //		bottom = $table.css("height"),
    right = this.frameWidth, bottom = this.frameHeight;
    var col = parseInt($leftTopCell.attr("col"),10), row = parseInt($leftTopCell.attr("row"),10), enabledRTL = sap.ui.getCore()
        .getConfiguration().getRTL();
    while (this.numberOfViewableDataCols > 0) {
        $dataCell = $("#" + id + " td.dataCell[col='" + (this.numberOfViewableDataCols - 1 + col) + "'][row='" +
            row + "']");
        if ($dataCell.length > 0 &&
            (!enabledRTL && ($dataCell.position().left + $dataCell.width() <= right || enabledRTL) &&
                $dataCell.position().left >= 0)) {
            break;
        }
        /*
        //remove "tabindex" from "invisible" cells to avoid bad layout when move to these cells
        var $collection = $("#" + id + " td[col='" + (this.numberOfViewableDataCols - 1 + col) + "']");
        $.each($collection, function(index, $cell) {
            $cell.removeAttribute("tabindex");
        });
         */

        this.numberOfViewableDataCols--;
    }

    while (this.numberOfViewableDataRows > 0) {
        $dataCell = $("#" + id + " td.dataCell[col='" + col + "'][row='" +
            (this.numberOfViewableDataRows - 1 + row) + "']");
        if ($dataCell.length > 0 && $dataCell.position().top + $dataCell.height() <= bottom) {
            break;
        }
        /*
        //remove "tabindex" from "invisible" cells to avoid bad layout when move to these cells
        var $collection = $("#" + id + " td[row='" + (this.numberOfViewableDataRows - 1 + row) + "']");
        $.each($collection, function(index, $cell) {
            $cell.removeAttribute("tabindex");
        });
         */

        this.numberOfViewableDataRows--;
    }

};

sap.fpa.ui.control.analyticgrid.Grid.prototype._getVisiblePosition = function(position, horizontal, positiveDirection) {
    var displayIndex = position, total = 0, begin = 0, stackArray = [];
    var i = 0;
    if (horizontal) {
        stackArray = this.hiddenDataColsStackArray;
        total = this.numberOfTotalCols;
        begin = this.numberOfHeaderCols;
    } else {
        stackArray = this.hiddenDataRowsStackArray;
        total = this.numberOfTotalRows;
        begin = this.numberOfHeaderRows;
    }

    displayIndex += begin;

    var len = stackArray.length;
    var stackInArray = null,
        oHiddenInStack = null;
    if (positiveDirection) {
        for (i = 0; i < len; i++) {
            stackInArray = stackArray[i];
            oHiddenInStack = stackInArray[0];

            if (displayIndex >= oHiddenInStack.begin && displayIndex < oHiddenInStack.begin + oHiddenInStack.count) {
                displayIndex = oHiddenInStack.begin + oHiddenInStack.count >= total ? oHiddenInStack.begin - 1
                    : oHiddenInStack.begin + oHiddenInStack.count;
            }
        }
    } else {
        for (i = len - 1; i >= 0; i--) {
            stackInArray = stackArray[i];
            oHiddenInStack = stackInArray[0];
            if (displayIndex >= oHiddenInStack.begin && displayIndex < oHiddenInStack.begin + oHiddenInStack.count) {
                displayIndex = oHiddenInStack.begin === begin ? oHiddenInStack.begin + oHiddenInStack.count
                    : oHiddenInStack.begin - 1;
            }
        }
    }

    return displayIndex - begin;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._getStatusOfDiplayIndex = function(displayIndex, horizontal) {
    var status = {
        hidden : false
    }, stackArray = [];
    var i = 0;
    if (horizontal) {
        stackArray = this.hiddenDataColsStackArray;
    } else {
        stackArray = this.hiddenDataRowsStackArray;
    }

    for (i = 0; i < stackArray.length; i++) {
        var stackInArray = stackArray[i], oHiddenInStack = stackInArray[0];

        if (displayIndex >= oHiddenInStack.begin && displayIndex < oHiddenInStack.begin + oHiddenInStack.count) {
            status.hidden = true;
            break;
        }
    }

    return status;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._calcFrameSize = function() {
    var $self = this.$(), sWidth = this.getWidth(), sHeight = this.getHeight(), iWidth = 0, iHeight = 0;

    if (sWidth.endsWith("px")) {
        iWidth = parseInt(sWidth.substr(0, sWidth.length - 2),10);
        if (isNaN(iWidth)) {
            iWidth = 0;
        }
    }
    if (sHeight.endsWith("px")) {
        iHeight = parseInt(sHeight.substr(0, sHeight.length - 2),10);
        if (isNaN(iHeight)) {
            iHeight = 0;
        }
    }

    this.frameWidth = $self.innerWidth() || iWidth || 1024;
    this.frameHeight = $self.innerHeight() || iHeight || 768;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._performAutoScroll = function() {
	var x = this.currMousePosition.x, y = this.currMousePosition.y;
	var $cell = $("#" + this.getId() + " td[x='" + x + "'][y='" + y + "']");

    if ($.isEmptyObject(this.mouseOverPosition) || !$.isNumeric(this.mouseOverPosition.x1)) {
        this.mouseOverPosition = {
            x1 : this.selectionStartCell.col,
            y1 : this.selectionStartCell.row,
            x2 : x,
            y2 : y
        };
    } else {
        var lastX = this.mouseOverPosition.x2;
        var lastY = this.mouseOverPosition.y2;
        this.mouseOverPosition = {
            x1 : lastX,
            y1 : lastY,
            x2 : x,
            y2 : y
        };
    }

    if (this.mouseOverPosition.x1 === this.mouseOverPosition.x2  && this.mouseOverPosition.y1 === this.mouseOverPosition.y2 && (this.autoScrollDeltaX || this.autoScrollDeltaY)) {
        this.isOutOfBox = true;
    }

	if (!this.isMouseDown) {
		this._resetAutoScroll();
        return;
    }	

    var moveWidthCurrent = this.oColWidth[x] ? (this.oColWidth[x]  + this.CELL_PADDING) : (this.CELL_WIDTH + this.CELL_PADDING);
    var moveHeightCurrent = this.oRowHeight[y] ? (this.oRowHeight[y] + this.CELL_PADDING) : (this.CELL_HEIGHT + this.CELL_PADDING);

    var deltaXToEdge = 0, deltaYToEdge = 0;
    var deltaX = 0, deltaY = 0, direction = 0;

    if ($cell && $cell.position() && $cell.position().left && $cell.position().top) {
        deltaXToEdge = this.frameWidth - $cell.position().left - moveWidthCurrent;
        deltaYToEdge = this.frameHeight - $cell.position().top - moveHeightCurrent;
    } 

    var $leftTopCell = null;    
    if (this.numberOfHeaderRows === 0 && this.numberOfHeaderCols === 0) {
        $leftTopCell = $("#" + this.getId() + " .sapEpmUiControlAnalyticgridGridTableInner td.dummyCell:first");
    } else {
        $leftTopCell = $("#" + this.getId() + " td[row='" + (this.numberOfHeaderRows + 1) + "'][col='" + (this.numberOfHeaderCols + 1) + "']");
    }

    var left = parseInt($leftTopCell.attr("x"),10) || 0, top = parseInt($leftTopCell.attr("y"),10) || 0;

    if (x < left && left !== this.numberOfHeaderCols) {
        deltaX = -1;
        direction = this.HORIZONTAL_AXIS;
    } else if (deltaXToEdge && deltaXToEdge < moveWidthCurrent) {
        deltaX = 1;
        direction = this.HORIZONTAL_AXIS;
    }

    if (deltaX !== 0 && this.autoScrollDeltaX === 0) {
        this.autoScrollDeltaX = deltaX;
    } else if (this.autoScrollDeltaX !== 0 && this.isOutOfBox) {
        deltaX = this.autoScrollDeltaX;
        direction = this.HORIZONTAL_AXIS;
    }

    if (y < top && top !== this.numberOfHeaderRows) {
        deltaY = -1;
        direction = this.VERTICAL_AXIS;
    } else if (deltaYToEdge && deltaYToEdge < moveHeightCurrent) {
        deltaY = 1;
        direction = this.VERTICAL_AXIS;
    }  

    if (deltaY !== 0 && this.autoScrollDeltaY === 0) {
        this.autoScrollDeltaY = deltaY;
    } else if (this.autoScrollDeltaY !== 0 && this.isOutOfBox) {
        deltaY = this.autoScrollDeltaY;
        direction = this.VERTICAL_AXIS;
    }

    if (deltaX !== 0 || deltaY !== 0) {
        this._performScroll(deltaX, deltaY, direction, null, true);
        if (this.isOutOfBox) {
            var destX = x + deltaX >= 0 ? x + deltaX : 0;
            var destY = y + deltaY >= 0 ? y + deltaY : 0;

            var oLastCell = this._getLastViewableCell(destX, destY, direction);
            if (deltaX > 0 || deltaY > 0) {
                this.currMousePosition = {x: oLastCell.x + deltaX, y: oLastCell.y + deltaY};
            } else if (deltaX === -1 || deltaY === -1) {
                this._setSelectionRegions(left + deltaX, top + deltaY);
            } else {
                this.currMousePosition = {x: destX, y: destY};	
            }
            this._setSelectionRegions(this.currMousePosition.x, this.currMousePosition.y);
        }
    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._setSelectionRegions = function(col, row) {
    var oRegion = {
        x1 : this.selectionStartCell.col,
        y1 : this.selectionStartCell.row,
        x2 : col,
        y2 : row
    };

    var flagNormalDirection = true;
    var temp = 0;
    if (oRegion.x1 !== this.POSITION_OF_INDEXCELL && oRegion.y1 !== this.POSITION_OF_INDEXCELL &&
        (oRegion.x2 === this.POSITION_OF_INDEXCELL || oRegion.y2 === this.POSITION_OF_INDEXCELL)) {
        flagNormalDirection = false;
    }

    if (oRegion.x1 > oRegion.x2) {
        temp = oRegion.x1;
        oRegion.x1 = oRegion.x2;
        oRegion.x2 = temp;
    }
    if (oRegion.y1 > oRegion.y2) {
        temp = oRegion.y1;
        oRegion.y1 = oRegion.y2;
        oRegion.y2 = temp;
    }

    //handle selection start from index cells
    if (oRegion.x1 === this.POSITION_OF_INDEXCELL && flagNormalDirection) {
        oRegion.x1 = 0;
        oRegion.x2 = this.POSITION_OF_ALL;
    }

    if (oRegion.y1 === this.POSITION_OF_INDEXCELL && flagNormalDirection) {
        oRegion.y1 = 0;
        oRegion.y2 = this.POSITION_OF_ALL;
    }

    if (oRegion.x2 === this.POSITION_OF_INDEXCELL || oRegion.y2 === this.POSITION_OF_INDEXCELL) {
        this._resetAutoScroll();
    }

    delete this.oSelectedRegions[this.lastSelectionKey];
    //this.oSelectedRegions[this.lastSelectionKey] = null;
    var currKey = oRegion.x1 + "-" + oRegion.y1 + "-" + oRegion.x2 + "-" + oRegion.y2;
    this.lastSelectionKey = currKey;
    this.oSelectedRegions[currKey] = oRegion;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._handleMouseOverAnyCell = function(item) {
    //when mouse up or dragging within the editing cell, disable multi-cell selection
    if (!this.isMouseDown || !$.isEmptyObject(this.oEditingCell) || this.cell2Resize) {
        return;
    }

    var currentTarget = $(item);

    var col = parseInt(currentTarget.attr("x"),10), row = parseInt(currentTarget.attr("y"),10);

    this.currMousePosition = {
        x : col,
        y : row
    };

    this._setSelectionRegions(col, row);

    var that = this;
    
    that._resetAutoScroll();
    that.timerAutoScroll = setInterval(function() {
        that._performAutoScroll();
    }, 200);

    that._redrawAffectCells();

    var oSelectedRegions = this.getSelectedMemberContext();

    var iCol = this.oFocusedCell.col, iRow = this.oFocusedCell.row;
    var oFocusedCellContext = this._memberContextOfDataCell(iCol, iRow);
    setTimeout(jQuery.proxy(function() { //make UI event asyncronized
        this.fireSelectionChanged({
            status : "moving",
            focusedCell : oFocusedCellContext,
            selectedRegions : oSelectedRegions
        });
    }, this), 1);
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._withinSelectionRange = function(x, y, selectionRange) {
    var minX, maxX, minY, maxY;
    var allX = false, allY = false;

    //process x
    minX = Math.min(selectionRange.x1, selectionRange.x2);
    maxX = Math.max(selectionRange.x1, selectionRange.x2);
    allX = selectionRange.x1 === this.POSITION_OF_ALL || selectionRange.x2 === this.POSITION_OF_ALL;

    //process Y
    minY = Math.min(selectionRange.y1, selectionRange.y2);
    maxY = Math.max(selectionRange.y1, selectionRange.y2);
    allY = selectionRange.y1 === this.POSITION_OF_ALL || selectionRange.y2 === this.POSITION_OF_ALL;

    return ((x >= minX && x <= maxX) || allX) && ((y >= minY && y <= maxY) || allY);
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._performMove = function(delta, direction, oEventData) {
    var oGrid = this;
    var col = this.oFocusedCell.col;
    var row = this.oFocusedCell.row;
    var tabKey = oEventData.keyCode === 9;
    var deltaX = 0, deltaY = 0;
    var x = col, y = row;
    var valid = true;

    if(oEventData.shiftKey) {
        //for shift move, target x, y is calculated based on selection region
        $.each(this.oSelectedRegions, function(key, selection) {
            //find the selection which holds current focus
            if(oGrid._withinSelectionRange(col, row, selection)){

                if (direction === oGrid.VERTICAL_AXIS) {
                    //ignore if y is selected on all
                    if(selection.y1 === oGrid.POSITION_OF_ALL
                        || selection.y2 === oGrid.POSITION_OF_ALL) {
                        valid = false;
                    } else {
                        y = (y === selection.y1) ? selection.y2 : selection.y1;
                        x = (x === selection.x1) ? selection.x2 : selection.x1;
                        if(y + delta >= 0) {
                            y = y + delta;
                            deltaY = delta;
                        }
                    }
                } else {
                    //ignore if x is selected on all
                    if(selection.x1 === oGrid.POSITION_OF_ALL
                        || selection.x2 === oGrid.POSITION_OF_ALL) {
                        valid = false;
                    } else {
                        y = (y === selection.y1) ? selection.y2 : selection.y1;
                        x = (x === selection.x1) ? selection.x2 : selection.x1;
                        if(x + delta >= 0) {
                            x = x + delta;
                            deltaX = delta;
                        }
                    }
                }
            }
        });
    } else {
        //for normal move, target x, y is calculated based on focused cell
        if (direction === this.VERTICAL_AXIS) {
            if (row + delta >= 0) {
                y = row + delta;
                deltaY = delta;
            }
        } else {
            if (col + delta >= 0) {
                x = col + delta;
                deltaX = delta;
            }
        }
    }

    //only do the operation if it's valid move
    if(valid) {
        //perform scroll if needed
        var moveWidthCurrent = this.oColWidth[col] ? (this.oColWidth[col]  + this.CELL_PADDING) : (this.CELL_WIDTH + this.CELL_PADDING);
        var moveHeightCurrent = this.oRowHeight[row] ? (this.oRowHeight[row] + this.CELL_PADDING) : (this.CELL_HEIGHT + this.CELL_PADDING);
        var moveWidthNext = this.oColWidth[x] ? (this.oColWidth[x]  + this.CELL_PADDING) : (this.CELL_WIDTH + this.CELL_PADDING);
        var moveHeightNext = this.oRowHeight[y] ? (this.oRowHeight[y] + this.CELL_PADDING) : (this.CELL_HEIGHT + this.CELL_PADDING);

        var $cellCurrent = $("#" + this.getId() + " td[x='" + col + "'][y='" + row + "']");
        var $cellNext = $("#" + this.getId() + " td[x='" + x + "'][y='" + y + "']");

        var deltaMoveX = 0, deltaMoveY = 0;

        if ($cellNext && $cellNext.position() && $cellNext.position().left && $cellNext.position().top) {
            deltaMoveX = this.frameWidth - $cellNext.position().left - moveWidthNext;
            deltaMoveY = this.frameHeight - $cellNext.position().top - moveHeightNext;
        } else {
            deltaMoveX = this.frameWidth - $cellCurrent.position().left - moveWidthCurrent - (this.CELL_WIDTH + this.CELL_PADDING);
            deltaMoveY = this.frameHeight - $cellCurrent.position().top - moveHeightCurrent - (this.CELL_HEIGHT + this.CELL_PADDING);
        }

        var $leftTopCell = null;    
        if (this.numberOfHeaderRows === 0 && this.numberOfHeaderCols === 0) {
            $leftTopCell = $("#" + this.getId() + " .sapEpmUiControlAnalyticgridGridTableInner td.dummyCell:first");
        } else {
            $leftTopCell = $("#" + this.getId() + " td[row='" + (this.numberOfHeaderRows + 1) + "'][col='" +
                (this.numberOfHeaderCols + 1) + "']");
        }

        var left = parseInt($leftTopCell.attr("x"),10) || 0, top = parseInt($leftTopCell.attr("y"),10) || 0;

        if (deltaX !== 0 && ((x < left && left !== this.numberOfHeaderCols) || deltaMoveX < this.CELL_PADDING)) {
            this._performScroll(deltaX, deltaY, this.HORIZONTAL_AXIS, null, true);
        }

        if (deltaY !== 0 && ((y < top && top !== this.numberOfHeaderRows) || deltaMoveY < this.CELL_PADDING)) {
            this._performScroll(deltaX, deltaY, this.VERTICAL_AXIS, null, true);
        }

        if (x !== col || y !== row) {
        	if (x === this.POSITION_OF_ALL) {
        		x = this.POSITION_OF_INDEXCELL;
        	}
        	if (y === this.POSITION_OF_ALL) {
        		y = this.POSITION_OF_INDEXCELL;
        	}
            this._focusOnCell(x, y, oEventData.ctrlKey, oEventData.shiftKey, tabKey);
        }
    }

    
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._resetAutoScroll = function() {
	clearInterval(this.timerAutoScroll);
	this.timerAutoScroll = null;
	this.autoScrollDeltaX = 0;
	this.autoScrollDeltaY = 0;
	this.isOutOfBox = false;
	this.mouseOverPosition = {};
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._getLastViewableCell = function(x, y, direction) {
    
    var moveWidth = this.oColWidth[x] ? (this.oColWidth[x]  + this.CELL_PADDING) : (this.CELL_WIDTH + this.CELL_PADDING);
    var moveHeight = this.oRowHeight[y] ? (this.oRowHeight[y] + this.CELL_PADDING) : (this.CELL_HEIGHT + this.CELL_PADDING);

    var $cell = $("#" + this.getId() + " td[x='" + x + "'][y='" + y + "']");

    var deltaMoveX = 0, deltaMoveY = 0;

    if ($cell && $cell.position() && $cell.position().left && $cell.position().top) {
        deltaMoveX = this.frameWidth - $cell.position().left - moveWidth;
        deltaMoveY = this.frameHeight - $cell.position().top - moveHeight;
    } 

    if (direction === this.HORIZONTAL_AXIS) {
	    if (deltaMoveX < moveWidth) {
            return {x: x, y: y};
	    } else {
            return this._getLastViewableCell(++x, y, direction);
	    }
    } else {
	    if (deltaMoveY < moveHeight) {
            return {x: x, y: y};
	    } else {
            return this._getLastViewableCell(x, ++y, direction);
	    }
    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._performScroll = function(deltaX, deltaY, direction, oEventData,
    moveScrollBar) {
    var positionOfVScroll = this.positionOfVScroll, positionOfHScroll = this.positionOfHScroll, preventDefault = true;

    if (direction && this.VERTICAL_AXIS) {
        positionOfVScroll += deltaY;
        if (positionOfVScroll < this.firstViewableDataRow) {
            positionOfVScroll = this.firstViewableDataRow;
            preventDefault = false;
        }

        positionOfVScroll = this._getVisiblePosition(positionOfVScroll, false, deltaY > 0);
    }

    if (direction && this.HORIZONTAL_AXIS) {
        positionOfHScroll += deltaX;
        if (positionOfHScroll < this.firstViewableDataCol) {
            positionOfHScroll = this.firstViewableDataCol;
            preventDefault = false;
        }

        positionOfHScroll = this._getVisiblePosition(positionOfHScroll, true, deltaX > 0);
    }

    if (positionOfVScroll !== this.positionOfVScroll || positionOfHScroll !== this.positionOfHScroll) {
        if (positionOfVScroll !== this.positionOfVScroll) {
            if (this.oVScrollBar && (moveScrollBar || positionOfVScroll !== this.positionOfVScroll + deltaY)) {
                if (positionOfVScroll > this.lastViewableDataRow) {
                    this.oVScrollBar.setSteps(positionOfVScroll);
                }
                this.oVScrollBar.setScrollPosition(positionOfVScroll);
                this.oVScrollBar.rerender(); //TODO:
            }
            this.positionOfVScroll = positionOfVScroll;
        }

        if (positionOfHScroll !== this.positionOfHScroll) {
            if (this.oHScrollBar && (moveScrollBar || positionOfHScroll !== this.positionOfHScroll + deltaX)) {
                if (positionOfHScroll > this.lastViewableDataCol) {
                    this.oHScrollBar.setSteps(positionOfHScroll);
                }
                this.oHScrollBar.setScrollPosition(positionOfHScroll);
                this.oHScrollBar.rerender(); //TODO:
            }
            this.positionOfHScroll = positionOfHScroll;

        }

        //If you are editing one cell, it will be saved when scrolling.
        if (this.inEditMode) {
            var $focusedCell = $("#" + this.getId() + " td[x='" + this.oFocusedCell.col + "'][y='" +
                this.oFocusedCell.row + "']");
            var cellWidth = $focusedCell.css("width"), cellHeight = $focusedCell.css("height");
            this._endDataCellModification($focusedCell, cellWidth, cellHeight);
        }

        this._redrawGrid();
    }

    if (preventDefault && oEventData) {
        oEventData.preventDefault();
        oEventData.stopPropagation();
    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._performScrollOnDevice = function(deltaX, deltaY, direction, oEventData) {
    this._performScroll(deltaX, deltaY, direction, oEventData, true);
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._getCustomCell = function(x, y, all) {
	all = all || false;
    var cellKey = this._buildCellKey(x, y);
    var allRowKey = this._buildCellKey(this.POSITION_OF_ALL, y);
    var allColKey = this._buildCellKey(x, this.POSITION_OF_ALL);
    var cell = this.hashOfCustomCellData[cellKey];
    var res, temp, temp2;

    //if we don't need to know ALL, immediately return
    if (!all) {
        res = cell;
        return res;
    }

    var allRow = this.hashOfCustomCellData[allRowKey];
    var allCol = this.hashOfCustomCellData[allColKey];


    if (allRow) {
        res = allRow;
    }

    if (allCol) {
        res = allCol;
    }

    if (cell) {
        temp = jQuery.extend(true, {}, cell);
        delete temp.x;
        delete temp.y;
        temp2 = jQuery.extend(true, {}, res);
        res = jQuery.extend(true, temp2, temp);
    }

    return res;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.updateCustomCells = function(selectedCoordinates, newSettings) {
    var changed = false;
    var i = 0,
        j = 0;
    for (i = 0; i < selectedCoordinates.length; i++) {
        for (j = 0; j < selectedCoordinates[i].length; j++) {
            var coordinate = selectedCoordinates[i][j];
            this._updateCustomCell(coordinate.x, coordinate.y, newSettings);
            changed = true;
        }
    }

    if (changed) {
        this._redrawGrid();
    }

};

/**
 * Enable/disable rendering for updating custom cells
 *
 * @author Torsten Abraham / Thorsten Petri
 * @param selectedCoordinates
 * @param newSettings
 * @param bRedraw
 * @param oFormatOptions
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype.updateCustomCellsBatch = function(selectedCoordinates, newSettings,
    bRedraw, bUndoStack) {
    var changed = false;
    var coordinate = null;
    var i = 0;
    var j = 0;
    var batching = this.getBatching();
    var oCell;
    var undoItems = [];

    for (i = 0; i < selectedCoordinates.length; i++) {
        for (j = 0; j < selectedCoordinates[i].length; j++) {
            coordinate = selectedCoordinates[i][j];
            oCell = this._initCustomCell(coordinate.x, coordinate.y);

            var undoItem = jQuery.extend(true, {}, oCell);

            undoItems.push(undoItem);
            this._updateCustomCell(coordinate.x, coordinate.y, newSettings, false);
            changed = true;
        }
    }

    //in batching process
    if (batching && bUndoStack) {
        this.batchQueue = this.batchQueue.concat(undoItems);
    }

    if (changed && bRedraw) {
        this._redrawGrid();
    }

};

/**
 * Enable/disable rendering for updating custom cells
 *
 * @author Torsten Abraham / Thorsten Petri
 * @param selectedCoordinates
 * @param newSettings
 * @param bRedraw
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype.updateCustomCell = function(x, y, newSettings,
    bRedraw) {

    this._updateCustomCell(x, y, newSettings);


    if (bRedraw) {
        this._redrawGrid();
    }

};

sap.fpa.ui.control.analyticgrid.Grid.prototype._updateCustomCell = function(x, y, properties, overwrite) {
    // parse coordinates to integer values
    x = parseInt(x, 10);
    y = parseInt(y, 10);
    var key = this._buildCellKey(x, y);
    var oCell = this._initCustomCell(x, y);
    var valueChanged = properties.val !== undefined && (properties.val+"") !== (oCell.val+"");
    var that = this;
    overwrite = overwrite || false;
    var i = 0,
        l= 0;

    if(overwrite) {
        this.hashOfCustomCellData[key] = properties;
    } else {
        jQuery.extend(true, this.hashOfCustomCellData[key], properties);
    }

    if (this.lastViewableDataRow < y) {
        this.lastViewableDataRow = y;
    }

    if (this.lastViewableDataCol < x) {
        this.lastViewableDataCol = x;
    }

    //if we try to update the cell value, we should check if this cell is used in other cell formulas
    if (this.hashOfFormulaRefs && this.hashOfFormulaRefs[key] && this.hashOfFormulaRefs[key].length > 0 && valueChanged) {
        var aChangedList = [];
        for(i = 0, l = this.hashOfFormulaRefs[key].length; i < l; i++) {
            var cellObj = jQuery.extend(true, {}, this.hashOfFormulaRefs[key][i]);
            var cellValueObj = jQuery.extend(true, {}, this._applyFormulaOnCell(cellObj));
            aChangedList.push({
                x: cellObj.x,
                y: cellObj.y,
                value: cellValueObj
            });
            // this._updateCustomCell(cellObj.x, cellObj.y, cellValueObj);

            // var changedKey = this._buildCellKey(cellObj.x, cellObj.y);
            // this.modifiedCustomCells[changedKey] = this.hashOfCustomCellData[changedKey];
        }

        setTimeout(function(){
            for(i = 0; i < aChangedList.length; i++) {
                var oChangedItem = aChangedList[i];
                that.changeGridCellValue(oChangedItem.x, oChangedItem.y, oChangedItem.value);
            }
        }, 0);
    }


    return oCell;
};

/**
 * Empty custom cells accordingly to the coordinates you pass
 *
 * @author Thorsten Petri
 * @param selectedCoordinates
 * @param options
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype.removeCustomCell = function(selectedCoordinates, options) {
	var sKey = null;
	options = options || {};
    var i = 0,
        j = 0;
    var emptyCustomCell = {
        val : "",
        editValue: "",
        formatted : "",
        styles: {},
        flags : sap.fpa.ui.control.infra.constants.Analyticgrid.CELL_FLAG.EDITABLE
    };
    for (i = 0; i < selectedCoordinates.length; i++) {
		for (j = 0; j < selectedCoordinates[i].length; j++) {
			this._removeFormulaOnCell(selectedCoordinates[i][j]);
		}
	}

	for (i = 0; i < selectedCoordinates.length; i++) {
		for (j = 0; j < selectedCoordinates[i].length; j++) {
			sKey = this._buildCellKey(selectedCoordinates[i][j].x, selectedCoordinates[i][j].y);
			this._changeGridCellValue(selectedCoordinates[i][j].x, selectedCoordinates[i][j].y, emptyCustomCell, options);
			delete this.hashOfCustomCellData[sKey];
		}
	}
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.removeCustomCellsInRegion = function(orgRegion) {
    var region = this.getAdaptedRegion(orgRegion);

    var colStart = region.x1, colEnd = region.x2;
    var rowStart = region.y1, rowEnd = region.y2;
    var coordinates = [];
    var i, j;
    var undoItems = [];

    for (i = colStart; i <= colEnd; i++) {
        for (j = rowStart; j <= rowEnd; j++) {
            var coordinate = {
                x : i,
                y : j
            };
            var oCell = $.extend(true, {}, this.getCellObjectByCoordinate(i, j));            

            if (oCell.val === "" && oCell.formatted === "") {
            	if (!$.isEmptyObject(oCell.styles)) {
            		coordinates.push(coordinate);
            	}
            } else {
            	var oUndoCell = {};
            	oUndoCell.col = coordinate.x;
            	oUndoCell.row = coordinate.y;
            	oUndoCell.val = oCell.val;
            	oUndoCell.formatted = oCell.formatted;

            	coordinates.push(coordinate);
				undoItems.push(oUndoCell);            	
            }            
        }
    }

    this.removeCustomCell([coordinates], {overwrite: true});
    if (undoItems.length !== 0) {
        this.undoStack.push(undoItems);
        this.redoStack = [];
    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._initCustomCell = function(x, y) {
    //only init when the hash value does not exist
    var oCustomCell = this._getCustomCell(x, y);
    if (oCustomCell) {
        return oCustomCell;
    }

    var key = this._buildCellKey(x, y);
    var oFormatTypes = this.getFormatTypes();
    var CELL_FLAG = sap.fpa.ui.control.infra.constants.Analyticgrid.CELL_FLAG;

    oCustomCell = {
        x : x,
        y : y,
        val : "",
        formatted : "",
        flags : CELL_FLAG.EDITABLE
    };

    // if format types have been provided, generate format specification for each custom cell
    if(oFormatTypes) {
    	oCustomCell.formattingSpecification = {
    		value: 0,
            formatted: "",
            type: oFormatTypes.UNKNOWN,
            settings: {}
    	};
    }

    this.hashOfCustomCellData[key] = oCustomCell;

    return oCustomCell;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._buildCellDisplay = function(oCell) {
    var oCellDisplay = {
        classes : [],
        attributes : {
            x: 0,
            y: 0
        },
        styles : {},
        innerHtml : "",
        beginHtml : ""
    };

    var CELL_TYPE = sap.fpa.ui.control.analyticgrid.Grid._CELL_TYPE, MEMBER_FLAG = sap.fpa.ui.control.infra.constants.Analyticgrid.MEMBER_FLAG, CELL_FLAG = sap.fpa.ui.control.infra.constants.Analyticgrid.CELL_FLAG;
    var MAX_INDENT_LEVEL = this.MAX_INDENT_LEVEL;

    oCellDisplay.attributes.x = oCell.x;
    oCellDisplay.attributes.y = oCell.y;

    oCellDisplay.classes.push("general");
    oCellDisplay.classes.push("generalCell");
    
//    if(oCell.invalid){
//        oCellDisplay.classes.push("sapDSErrorCell2");
//    }

    switch (oCell.type) {
    case CELL_TYPE.DATA_CELL:
        oCellDisplay.classes.push("data");
        oCellDisplay.classes.push("dataCell");
        if (oCell.flags & CELL_FLAG.EDITABLE) {
            oCellDisplay.attributes.editable = true;
            oCellDisplay.classes.push("editable");
        } else {
            oCellDisplay.attributes.editable = false;
        }
        if (oCell.flags & CELL_FLAG.LOCKED) {
            oCellDisplay.attributes.editable = false;
            oCellDisplay.classes.push("locked");
        }
        if (oCell.flags & CELL_FLAG.COMMENTS_FILLED) {
            oCellDisplay.attributes.commentsfilled = true;
            oCellDisplay.classes.push("commentsfilled");
        } else {
            oCellDisplay.attributes.commentsfilled = false;
        }
        oCellDisplay.attributes.tabIndex = 1;
        break;
    case CELL_TYPE.NULL_CELL:
        oCellDisplay.classes.push("dataCell");
        oCellDisplay.classes.push("nullCell");
        oCellDisplay.attributes.editable = true;
        oCellDisplay.attributes.tabIndex = 0;
        oCellDisplay.classes.push("editable");
        break;
    case CELL_TYPE.COL_INDEX_CELL:
        oCellDisplay.classes.push("index");
        oCellDisplay.classes.push("colIndexCell");
        //oCellDisplay.styles.push("cursor", "crosshair"); //TODO: replace with down arrow cursor file
        break;
    case CELL_TYPE.ROW_INDEX_CELL:
        oCellDisplay.classes.push("index");
        oCellDisplay.classes.push("rowIndexCell");
        //oCellDisplay.styles.push("cursor", "crosshair"); //TODO: replace with right arrow cursor file
        break;
    case CELL_TYPE.COL_DIMENSION_MEMBER:
        oCellDisplay.classes.push("dimMember");
        oCellDisplay.classes.push("colDimMemberCell");
        if (oCell.hasOwnProperty("level")) {
	    if (oCell.level >= MAX_INDENT_LEVEL) {
		oCellDisplay.classes.push("col-indent-" + MAX_INDENT_LEVEL);
	    } else {
		oCellDisplay.classes.push("col-indent-" + oCell.level);
	    }
        }
        if (oCell.flags & MEMBER_FLAG.EXPANDED) {
            oCellDisplay.classes.push("expanded");
        } else if (oCell.flags & MEMBER_FLAG.EXPANSIBLE) {
            oCellDisplay.classes.push("expansible");
        }
        oCellDisplay.attributes.tabIndex = 0;
        break;
    case CELL_TYPE.COL_DIMENSION_MEMBER_ATTR:
        oCellDisplay.classes.push("dimMemberAttr");
        oCellDisplay.classes.push("colDimMemberAttrCell");
        break;
    case CELL_TYPE.ROW_DIMENSION_MEMBER:
        oCellDisplay.classes.push("dimMember");
        oCellDisplay.classes.push("rowDimMemberCell");
        if (oCell.hasOwnProperty("level")) {
	    if (oCell.level >= MAX_INDENT_LEVEL) {
		oCellDisplay.classes.push("row-indent-" + MAX_INDENT_LEVEL);
	    } else {
		oCellDisplay.classes.push("row-indent-" + oCell.level);
	    }
        }
        if (oCell.flags & MEMBER_FLAG.EXPANDED) {
            oCellDisplay.classes.push("expanded");
        } else if (oCell.flags & MEMBER_FLAG.EXPANSIBLE) {
            oCellDisplay.classes.push("expansible");
        }
        oCellDisplay.attributes.tabIndex = 0;
        if (oCell.polling) {
            oCellDisplay.attributes.editable = true;
            oCellDisplay.classes.push("editable");
        } else {
            oCellDisplay.attributes.editable = false;
        }
        break;
    case CELL_TYPE.ROW_DIMENSION_MEMBER_ATTR:
        oCellDisplay.classes.push("dimMemberAttr");
        oCellDisplay.classes.push("rowDimMemberAttrCell");
        break;
    case CELL_TYPE.COL_DIMENSION_HEADER:
        oCellDisplay.classes.push("dimHeader");
        oCellDisplay.classes.push("colDimHeaderCell");
        break;
    case CELL_TYPE.COL_DIMENSION_HEADER_ATTR:
        oCellDisplay.classes.push("dimHeaderAttr");
        oCellDisplay.classes.push("colDimHeaderAttrCell");
        break;
    case CELL_TYPE.ROW_DIMENSION_HEADER:
        oCellDisplay.classes.push("dimHeader");
        oCellDisplay.classes.push("rowDimHeaderCell");
        break;
    case CELL_TYPE.ROW_DIMENSION_HEADER_ATTR:
        oCellDisplay.classes.push("dimHeaderAttr");
        oCellDisplay.classes.push("rowDimHeaderAttrCell");
        break;
    case CELL_TYPE.DUMMY_CELL:
        oCellDisplay.classes.push("dummy");
        oCellDisplay.classes.push("dummyCell");
        oCellDisplay.attributes.tabIndex = 0;
        if (oCell.flags & CELL_FLAG.EDITABLE) {
            oCellDisplay.attributes.editable = true;
            oCellDisplay.classes.push("editable");
        } else {
            oCellDisplay.attributes.editable = false;
        }
        break;
    case CELL_TYPE.DIMENSION_SELECTOR:
        oCellDisplay.classes.push("dimSelector");
        oCellDisplay.classes.push("dimSelectorCell");
        break;
    case CELL_TYPE.COL_TINYBAR:
        oCellDisplay.classes.push("tinyBar");
        oCellDisplay.classes.push("colTinyBar");
        break;
    case CELL_TYPE.ROW_TINYBAR:
        oCellDisplay.classes.push("tinyBar");
        oCellDisplay.classes.push("rowTinyBar");
        break;
    default:
        oCellDisplay.classes.push("dummy");
        oCellDisplay.classes.push("dummyCell");
        oCellDisplay.attributes.tabIndex = 0;
        if (oCell.flags & CELL_FLAG.EDITABLE) {
            oCellDisplay.attributes.editable = true;
            oCellDisplay.classes.push("editable");
        } else {
            oCellDisplay.attributes.editable = false;
        }
        break;
    }
    
    //execute the externally registered cell decorators
    this._cellDecorators.forEach(function(oCellDecorator) {
        oCellDecorator.decorateGridCell(oCell, oCellDisplay);
    });

    if (oCell.selected) {
        oCellDisplay.classes.push("selected");
    }
    if (oCell.highlighted) {
        oCellDisplay.classes.push("highlighted");
    }
    if (oCell.focused) {
        oCellDisplay.classes.push("focused");
    }
    if (oCell.markStyle) {
        oCellDisplay.classes.push(oCell.markStyle);
    }
    if (oCell.modified) {
        oCellDisplay.classes.push("modified");
    }
    if (oCell.editing) {
        oCellDisplay.classes.push("editing");
    }
    if (oCell.colSpan) {
        oCellDisplay.attributes.colspan = oCell.colSpan;
    }
    if (oCell.rowSpan) {
        oCellDisplay.attributes.rowspan = oCell.rowSpan;
    }
    if (oCell.attrs) {
        jQuery.each(oCell.attrs, function(key, val) {
            oCellDisplay.attributes[key] = val;
        });
    }
    if (oCell.topDataCell) {
        oCellDisplay.classes.push("topDataCell");
    }
    if (oCell.leftDataCell) {
        oCellDisplay.classes.push("leftDataCell");
    }

    if (oCell.styles) {
        jQuery.each(oCell.styles, function(key, val) {
            oCellDisplay.styles[key] = val;
        });
    }

    if (oCell.attributes) {
        jQuery.each(oCell.attributes, function(key, val) {
            oCellDisplay.attributes[key] = val;
        });
    }

    if (oCell.classes) {
        jQuery.each(oCell.classes, function(key, val) {
            oCellDisplay.classes.push(val);
        });
    }

    var cssClassOfCondition = this._cssClassFromFormattingCondition(oCell.condition);
    if (cssClassOfCondition) {
        oCellDisplay.classes.push(cssClassOfCondition);
    }


    var cellHtml = "";

    if(typeof oCell.val !== "object"){
        cellHtml = jQuery.sap.encodeHTML(oCell.val.toString());
    }
    
    if(oCell.val === null || oCell.val === undefined) {
		cellHtml = "";
	}

    if (typeof oCell.val === "object" && oCell.val !== null && oCell.val !== undefined) {
        if (!this.formatedCellsIdx) {
            this.formatedCellsIdx = [];
        }
        this.formatedCellsIdx.push(this._convertToIndex(oCell.x, oCell.y));//with order
        oCellDisplay.innerHtml = oCell.val;
        return oCellDisplay;
    }
    if (oCell.width || oCell.height || oCell.minWidth || oCell.minHeight) {
        oCellDisplay.innerHtml += "<div";
        oCellDisplay.innerHtml += " style='position:relative;";
        if (oCell.width) {
            oCellDisplay.styles.width = oCell.width + "px";
        }
        if (oCell.minWidth) {
            oCellDisplay.styles["min-width"] = oCell.minWidth + "px";
        }
        if (oCell.height) {
            if (oCell.type === CELL_TYPE.ROW_INDEX_CELL) {
                var height = oCell.height.toString() + "px;";
                oCellDisplay.innerHtml += "height:100%;line-height:";
                oCellDisplay.innerHtml += height;
            }
            oCellDisplay.styles.height = oCell.height + "px";
        }
        if (oCell.minHeight) {
            oCellDisplay.styles["min-height"] = oCell.minHeight + "px";
        }
        if (oCell.type === CELL_TYPE.ROW_TINYBAR) {
            if (sap.ui.getCore().getConfiguration().getRTL()) {
                oCellDisplay.innerHtml += "transform:rotate(270deg);";
                oCellDisplay.innerHtml += "-ms-transform:rotate(270deg);";
                oCellDisplay.innerHtml += "-webkit-transform:rotate(270deg);";
            } else {
                oCellDisplay.innerHtml += "transform:rotate(90deg);";
                oCellDisplay.innerHtml += "-ms-transform:rotate(90deg);";
                oCellDisplay.innerHtml += "-webkit-transform:rotate(90deg);";
            }
            cellHtml = this._tinyBarOfRow();
        } else if (oCell.type === CELL_TYPE.COL_TINYBAR) {
            cellHtml = this._tinyBarOfCol();
        }
        oCellDisplay.innerHtml += "'";

//         if(oCell.type === CELL_TYPE.ROW_DIMENSION_MEMBER || oCell.type === CELL_TYPE.COL_DIMENSION_MEMBER) {
//            if(oCell.flags & MEMBER_FLAG.EXPANDED) {
//                oCellDisplay.innerHtml += ' class="dimMemberExpanded"';
//            } else if(oCell.flags &  MEMBER_FLAG.EXPANSIBLE) {
//                oCellDisplay.innerHtml += ' class="dimMemberExpansible"';
//            }
//         }
        oCellDisplay.innerHtml += ">";
    }
//	else {
//     if(oCell.type === CELL_TYPE.ROW_DIMENSION_MEMBER || oCell.type === CELL_TYPE.COL_DIMENSION_MEMBER) {
//        if(oCell.flags & MEMBER_FLAG.EXPANDED) {
//            oCellDisplay.classes.push("dimMemberExpanded");
//        } else if(oCell.flags & MEMBER_FLAG.EXPANSIBLE) {
//            oCellDisplay.classes.push("dimMemberExpansible");
//        }
//     }
//    }

    oCellDisplay.innerHtml += cellHtml;

    if (oCell.resizableCol) {
        oCellDisplay.innerHtml += "<div";
        oCellDisplay.innerHtml += " style='position:absolute;z-index:1000;display:block;cursor:e-resize;height:100%;width:7px;top:0px;right:-5px'";
        oCellDisplay.innerHtml += " class='resizableCol'";
        oCellDisplay.innerHtml += "></div>";
    }

    if(oCell.tooltip) {
    	oCellDisplay.innerHtml += "<div";
        oCellDisplay.innerHtml += " class='colHeaderTooltip'";
        oCellDisplay.innerHtml += "></div>";
    }

    if (oCell.resizableRow) {
        oCellDisplay.innerHtml += "<div";
        oCellDisplay.innerHtml += " style='position:absolute;z-index:1000;display:block;cursor:s-resize;width:100%;height:7px;left:0px;bottom:-5px'";
        oCellDisplay.innerHtml += " class='resizableRow'";
        oCellDisplay.innerHtml += "></div>";
    }

    if (oCell.width || oCell.height) {
        oCellDisplay.innerHtml += "</div>";
    }

    if (oCell.starred) {
        oCellDisplay.beginHtml += "<span class='starred'></span>";
    }

    if (oCell.type === CELL_TYPE.ROW_DIMENSION_MEMBER || oCell.type === CELL_TYPE.COL_DIMENSION_MEMBER) {
        if (oCell.flags & MEMBER_FLAG.EXPANDED) {
            oCellDisplay.beginHtml += "<span class='dimMemberExpanded dimMemberIcon'></span>";
        } else if (oCell.flags & MEMBER_FLAG.EXPANSIBLE) {
            oCellDisplay.beginHtml += "<span class='dimMemberExpansible dimMemberIcon'></span>";
        } else if (oCell.type === CELL_TYPE.ROW_DIMENSION_MEMBER) {
            oCellDisplay.beginHtml += "<span class='dimMemberLeaf dimMemberIcon'></span>";
        }
    }else if (oCell.type === CELL_TYPE.DIMENSION_SELECTOR || oCell.type === CELL_TYPE.DIMENSION_SELECTOR) {
        oCellDisplay.beginHtml += "<span class='dimSelectorIcon'></span>";
    }

    return oCellDisplay;
};


sap.fpa.ui.control.analyticgrid.Grid.prototype._cssClassFromFormattingCondition = function(condition) {
    var cssClass = "";

    var _CONDITION = sap.fpa.ui.control.analyticgrid.Grid._CONDITION;
    switch (condition) {
    case _CONDITION.GREEN:
        cssClass = "sapEpmUiControlConditionFormatterIconNormal";
        break;
    case _CONDITION.YELLOW:
        cssClass = "sapEpmUiControlConditionFormatterIconCaution";
        break;
    case _CONDITION.RED:
        cssClass = "sapEpmUiControlConditionFormatterIconError";
        break;
    }

    return cssClass;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._redrawGrid = function() {
    var pid = this.profilingEnabled && this._PROFILER_.begin("analyticgrid.Grid._redrawGrid");

    //we only rebind volatile events when redraw
    this._shutdownVolatileEventHandlers();
    this._doCalc();
    var rowIndex = 0,
        colIndex = 0;
    var i = 0;
    for (rowIndex = 0; rowIndex < this.arrViewableCells.length; rowIndex++) {
        var rowCells = this.arrViewableCells[rowIndex];
        for (colIndex = 0; colIndex < rowCells.length; colIndex++) {
            var cell = rowCells[colIndex], cellDisplay = this._buildCellDisplay(cell), attributes = cellDisplay.attributes, styles = cellDisplay.styles, property;

            if (cell.x === this.POSITION_OF_TINYBAR || cell.y === this.POSITION_OF_TINYBAR) {
                continue; //skip tinybar to avoid tiny bar events being reset
            }

            //TODO: this.arrTableDomCache might be different size to this.arrViewableCells because of resize column width or row height
            var jCell = this.arrTableDomCache[rowIndex] && this.arrTableDomCache[rowIndex][colIndex];
            if (!jCell) {
                continue;
            }

            if (cell.val !== "") {
                cellDisplay.attributes.title = cell.val;
            } else {
                cellDisplay.attributes.title = "";
            }

            //clear relevant attribute first
            jCell.removeAttr("style rowspan colspan");

            for (property in attributes) {
                if (attributes.hasOwnProperty(property)) {
                    jCell.attr(property, attributes[property]);
                }
            }

            var sCellClasses = cellDisplay.classes.join(" ");
            jCell.attr("class", sCellClasses);

            // if(cell.y === this.POSITION_OF_INDEXCELL || cell.x === this.POSITION_OF_INDEXCELL) {
            for (property in styles) {
                if (styles.hasOwnProperty(property)) {
                    jCell.css(property, styles[property]);
                }
            }

            if (typeof cellDisplay.innerHtml !== "object") {
                jCell.html(cellDisplay.innerHtml);
            } else {
                var cellWidth = jCell.css("width"), cellHeight = jCell.css("height");
                var divContainerId = "divContainer" + cell.idx.toString();
                jCell.html("<div id ='" + divContainerId + "' style= 'position:relative;width:" + cellWidth +
                    ";height:" + cellHeight + ";'>" + "</div>");
            }
            jCell.prepend(cellDisplay.beginHtml);
        }
    }

    this._recalcViewableRange();
    this._drawSelectionBox();
    this._drawCellDecorator();
    var viewableFormatCells = this._calculateFormatControlCells(), iCellidx = viewableFormatCells.idx;
    if (viewableFormatCells.length > 0) {
        for (i = 0; i < viewableFormatCells.length; i++) {
            (this.modifiedCells[iCellidx].formatted ||
                this.arrViewableCells[viewableFormatCells[i].rowIndex][viewableFormatCells[i].colIndex].val || this.hashOfCellData[iCellidx].formatted)
                .placeAt("divContainer" + iCellidx.toString(), "only");
        }
    }

    this._startVolatileEventHandlers();

    if(this.profilingEnabled){
		this._PROFILER_.end(pid);
	}
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._redrawAffectCells = function() {
    var pid = this.profilingEnabled && this._PROFILER_.begin("analyticgrid.Grid._redrawAffectCells");
    var id = this.getId(), hasCellEditing = !$.isEmptyObject(this.oEditingCell), that = this, highlightedCols = {}, highlightedRows = {};
    var POSITION_OF_ALL = this.POSITION_OF_ALL;
    var oGrid = this;
    var x = 0, y = 0;
    var i = 0, j = 0;
    $("#" + id + " td.selected").removeClass("selected");
    $("#" + id + " td.highlighted").removeClass("highlighted");
    $("#" + id + " td.focused").removeClass("focused");
    $("#" + id + " td.editing").removeClass("editing");

    jQuery.each(this.oSelectedRegions, function(key, oRegion) {
        var customHighlightClass = oGrid.selectionBoxOption.customHighlightClass;
        var bAddCustomerStyle = customHighlightClass && customHighlightClass !=="";
        var $cell, $leftCell, $topCell;
        
        if (oRegion.x2 === POSITION_OF_ALL && oRegion.y2 === POSITION_OF_ALL) {
            $cell = $("#" + id + " td.dummyCell");
            $cell.addClass("selected"); 

            for (i = oRegion.y1 - 1; i >= 0; i--) {
                $topCell = $("#" + id + " [y='" + i + "']");
                $topCell.removeClass("selected");
            }

            for (j = oRegion.x1 - 1; j >= 0; j--) {
                $leftCell = $("#" + id + " [x='" + j + "']");
                $leftCell.removeClass("selected");
            }

            if(bAddCustomerStyle){
                $cell.addClass(customHighlightClass);
            }
            $("#" + id + " td.colIndexCell, #" + id + " td.rowIndexCell").addClass("highlighted");
        } else if (oRegion.x2 === POSITION_OF_ALL) { //whole row
            for (y = oRegion.y1; y <= oRegion.y2; y++) {
                $cell = $("#" + id + " [y='" + y + "']");
                $cell.addClass("selected");

                for (i = oRegion.x1 - 1; i >= 0; i--) {
                    $leftCell = $("#" + id + " [x='" + i + "'][y='" + y + "']");
                    $leftCell.removeClass("selected");
                }
				if(bAddCustomerStyle){
					$cell.addClass(customHighlightClass);
				}
				$("#" + id + " td.colIndexCell[y='" + that.POSITION_OF_INDEXCELL + "']").addClass("highlighted");
            }
        } else if (oRegion.y2 === POSITION_OF_ALL) { //whole col
            for (x = oRegion.x1; x <= oRegion.x2; x++) {
                $cell = $("#" + id + " [x='" + x + "']");
                $cell.addClass("selected");

                for (i = oRegion.y1 - 1; i >= 0; i--) {
                    $topCell = $("#" + id + " [x='" + x + "'][y='" + i + "']");
                    $topCell.removeClass("selected");
                }

				if(bAddCustomerStyle){
					$cell.addClass(customHighlightClass);
				}
                $("#" + id + " td.rowIndexCell[x='" + that.POSITION_OF_INDEXCELL + "']").addClass("highlighted");
            }
        } else {
            for (x = oRegion.x1; x <= oRegion.x2; x++) {
                for (y = oRegion.y1; y <= oRegion.y2; y++) {
                    $cell = $("#" + id + " [x='" + x + "'][y='" + y + "']");//show the selected members.
                    $cell.addClass("selected");
					if(bAddCustomerStyle){
						$cell.addClass(customHighlightClass);
					}

                    highlightedCols[x] = true;
                    highlightedRows[y] = true;
                }
            }
        }
    });

    jQuery.each(highlightedCols, function(col) {
        $("#" + id + " td.colIndexCell[x='" + col + "'][y='" + that.POSITION_OF_INDEXCELL + "']").addClass(
            "highlighted");
    });

    jQuery.each(highlightedRows, function(row) {
        $("#" + id + " td.rowIndexCell[x='" + that.POSITION_OF_INDEXCELL + "'][y='" + row + "']").addClass(
            "highlighted");
    });

    $("#" + id + " td[x='" + this.oFocusedCell.col + "'][y='" + this.oFocusedCell.row + "']").addClass("focused");
    $("#" + id + " td.dataCell[x='" + this.oEditingCell.col + "'][y='" + this.oEditingCell.row + "']").addClass(
        "editing");

    if (hasCellEditing) {
        $("#" + id + " td.editing div").focus();
    } else {
        $("#" + id + " td.focused").focus();
    }

    this._drawSelectionBox();

	if(this.profilingEnabled){
		this._PROFILER_.end(pid);
	}
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._isCellEditable = function(idx) {
    var editable = true, CELL_FLAG = sap.fpa.ui.control.infra.constants.Analyticgrid.CELL_FLAG, MEMBER_FLAG = sap.fpa.ui.control.infra.constants.Analyticgrid.MEMBER_FLAG;
    var i = 0,
        dimension = null,
        member = null;
    if (this.hashOfCellData[idx]) {
        editable = this.hashOfCellData[idx].flags & CELL_FLAG.EDITABLE;
    } else {
        var col = idx % this.numberOfDataCols, row = Math.floor(idx / this.numberOfDataCols), tuple = [];

		if(col < 0 && row < 0) {
			return false;
		}

        if (this.colAxis) {
            tuple = this.colAxis.tuples[col];
            for (i = 0; i < tuple.length; i++) {
                dimension = this.colAxis.dimensions[i];
                member = dimension.members[tuple[i]];
                if (!(member.flags & MEMBER_FLAG.INPUT_READY)) {
                    editable = false;
                    break;
                }
            }
        }

        if (editable && this.rowAxis) {
            tuple = this.rowAxis.tuples[row];
            for (i = 0; i < tuple.length; i++) {
                dimension = this.rowAxis.dimensions[i];
                member = dimension.members[tuple[i]];
                if (!(member.flags & MEMBER_FLAG.INPUT_READY)) {
                    editable = false;
                    break;
                }
            }
        }
    }

    return editable;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._getGridCellCurrVal = function(x, y) {
    if (this._isEditingFreeCell(x, y)) {
        return this._getCustomCellCurrVal(x, y);
    } else if (this._isDataCell(x, y)) {
        return this._getDataCellCurrVal(x, y);
    } else if (this._isPoolMappingCell(x, y)) {
        return this._getPoolCellCurrVal(x, y);
    } else {
        return this._getHeaderCellCurrVal(x, y);
    }
};

/**
 * Checks whether the cell a the given coordinates is a pool cell or not (i.e. it is in the pool dimension column and
 * not a header cell).
 * 
 * @param x the x coordinate.
 * @param y the y coordinate
 * @returns true if the cell is a pool cell
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype._isPoolMappingCell = function(x, y) {
    return this.getPoolMapping() && y >= this.numberOfHeaderRows &&
        this.getPoolMapping().isPoolDimensionCellByCoordinates(x, y, this.rowAxis.dimensions);
};

/**
 * Build the "value" object for a pool cell. In this case val, editedValue and the formatted are set to the name of the
 * dimension member.
 * 
 * @param x the x coordinate
 * @param y the y coordinate
 * @returns an object containing the "val", "editValue" and "formatted" for the given cell
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype._getPoolCellCurrVal = function(x, y) {
    //in the oCell, the "val" is the id of the dimension meber and the "formatted" is the member name shown to the user 
    var oCell = this.getHeaderObject(x, y);

    if (!$.isEmptyObject(oCell)) {
        return {
            //we always take the formated value as for the pool cells we always use the dimension member descriptions and not the ids 
            val : oCell.formatted,
            editValue : oCell.formatted,
            formatted : oCell.formatted
        };
    }

    return {
        val : "",
        formatted : ""
    };

};

sap.fpa.ui.control.analyticgrid.Grid.prototype._getCustomCellCurrVal = function(x, y) {
    var oCell = this._getCustomCell(x, y);
    
    if (oCell && oCell.val !== null && oCell.val !== undefined) {
  //       oCell.unit = {};
  //       if (oCell["cell-reference"] && oCell["formattingSpecification"] && oCell["formattingSpecification"]["formatString"] && oCell["formattingSpecification"]["currencyUnit"]) {

		// 	//TODO: this is not real value, we need improve this later to caculate with real value
		// 	//{unitString: "", magnitude: 1000000, magnitudeString: "Million", formatString: "#,##0.00"}
		// 	oCell.unit = this._getCurrencyUint(oCell["formattingSpecification"]["formatString"]);

		// 	var suffix = oCell["formattingSpecification"]["currencyUnit"].suffix;
		// 	if (suffix !== "%") {
		// 		oCell.suffix = oCell["formattingSpecification"]["formatString"].replace(/[\.|,|#|0|"|']/g, "").trim() + " " + oCell["formattingSpecification"]["currencyUnit"].suffix;
		// 	} else {
		// 		oCell.suffix = "";
		// 	}

		// 	oCell.referenced = true;
		// }

        return {
            val : oCell.val,
            editValue : oCell.editValue,
            formatted : oCell.formatted
            // type : oCell.type,
            // suffix : oCell.suffix,
            // unit : oCell.unit,
            // referenced : oCell.referenced
        };
    } else {
        return {
            val : "",
            editValue : "",
            formatted : ""
        };
    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._getDataCellCurrVal = function(x, y) {
    var idx = this._convertToIndex(x, y);

    if (this.modifiedCells[idx]) {
        return {
            val : this.modifiedCells[idx].val,
            formatted : this.modifiedCells[idx].formatted
        };
    } else if (this.hashOfCellData[idx]) {
        return {
            val : this.hashOfCellData[idx].val,
            formatted : this.hashOfCellData[idx].formatted
        };
    } else {
        return {
            val : "", //should be float val, but special handling for empty cell
            formatted : ""
        };
    }
};

/* this function is used for copy only, the val and formatted is therefore reversed */
sap.fpa.ui.control.analyticgrid.Grid.prototype._getHeaderCellCurrVal = function(x, y) {
	var oCell = this.getHeaderObject(x, y);

	if(!$.isEmptyObject(oCell)) {
		return {
			val : oCell.formatted,
			formatted : oCell.val
		};
	}

    return {
        val : "",
        formatted : ""
    };
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._isEditingFreeCell = function(x, y) {
    var bOutBounds;
    //if no data rows/cols at all, value will always be out of bounds
    if(this.numberOfTotalRows === 0 && this.numberOfTotalCols === 0) {
        bOutBounds = true;
    } else {
        bOutBounds = x >= this.numberOfTotalCols || y >= this.numberOfTotalRows;
    }
    return this.getFreeEdit() && bOutBounds;
};

/**
* getFreeEdit
* @author oramo.zhang@sap.com
* for now, this.bFreeEdit is always true. If anyone needs to extends it, please expose the get and set method.
* @return {} 
*/
sap.fpa.ui.control.analyticgrid.Grid.prototype.getFreeEdit = function() {
    return this.bFreeEdit;
};

/*
* build options used for value change/update
*/
sap.fpa.ui.control.analyticgrid.Grid.prototype._buildChangeValueOptions = function(options) {
    var optionTemplate = {
        suppressEvents : false,
        suppressWidth : false,
        undo : false
    };

    jQuery.extend(true, optionTemplate, options);

    return optionTemplate;
};

/**
 * Change cell current value.
 * @param  {Integer} x           Cell col index.
 * @param  {Integer} y           Cell row index.
 * @param  {Object} targetValue Value to be changed.
 * @param  {Boolean} suppressEvents, change the value, but suppress further events to avoid loop
 * @param  {Boolean} suppressWidth, change the value, but suppress width change, use _redrawGrid will then help you recalc the width
 * @return {Boolean}             True if cell value is changed successfully, otherwise false.
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype.changeGridCellValue = function(x, y, targetValue, options) {
    this._changeGridCellValue(x,y,{
        val : targetValue.val,
        formatted : targetValue.formatted
    }, options);
};

/**
 * Change cell current value.
 * @param  {Integer} x           Cell col index.
 * @param  {Integer} y           Cell row index.
 * @param  {Object} targetValue Value to be changed.
 * @return {Boolean}             True if cell value is changed successfully, otherwise false.
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype._changeGridCellValue = function(x, y, targetValue, options) {
    if (this._isEditingFreeCell(x, y)) {
        return this._changeCustomCellValue(x, y, targetValue, options);
    } else {
        return this._changeDataCellValue(x, y, targetValue, options);
    }
};

/**
 * Change data of custom cell.
 * @param  {Integer} x   index of column
 * @param  {Integer} y   index of row
 * @param  {Object} targetValue Value to be changed with below format.
 *                              <pre>
 *                                  {
 *                                      val : <value>
 *                                      formatted : <formatted value>
 *                                  }
 *                              </pre>
 * @return {bool}     True if value of custom cell was changed successfully, otherwise false.
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype._changeCustomCellValue = function(x, y, targetValue, options) {
    var $target = $("#" + this.getId() + " td[x='" + x + "'][y='" + y +"']");
    if ((!this._isEditingFreeCell(x, y) || !this._isFreeCellRewriteable(x, y)) && !sap.fpa.ui.infra.common.Utility.bool($target.attr("editable"))) {
        return false;
    }

    options = this._buildChangeValueOptions(options);
    var key = this._buildCellKey(x, y);
    var suppressEvents = options.suppressEvents;
    var suppressWidth = options.suppressWidth || false;
    var overwrite = options.overwrite || false;
   
    if ((this.oColWidth[x] === null || this.oColWidth[x] === undefined) && !suppressWidth) {
        this.oColWidth[x] = this.CELL_WIDTH;
    }

    this._updateCustomCell(x, y, targetValue, overwrite);
    this.modifiedCustomCells[key] = this.hashOfCustomCellData[key];

    if (!suppressEvents) {
        this._fireCustomCellModified(options);
    }
    return true;
};

/**
 *
 * @param x
 * @param y
 * @returns {boolean}
 * @private
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype._isFreeCellRewriteable = function(x, y) {
	if (!this._isEditingFreeCell(x, y)) {
		return false;
	}

	var oCustomCell = this._getCustomCell(x, y);
	if(!oCustomCell) {
		return true;
	}

	if(oCustomCell["cell-reference"] &&
		oCustomCell["cell-reference"].flags !== sap.fpa.ui.control.infra.constants.Analyticgrid.CELL_FLAG.EDITABLE) {
		return false;
	} else {
		return true;
	}

	if(oCustomCell.flags !== sap.fpa.ui.control.infra.constants.Analyticgrid.CELL_FLAG.EDITABLE ||
		oCustomCell.flags !== sap.fpa.ui.control.infra.constants.Analyticgrid.CELL_FLAG.NONE) {
		return false;
	}

	return true;
};

/**
 * Notify dataModified event handle to handle the event. 
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype._fireCustomCellModified = function(options) {
    this.sequenceOfFiringCustomCellModifiedEvent = this.sequenceOfFiringCustomCellModifiedEvent || 0;
    this.sequenceOfFiringCustomCellModifiedEvent++;

    var that = this, mySequence = this.sequenceOfFiringCustomCellModifiedEvent;
    var MODIFY_TYPE = sap.fpa.ui.control.infra.constants.Analyticgrid.MODIFY_TYPE;

    setTimeout(jQuery.proxy(function() {
        if (mySequence === that.sequenceOfFiringCustomCellModifiedEvent) {
            var dataModified = !$.isEmptyObject(this.modifiedCustomCells);
            var fromUndo = options.fromUndo || false;
            var fromRedo = options.fromRedo || false;
            var repeatAction = fromUndo || fromRedo;

            this.fireGridDataModified({
                modifiedCustomCells : this.modifiedCustomCells,
                dataModified : dataModified,
                type : MODIFY_TYPE.CUSTOM,
                repeatAction : repeatAction
            });
            //change modified cell style
            //TODO: change modified style after scrolling or resize
		    $.each(that.modifiedCustomCells, function(index, item){
				var oCell = item;

				var tempItem = $("#" + that.getId() + " td[x='" + oCell.x + "'][y='" + oCell.y + "']");
				if (tempItem.length > 0) {
					tempItem.html(jQuery.sap.encodeHTML(String(oCell.formatted)));
					//remove the tooltips on the input cell
					if (oCell.formatted === "") {
						tempItem.attr("title", "");
					}
					that.starredHtml(oCell.x, oCell.y, oCell, tempItem);
					// tempItem.addClass("modified");
				}
		    });
            //reset it back to empty after one event
            this.modifiedCustomCells = {};
        }
    }, this), 50);
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._changeMemberCellValue = function(x, y, rep, options) {
    var cell = this._getInternalCellObject(x, y);
    var key = this._buildCellKey(x, y);
    // if (x >= this.numberOfTotalCols || y >= this.numberOfTotalRows || !this._isCellEditable(idx)) {
    //     return false; //indicate the change cannot be applied at point (x,y)
    // }

    //TODO member check to be added later

    var changed = false;
    options = this._buildChangeValueOptions(options);
    var suppressEvents = options.suppressEvents;

    //if currValue equals orignal data or both are empty remove it from modifiedCells else update it
    if ((cell && rep.val === cell.val) ||
        (!cell && rep.val === "")) {
        delete this.modifiedCellObjects[key];
        changed = false;
    } else {
        this.modifiedCellObjects[key] = {
            x : x,
            y : y,
            val : rep.val,
            formatted : rep.formatted,
            flags : cell.flags
        };
        changed = true;
    }

    var item = $("#" + this.getId() + " td[x='" + x + "'][y='" + y + "']");
    if (item.length > 0) {
        if (changed) {
            item.addClass("modified");
        } else {
            item.removeClass("modified");
        }


        item.html(rep.formatted);
        //remove the tooltips on the input cell
        if (rep.formatted === "") {
            item.attr("title", "");
        }

    }

    if(!suppressEvents) {
        this._fireMemberCellModified(options);
    }

    return true;//indicate the change can be applied at point (x,y) no matter the value has been changed or not 
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._changeDataCellValue = function(x, y, rep, options) {

    var idx = this._convertToIndex(x, y);
    var cell = this.hashOfCellData[idx];
    if (x >= this.numberOfTotalCols || y >= this.numberOfTotalRows || !this._isCellEditable(idx)) {
        return false; //indicate the change cannot be applied at point (x,y)
    }

    var changed = false;
    options = this._buildChangeValueOptions(options);
    var suppressEvents = options.suppressEvents;

    if (rep.val !== "" && rep.formatted === "") {
        rep.formatted = this._formatDataCell(rep.val, idx);
    }

    //if currValue equals orignal data or both are empty remove it from modifiedCells else update it
    if (cell.formatted === "-") {
		this.modifiedCells[idx] = {
			idx : idx,
			val : rep.val,
			formatted : rep.formatted,
			flags : cell.flags,
			valueException : true
		};
        changed = true;
    } else if ((cell && rep.val === cell.val) ||
        (!cell && rep.val === "")) {
        delete this.modifiedCells[idx];
        changed = false;
    } else {
        this.modifiedCells[idx] = {
            idx : idx,
            val : rep.val,
            formatted : rep.formatted,
            flags : cell.flags
        };
        changed = true;
    }

    var item = $("#" + this.getId() + " td[x='" + x + "'][y='" + y + "']");
    if (item.length > 0) {
        if (changed) {
            item.addClass("modified");
        } else {
            item.removeClass("modified");
        }

        var cellWidth = item.css("width"), cellHeight = item.css("height");

        if (typeof rep.formatted === "object") {
            item.empty();
            this.hashOfCellData[idx].formatted = rep.formatted;//update the formated values for scrolling
            var divCellFormatterId = "divContainer" + idx.toString();
            item.html("<div id ='" + divCellFormatterId + "' style= 'position:relative;width:" + cellWidth +
                ";height:" + cellHeight + ";'>" + "</div>");
            this.formatedCellsIdx.push(idx);
            rep.formatted.placeAt(divCellFormatterId, "only");
        } else {
            item.html(jQuery.sap.encodeHTML(String(rep.formatted)));
            //remove the tooltips on the input cell
	        if (rep.formatted === "") {
				item.attr("title", "");
	        }
        }

    }

    if(!suppressEvents) {
        this._fireGridDataModified(options);
    }

    return true;//indicate the change can be applied at point (x,y) no matter the value has been changed or not	
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._fireGridDataModified = function(options) {
    this.sequenceOfFiringGridDataModifiedEvent = this.sequenceOfFiringGridDataModifiedEvent || 0;
    this.sequenceOfFiringGridDataModifiedEvent++;

    var that = this, mySequence = this.sequenceOfFiringGridDataModifiedEvent;
    var MODIFY_TYPE = sap.fpa.ui.control.infra.constants.Analyticgrid.MODIFY_TYPE;

    setTimeout(jQuery.proxy(function() { //make UI event asyncronized
        if (mySequence === that.sequenceOfFiringGridDataModifiedEvent) {
            var fromUndo = options.fromUndo || false;
            var fromRedo = options.fromRedo || false;
            var repeatAction = fromUndo || fromRedo;
            var dataModified = !$.isEmptyObject(this.modifiedCells);
            this.fireGridDataModified({
                modifiedCells : that.modifiedCells,
                dataModified : dataModified,
                type : MODIFY_TYPE.DATA,
                repeatAction : repeatAction
            });
        }
    }, this), 50);
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._fireMemberCellModified = function() {
    this.sequenceOfFiringGridDataModifiedEvent = this.sequenceOfFiringGridDataModifiedEvent || 0;
    this.sequenceOfFiringGridDataModifiedEvent++;

    var that = this, mySequence = this.sequenceOfFiringGridDataModifiedEvent;
    // var MODIFY_TYPE = sap.fpa.ui.control.infra.constants.Analyticgrid.MODIFY_TYPE;

    setTimeout(jQuery.proxy(function() { //make UI event asyncronized
        if (mySequence === that.sequenceOfFiringGridDataModifiedEvent) {
            // var fromUndo = options.fromUndo || false;
            // var fromRedo = options.fromRedo || false;
            // var repeatAction = fromUndo || fromRedo;
            var dataModified = !$.isEmptyObject(this.modifiedCellObjects);
            var oEventData = {
                modifiedCells : that.modifiedCellObjects,
                dataModified : dataModified
            };
            //if the ALLOCATION feature is active and there are pool cells modified extra information has to be added to the event data
            if(that.getPoolMapping()){
                that.getPoolMapping().augmentWithModifiedPoolCells(oEventData, that);
            }
            this.fireGridDataModified(oEventData);
        }
    }, this), 50);
};

/////////////////////////////////////////////////////////////////////////////////
//misc. functions
//input:
////****val********			the cell value
///*****idx********			the cell index;if this argument is not given, using the default formate.
//output: formatted value(string) or UI5 Control
//The Format priority:
//1.Cell Formatter;
//2.Member Formatter;//using the first one.
//3.Report Formatter;
//4.Default Formatter;
/////////////////////////////////////////////////////////////////////////////////
sap.fpa.ui.control.analyticgrid.Grid.prototype._formatDataCell = function(val, idx) {//the cell idx	
    var formattedVal = "";
	var i = 0;
    if (!this.fnDataCellFormatter) {
        if (typeof this.fnDataCellFormatter !== "function") {//the cell format is not initialized.
            if (idx !== undefined && idx !== null) {//if the idx is given, using the one.
                if (this.hashOfCellData[idx] &&
                    ((!this.hashOfCellData[idx].dataCellFormatter) || (this.hashOfCellData[idx].dataCellFormatter && typeof this.hashOfCellData[idx].dataCellFormatter !== "function"))) {
                    var CellColumn = this._convertToCoordinate(idx);
                    var oContext = this._memberContextOfDataCell(CellColumn.x, CellColumn.y);
                    var oFormatFunction = null;
                    for (i = 0; i < oContext.length; i++) {
                        if (typeof oContext[i].member.memberFormatter === "function") {
                            oFormatFunction = oContext[i].member.memberFormatter;
                            break;
                        }
                    }
                    if (oFormatFunction !== null && oFormatFunction !== undefined) {
                        this.fnDataCellFormatter = oFormatFunction;
                    } else {//using the report format
                        if (typeof this.getGridDataProvider().getData().reportFormatter === "function") {
                            if (typeof this.fnReportFormatter !== "function") {//using fnReportFormatter to save the report level formatter.
                                this.fnReportFormatter = this.getGridDataProvider().getData().reportFormatter;
                            }
                            this.fnDataCellFormatter = this.fnReportFormatter;
                        }
                    }
                } else if (this.hashOfCellData[idx] && this.hashOfCellData[idx].dataCellFormatter) {//using the cell format function.
                    this.fnDataCellFormatter = this.hashOfCellData[idx].dataCellFormatter;
                }
            }
            if (typeof this.fnDataCellFormatter !== "function")//Default Fomatter
            {
                this.fnDataCellFormatter = function(floatVal) {
                    return sap.fpa.ui.infra.common.Utility.formatNumber(floatVal, {
                        fullPrecision : true
                    });
                };
            }
        }
    }

    if((val == 0) || val) {
    	formattedVal = this.fnDataCellFormatter(val);
    }

    this.fnDataCellFormatter = null;//clear the formatter, because this formater is only used for this cell.
    return formattedVal;
};

/**
 * validate and caculate the formula on this cell
 * @param  {string} userInput   the formula string
 * @param  {float} originalVal orignal value for the cell
 * @return {float}             the caculated result
 * @description [description]
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype._validateDataCell = function(userInput, originalVal) {
    var that = this;
	var oCell = null;
    if (!this.fnDataCellValidator) {
        this.fnDataCellValidator = this.getDataCellValidator();
        if (typeof this.fnDataCellValidator !== "function") {
            this.fnDataCellValidator = function(userInput, originalVal) {

                var val = userInput.trim(), floatVal = parseFloat(val);
                var operator = val[0];

                var result = {
                    valid : true,
                    value : {val: val, formatted: ""}
                };

                
                if(val === "") {				//CASE 1: clear cell
                    //if there is front formula here, remove it
                    oCell = {x: that.oFocusedCell.col, y: that.oFocusedCell.row};
                    that._removeFormulaOnCell(oCell);

                } else if (operator === "+" || operator === "-" || operator === "*" || operator === "/") {	//CASE 3: self caculating formula like "+10%" which is start with "+-*/"				
                    var per = val[val.length - 1], isPer = false;
                    
                    val = val.substr(1);
                    if (per === "%") {
                        isPer = true;
                        val = val.substr(0, val.length - 1);
                    }
                    //only recalc when 
                    // 1. value changes
                    // 2. is not negative number
                    if(userInput !== originalVal
                        && (operator !== "-" || isPer)) {
                        originalVal = parseFloat(originalVal) || 0; //just incase orignal value is null or ""


                        val = val.trim();
                        floatVal = parseFloat(val);

                        if (!isNaN(floatVal) && val.toString() === floatVal.toString()) {
                            result.valid = true;

                            switch (operator) {
                            case "+":
                                result.value.val = originalVal + (isPer ? floatVal / 100 * originalVal : floatVal);
                                break;
                            case "-":
                                result.value.val = originalVal - (isPer ? floatVal / 100 * originalVal : floatVal);
                                break;
                            case "*":
                                result.value.val = originalVal * (isPer ? floatVal / 100 : floatVal);
                                break;
                            case "/":
                                result.value.val = originalVal / (isPer ? floatVal / 100 : floatVal);
                                break;
                            default:
                                result.valid = false; //unsupported operator
                                break;
                            }

                            result.value.val = result.value.val + "";
                        }
                    }
                } else if(operator === "="){ //CASE 4: front end formula like "D3 + A5"
                    oCell = {x: that.oFocusedCell.col, y: that.oFocusedCell.row};

                    result = that._addFormulaToCell(oCell, val);
                }

                return result;
            };
        }
    }

    return this.fnDataCellValidator(userInput, originalVal);
};

/**
 * convert a formula key to a simple cell object
 * @param  {string} formulaKey i.e, "1-2"
 * @return {object}            cell object, i.e, {x:1, y:2}
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype._formulaKeyToXY = function(formulaKey) {
	var arrTemp = formulaKey.split("-");
	var obj = {};
	if (arrTemp.length === 2) {
		obj = {
			x: parseInt(arrTemp[0], 10),
			y: parseInt(arrTemp[1], 10)
		};
	}
	return obj;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._numberToZZ = function(number) {
    var arr = [], divider = number + 1, remainder = 0;

    do {
        divider = divider - 1;
        remainder = divider % 26;
        divider = Math.floor(divider / 26);

        arr.unshift(String.fromCharCode("A".charCodeAt(0) + remainder));
    } while (divider > 0);

    return arr.join("");
};

/**
 * Convert the formula ordinate string to cell object contains x,y information
 * @param  {string} str formula ordinate string, i.e, "A10"
 * @return {object}     i.e, {x:0, y:9, dollarX: false, dollarY: false}
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype._convertOrdinateToXY = function(str) {
    var letterToNum = function(letter) {
        var number = 0;
        if (letter.length === 1) {
            number = letter.charCodeAt(0) - "A".charCodeAt(0) + 1;
        } else if (letter.length === 2) {
            number = 26 * (letter.charCodeAt(0) - "A".charCodeAt(0) + 1) + letter.charCodeAt(1) - "A".charCodeAt(0) + 1;
        } else {
            number = 26 * letterToNum(letter.substring(0, letter.length - 2)) + letter.charCodeAt(letter.length - 1) -
                "A".charCodeAt(0) + 1;
        }

        return number - 1;
    };
    str = str.toUpperCase();
    //check if it is start with "$"
    var dollarX = /^[$][a-z|A-Z]+/.test(str);
    var dollarY = /[$]\d+/.test(str);
    var letter = str.match(/[a-z|A-Z]+/gi)[0];
    var x = letterToNum(letter);
    var num = str.match(/\d+$/gi)[0];
    var y = parseInt(num,10) - 1;
    var obj = {
        x : x,
        y : y,
        dollarX: dollarX,
        dollarY: dollarY
    };
    return obj;
};
/**
 * convert the object to formula ordinate string
 * @param  {object} obj cell object contains x,y,dollarX,dollarY info, i.e, {x:0, y:9, dollarX: false, dollarY: false}
 * @return {string}     formula ordinate string, i.e, "A10"
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype._convertXYToOrdinate = function(obj) {
	var ordinate = "";
	if (obj.x >= 0 && obj.y >= 0) {
		var strX = $.trim(this._numberToZZ(obj.x));
		if (obj.dollarX) {
			strX = "$" + strX;
		}
		obj.y += 1;
		var strY = $.trim(obj.y + "");
		if (obj.dollarY) {
			strY = "$" + strY;
		}
		ordinate = strX + strY;
	}
	return ordinate;	
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._validateOrdinate = function(ordinate) {
    return /^[$]?[A-Za-z]+[$]?[0-9]+$/.test(ordinate);
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._uidOf = function(dimId, mbrId, mbrSeq, mbrHier) {
    dimId = dimId || "";
    mbrId = mbrId || "";
    mbrSeq = mbrSeq || 0;
    mbrHier = mbrHier || "";

    return dimId + "|" + mbrId + "|" + mbrSeq + "|" + mbrHier;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._convertToIndex = function(x, y) {
    var iX = x, iY = y;

    if(this.colAxis.dimensions.length === 0) {
        iX = this.numberOfHeaderCols + x;
    }

    if(this.rowAxis.dimensions.length === 0) {
        iY = this.numberOfHeaderRows;
    }

    //only if a valid x and y is provided
    if(iX === -1 || iY === -1) {
        return -1;
    }

    return (iY - this.numberOfHeaderRows) * this.numberOfDataCols + iX - this.numberOfHeaderCols;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._convertToCoordinate = function(idx) {
    var coordinate = {
        "x" : 0,
        "y" : 0
    };
    coordinate.x = parseInt(idx % this.numberOfDataCols,10) + this.numberOfHeaderCols;
    coordinate.y = parseInt((idx) / this.numberOfDataCols,10) + this.numberOfHeaderRows;
    return coordinate;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._convertToColAndRow = function(x, y) {
    var coordinate = {
        "x" : 0,
        "y" : 0
    };
    var $cell = $("#" + this.getId() + " td.dataCell[x='" + x + "'][y='" + y + "']");
    coordinate.row = parseInt($cell.attr("row"),10);
    coordinate.col = parseInt($cell.attr("col"),10);
    return coordinate;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._coordinateToColRow = function() {
//	var col = -1,
//	row = -1;
//
//	if(typeof(coordinate) === "string") {
//	coordinate = coordinate.toUpperCase();
//	var len = coordinate.length,
//		wrongFormat = false,
//		factor = 1;
//
//	for(var i = 0; i < len; i++) {
//		if(coordinate[i] >= 'A' && coordinate[i] <= 'Z') {
//			if(col == -1) {
//				col = 0;
//			}
//
//			col = col * factor + coordinate.charCodeAt(i) - 'A'.charCodeAt(0);
//			factor *= 26;
//		} else if(coordinate[i] >= '0' && coordinate[i] <= '9') {
//			var rest = coordinate.substr(i);
//			row = parseInt(rest);
//			if(isNaN(row) || row.toString() != rest) {
//				wrongFormat = true;
//			}
//
//			row -= 1;
//
//			break;
//		} else {
//			wrongFormat = true;
//			break; //wrong format
//		}
//	}
//
//	if(wrongFormat || col < this.numberOfHeaderCols || col > this.numberOfTotalCols) {
//		col = -1;
//	}
//	if(wrongFormat || row < this.numberOfHeaderRows || row > this.numberOfTotalRows) {
//		row = -1;
//	}
//	}
//
//	return {
//	col: col,
//	row: row
//	};
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._memberContextToColRow = function(memberContext) {
    var that = this, col = 0, row = 0, rowTuple = [], colTuple = [], AXIS_ORDINAL = sap.fpa.ui.control.infra.constants.Analyticgrid.AXIS_ORDINAL;

    $
        .each(
            memberContext,
            function(index, context) {
                var dimId = context.dimId, mbr = context.member, mbrUid = that._uidOf(dimId, mbr.id, mbr.seq, mbr.hier), dimProperties = that.hashOfDimensions[dimId], mbrProperties = that.hashOfMembers[mbrUid], tuple;

                //don't be so strict~ if passed in more dimensions than we know, just ignore them...
                //		if(!dimProperties || !mbrProperties) {
                //			col = -1;
                //			row = -1;
                //			return false;
                //		}

                if (dimProperties && mbrProperties) {
                    if (dimProperties.axisOrdinal === AXIS_ORDINAL.COL) {
                        tuple = colTuple;
                    } else {
                        tuple = rowTuple;
                    }

                    tuple[dimProperties.dimIndex] = mbrProperties.mbrIndex;
                }
            });

    if (this.colAxis) {
        col = -1;
        $.each(this.colAxis.tuples, function(tupleIndex, tuple) {
            if (jQuery.sap.equal(tuple, colTuple)) {
                col = tupleIndex;
                return false;
            }
        });
    }
    if (this.rowAxis) {
        row = -1;
        $.each(this.rowAxis.tuples, function(tupleIndex, tuple) {
            if (jQuery.sap.equal(tuple, rowTuple)) {
                row = tupleIndex;
                return false;
            }
        });
    }

    if (col >= 0) {
        col += this.numberOfHeaderCols;
    }

    if (row >= 0) {
        row += this.numberOfHeaderRows;
    }

    return {
        col : col,
        row : row
    };
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._convertMemberContextToColRow = function(memberContext, strict) {
    var col = 0, row = 0;
    strict = strict || false;
    var i = 0;
    //for strict mode, we also check the number of dimensions
    if(strict) {
        var colLength = this.colAxis ? this.colAxis.dimensions.length : 0;
        var rowLength = this.rowAxis ? this.rowAxis.dimensions.length : 0;
        var ctxLength = Object.keys(memberContext).length;
        if(ctxLength !== colLength + rowLength) {
            return {
                col : -1,
                row : -1
            };
        }
    }

    var _getTupleIndex = function(axis, memberContexts2TupleIndex) {
        var tupleIndex = -1;
        var dimensions = axis.dimensions;
        var currentHash = memberContexts2TupleIndex;
        for (i = 0; i < dimensions.length; i++) {
            var dim = dimensions[i];
            var member = memberContext[dim.id];

            //if there's dimension not existing in current layout
            if (!member) {
                break;
            }

            currentHash = currentHash[member.id];

            //if we can't find a match
            if (!currentHash) {
                break;
            }
        }
        if (currentHash) {
            if (currentHash.tupleIndex !== undefined) {
                tupleIndex = currentHash.tupleIndex;
            }
        }

        return tupleIndex;
    };

    if (this.colAxis) {
        col = -1;
        col = _getTupleIndex(this.colAxis, this.colMemberContext2TupleIndex);
    }
    if (this.rowAxis) {
        row = -1;
        row = _getTupleIndex(this.rowAxis, this.rowMemberContext2TupleIndex);
    }

    if (col >= 0) {
        col += this.numberOfHeaderCols;
    }

    if (row >= 0) {
        row += this.numberOfHeaderRows;
    }

    return {
        col : col,
        row : row
    };
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._memberContextOfFormula = function(memberContextStr) {
    var memberContext = [];
	var i = 0;
    function _buildMemberContext(axis, lookupMembers) {
        if (!axis) {
            return;
        }

        var dimensions = axis.dimensions, dimCount = dimensions.length;

        for (i = 0; i < dimCount; i++) {
            var dim = dimensions[i], hiers = dim.hiers || [], members = dim.members;

            jQuery.each(members, function(idx, val) {
                var member = val;
                if (lookupMembers[member.id]) {
                    var hier = hiers.length === 0 ? "" : hiers[member.hier].id;
                    memberContext.push({
                        dimId : dim.id,
                        member : {
                            id : member.id,
                            seq : member.seq,
                            hier : hier
                        }
                    });
                    return false;
                }
				
            });
        }
    }

    if (memberContextStr.startsWith("[") && memberContextStr.endsWith("]")) {
        var members = memberContextStr.substr(1, memberContextStr.length - 2).split(",");
        var lookupMembers = {};
		var fLookupMembers = function(idx, val) {
			lookupMembers[val] = true;
		};
        jQuery.each(members, fLookupMembers);

        _buildMemberContext(this.colAxis, lookupMembers);
        _buildMemberContext(this.rowAxis, lookupMembers);
    }

    return memberContext;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._isDataCell = function(col, row) {
	if ((row >= this.numberOfHeaderRows && row < this.numberOfTotalRows) &&
        (col >= this.numberOfHeaderCols && col < this.numberOfTotalCols)) {
        return true;
    }

    return false;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._memberContextOfColRow = function(col, row) {
    var colTupleIndex = col - this.numberOfHeaderCols, rowTupleIndex = row - this.numberOfHeaderRows, memberContext = {};
	var i = 0;
    var MEMBER_FLAG = sap.fpa.ui.control.infra.constants.Analyticgrid.MEMBER_FLAG;
    //member context is only available for data cells
    if (!this._isDataCell(col, row)) {
        return null;
    }

    function _buildMemberContext(axis, hiddenMemberContext, tupleIndex) {
        if (!axis) {
            return;
        }

        var tuple = axis.tuples[tupleIndex], dimensions = axis.dimensions, dimCount = dimensions.length;

        for (i = 0; i < dimCount; i++) {
            var dim = dimensions[i], hiers = dim.hiers || [], members = dim.members, member = members[tuple[i]], hier = hiers.length === 0 ? ""
                : hiers[member.hier].id;
            var mbrCtx = tuple.slice(0, i + 1).join("/");
            var flags = hiddenMemberContext[mbrCtx] ? MEMBER_FLAG.EXPANSIBLE : (member.flags || 0);

            //we don't provide seq in exposed member context any more as it's for grid internal use
            memberContext[dim.id] = {
                id : member.id,
                // seq : member.seq,
                hier : hier,
                desc : member.desc,
                level : member.level,
                flags : flags,
                parent : member.parent,
                memberFormatter : member.memberFormatter,
                memberFormula : ""// there should be member formula strings from the dataprovider.
            };
        }
    }

    _buildMemberContext(this.colAxis, this.hiddenMemberContextCols, colTupleIndex);
    _buildMemberContext(this.rowAxis, this.hiddenMemberContextRows, rowTupleIndex);

    return memberContext;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._memberContextOfDataCell = function(col, row) {
    var colTupleIndex = col - this.numberOfHeaderCols, rowTupleIndex = row - this.numberOfHeaderRows, memberContext = [];
	var i = 0;
    var MEMBER_FLAG = sap.fpa.ui.control.infra.constants.Analyticgrid.MEMBER_FLAG;
    //member context is only available for data cells
    if (!this._isDataCell(col, row)) {
        return null;
    }

    function _buildMemberContext(axis, hiddenMemberContext, tupleIndex) {
        if (!axis) {
            return;
        }

        var tuple = axis.tuples[tupleIndex], dimensions = axis.dimensions, dimCount = dimensions.length;

        for (i = 0; i < dimCount; i++) {
            var dim = dimensions[i], hiers = dim.hiers || [], members = dim.members, member = members[tuple[i]], hier = hiers.length === 0 ? ""
                : hiers[member.hier].id;
            var mbrCtx = tuple.slice(0, i + 1).join("/");
            var flags = hiddenMemberContext[mbrCtx] ? MEMBER_FLAG.EXPANSIBLE : (member.flags || 0);

            memberContext.push({
                dimId : dim.id,
                member : {
                    id : member.id,
                    // seq : member.seq,
                    hier : hier,
                    desc : member.desc,
                    level : member.level,
                    flags : flags,
                    parent : member.parent,
                    memberFormatter : member.memberFormatter,
                    memberFormula : ""// there should be member formula strings from the dataprovider.
                }
            });
        }
    }

    _buildMemberContext(this.colAxis, this.hiddenMemberContextCols, colTupleIndex);
    _buildMemberContext(this.rowAxis, this.hiddenMemberContextRows, rowTupleIndex);

    return memberContext;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._colRow2DimMember = function(col, row) {
    var jCell = $("td.dimMember[x=" + col + "]" + "[y=" + row + "]"), jLocalMemberCell = $("td.localMember[x=" + col +
        "]" + "[y=" + row + "]"), mbrCtx = jCell.attr("mbrCtx"), lmid = jLocalMemberCell.attr("lmid"), result = {};
	var oMember = null;
    if (jCell && mbrCtx) {
        var isCol = jCell.hasClass("colDimMemberCell"), aMemContext = mbrCtx.split(new RegExp("\/", "gi"));

        var sDimension = "";

        if (isCol) {
            sDimension = this.colAxis.dimensions[aMemContext.length - 1].id;
            oMember = this.colAxis.dimensions[aMemContext.length - 1].members[aMemContext[aMemContext.length - 1]];
        } else {
            sDimension = this.rowAxis.dimensions[aMemContext.length - 1].id;
            oMember = this.rowAxis.dimensions[aMemContext.length - 1].members[aMemContext[aMemContext.length - 1]];
        }
        

        result = {
            "dimensionId" : sDimension,
            "member" : oMember
        };
    } else if (jLocalMemberCell && lmid) {
        var localMemberTag = sap.fpa.ui.control.analyticgrid.Grid._LOCAL_MEMBER_TAG, horizontal = col < this.numberOfHeaderCols;
		oMember = this._getLocalMember(lmid, horizontal);
        result = {
            "dimensionId" : localMemberTag,
            "member" : oMember
        };
    }

    return result;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._tinyBarOfRow = function() {
    return this._tinyBarOf(this.rowAxis, this.hiddenRowDimensions, false);
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._tinyBarOfCol = function() {
    return this._tinyBarOf(this.colAxis, this.hiddenColDimensions, true);
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._tinyBarOf = function(axis, hideAxisDimensions, isCol) {
    var html = "";
    var filterDimensions = this.getFilterDimensions();

    if (axis && axis.dimensions) {
        jQuery.each(axis.dimensions, function(dimIndex, dim) {
            if(!filterDimensions[dim.id]) {
                var dimDesc = dim.desc || dim.id, hide = hideAxisDimensions[dim.id] || false, axisName = isCol ? "col"
                    : "row", cssClass = hide ? "Hide" : "Show";

                html += "<button type='button' class='tinyBarItem " + axisName + "TinyBarItem" + cssClass + "' dim='" +
                    dim.id + "' hide='" + hide.toString() + "' title='" + dimDesc + "'>";
                html += dimDesc + "</button>";
            }
        });
    }

    return html;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._withinSelectedRange = function(xVal, yVal) {
    var result = false, POSITION_OF_ALL = this.POSITION_OF_ALL;
	var x = 0,
		y = 0;
    jQuery.each(this.oSelectedRegions, function(key, oRegion) {

        if (oRegion.x2 === POSITION_OF_ALL && oRegion.y2 === POSITION_OF_ALL) {
            if (xVal >= oRegion.x1 && yVal >= oRegion.y1) {
                result = true;
            }            
            return;
        } else if (oRegion.x2 === POSITION_OF_ALL) {
            for (y = oRegion.y1; y <= oRegion.y2; y++) {
                if (yVal === y && xVal >= oRegion.x1) {
                    result = true;
                    return;
                }
            }
        } else if (oRegion.y2 === POSITION_OF_ALL) {
            for (x = oRegion.x1; x <= oRegion.x2; x++) {
                if (xVal === x && yVal >= oRegion.y1) {
                    result = true;
                    return;
                }
            }
        } else if (xVal >= oRegion.x1 && xVal <= oRegion.x2 && yVal >= oRegion.y1 && yVal <= oRegion.y2) {
            result = true;
            return;
        }
    });

    return result;
};
//get the viewable formatted controls cells.
sap.fpa.ui.control.analyticgrid.Grid.prototype._calculateFormatControlCells = function() {
    var $leftTopCell = $("#" + this.getId() + " td.dataCell").first(), left = parseInt($leftTopCell.attr("col"),10), top = parseInt($leftTopCell
        .attr("row"),10), rightBottomCol = left + this.numberOfViewableDataCols, rightBottomRow = top +
        this.numberOfViewableDataRows;
	var i = 0;

    var viewableFormatControlCells = [];
    if (this.hashOfCellData && this.formatedCellsIdx && this.formatedCellsIdx.length > 0) {
        for (i = 0; i < this.formatedCellsIdx.length; i++) {
            var oTempCord = this._convertToCoordinate(this.formatedCellsIdx[i]),
				iCol = 0,
				iRow = 0,
				$tempCell = $("#" + this.getId() + " td.dataCell[x='" + oTempCord.x + "'][y='" + oTempCord.y + "']");
            if ($tempCell.length > 0) {
                iCol = parseInt($tempCell.attr("col"),10);
                iRow = parseInt($tempCell.attr("row"),10);
                if (iCol >= left && iCol <= rightBottomCol && iRow >= top && iRow <= rightBottomRow) {
                    var oCellInfo = {
                        colIndex : iCol,
                        rowIndex : iRow,
                        idx : this.formatedCellsIdx[i]
                    };
                    viewableFormatControlCells.push(oCellInfo);
                    //					viewableFormatControlCells.push(this.formatedCellsIdx[i]);
                }
            }
        }
    }
    this.formatedCellsIdx = [];
    return viewableFormatControlCells;
};

/**
 * get the formula input string(member formula or the members-cord)
 * @param {int} cell column
 * @param {int} cell row

 * @return {Array}: Member Fomula objects array.

 */
/* this method is for member formula, now it not supported.
 sap.fpa.ui.control.analyticgrid.Grid.prototype._getFormulaInputStrings = function(col, row){
 var oMemberContext = this._memberContextOfDataCell(col, row),
 aMeasureDims = [],
 aResults = [];
 if(this.colAxis){
 for(var i = 0; i < this.colAxis.dimensions.length; i++)//get the measure dimension.
 {
 if(this.colAxis.dimensions[i].isMeasure){
 aMeasureDims.push(this.colAxis.dimensions[i].id);
 };
 }
 }
 if(this.rowAxis){
 for(var i = 0; i < this.rowAxis.dimensions.length; i++)//get the measure dimension.
 {
 if(this.rowAxis.dimensions[i].isMeasure){
 aMeasureDims.push(this.rowAxis.dimensions[i].id);
 };
 }
 }
 for(var i = 0; i < oMemberContext.length; i++ ){
 if(($.inArray(oMemberContext[i].dimId, aMeasureDims) > -1) && (oMemberContext[i].memberFormula)){
 aResults.push({
 dimId: oMemberContext[i].dimId,
 member:oMemberContext[i],
 memberFormula: oMemberContext[i].memberFormula
 });
 };
 }
 return aResults;
 };
 */

/**
 * Save the formula input in formula bar
 * @param  {oEventData}
 * @return {null}
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype._onSaveFormulaEvent = function(oEventData) {
    var that = this;
	var i = 0;
	var updatedData = null;
	var aSelectionRegion = null;
    var bFormulaAffectedMember = true;//local member or member formula
	var iCellX = 0,
		iCellY = 0;
	var changed = false;
    if ((that.oFocusedCell.col >= that.numberOfHeaderCols) && (that.oFocusedCell.row >= that.numberOfHeaderRows)) {
        bFormulaAffectedMember = false; //data formula
    }

    //get the formula value
    var formulaValue = "", formattedVal;
    var formulaBar = that.getFormulaBar();
    if (formulaBar && formulaBar.getMode() === sap.fpa.ui.control.formula.FormulaMode.FORMULA) {
        formulaValue = formulaBar.getFormula();
    } else {
        //TODO: error handling
        return;
    }
    
    //if (formulaValue.indexOf("variance") !== -1 || formulaValue.toLowerCase().indexOf("ytd") !== -1) {
	if(sap.fpa.ui.control.formula.FormulaUtility.isValidFormula(formulaValue) >= 0) {
		var sMemberExpressionType = formulaValue.substring(0, formulaValue.indexOf("(")).toLowerCase();

        if (that._isApplicableForMemberExpression(that.oFocusedCell, sMemberExpressionType)) {
            updatedData = {
                data : formulaValue,
                formula: sMemberExpressionType
            };

            that.fireUpdateFormulaData({
                "formulaType" : "memberExpression",
                "data" : updatedData
            });
        } else {
            that.fireUpdateFormulaData({
                "formulaType" : "memberExpression",
                "data" : {
                    action: "member_expression_not_applicable"
                }
            });
        }
        return;
    }

    if (bFormulaAffectedMember) {

        var localMemberTag = sap.fpa.ui.control.analyticgrid.Grid._LOCAL_MEMBER_TAG;
        if ($.isEmptyObject(this.oOrignalFocusedCell)) {
            that.oOrignalFocusedCell = this.oFocusedCell;
        }
		
        var dimMember = that._colRow2DimMember(that.oOrignalFocusedCell.col, that.oOrignalFocusedCell.row);
        var localMembers = this.getLocalMembers();

        if (dimMember) {
            if (dimMember.dimensionId === localMemberTag && localMembers) {
                //local member formula
                var lmid = dimMember.member.id;
                jQuery.each(localMembers, function(idx, members) {
                    for (i = 0; i < members.length; i++) {
                        var member = members[i];
                        if (member.id === lmid) {
                            member.formula = that.parseFormulaStr(formulaValue);
                            break;
                        }
                    }
                });
                this.setLocalMembers(localMembers);
                this._redrawGrid();
            } else {
                //member formula
				if(!dimMember.member) {
					this.fireUpdateFormulaData({
						"formulaType" : "memberExpression",
						"data" : {
							action: "member_expression_not_applicable"
						}
					});
					return;
				}

                var memberFormulaObject = that.getMemberFormula();


                var memeberId = dimMember.member.id.slice(
                    dimMember.member.id.lastIndexOf("[") + 1,
                    dimMember.member.id.length - 1);
                
                if (dimMember.dimensionId === "CustomDimension1") {
                    if (formulaValue === "") {
                        that.fireUpdateFormulaData({
                            "formulaType" : "memberExpression",
                            "data" : {
                                action: "remove"
                            }
                        });
                    }    
                    return;
                }
                
                if (!memberFormulaObject) {
                    memberFormulaObject = {};
                    memberFormulaObject.dimensionId = dimMember.dimensionId;
                    memberFormulaObject.data = {};
                    memberFormulaObject.data[memeberId] = {};
                } else if (memberFormulaObject && !memberFormulaObject.data) {
                    memberFormulaObject.data = {};
                    memberFormulaObject.data[memeberId] = {};
                } else if (memberFormulaObject && memberFormulaObject.data && !memberFormulaObject.data[memeberId]) {
                    memberFormulaObject.data[memeberId] = {};
                }
                //TODO: update the member formula object
                //currently we don't need the json format in the Grid, so setMemberFormulaObject here
                //If we need the json format in the Grid, we should setMemberFormulaObject in planning.controller.js>onUpdateMemberFormula.
                memberFormulaObject.data[memeberId].member = memeberId;
                memberFormulaObject.data[memeberId].formula = formulaValue;

                that.setMemberFormula(memberFormulaObject);

                //update member formula callback
                //{"dimensionId":"testDim32", "updatedFormulas":[{"member":"A1","formula":"3+2","jsonFormula":"1+2"}]}				
                updatedData = {};

                updatedData.dimensionId = dimMember.dimensionId;
                updatedData.updatedFormulas = [];
                updatedData.updatedFormulas.push(memberFormulaObject.data[memeberId]);

                that.fireUpdateFormulaData({
                    "formulaType" : "memberformula",
                    "data" : updatedData
                });
            }
        }
        return false;
    } else {
        if (!oEventData.getParameter("selectionRegion")) {
            aSelectionRegion = this.oOriginalSelectedRegions || this.oSelectedRegions;
        }
        var sFormulaString = formulaValue;
        for (i = 0; i < Object.keys(aSelectionRegion).length; i++) {
            var oSelectionRegions = aSelectionRegion[Object.keys(aSelectionRegion)[i]], oUndoCells = {}, idxOfCell = 0;
            for (iCellX = oSelectionRegions.x1; iCellX <= oSelectionRegions.x2; iCellX++) {
                for (iCellY = oSelectionRegions.y1; iCellY <= oSelectionRegions.y2; iCellY++) {

                    var isEditableCell = false, isDataCell =  false;
                    if (this._isEditingFreeCell(iCellX, iCellY)) {
						isEditableCell = true;
                    } else {
						idxOfCell = this._convertToIndex(iCellX, iCellY);
						isDataCell = true;
						if (this._isCellEditable(idxOfCell)) {
							isEditableCell = true;
						}
                    }

                    if (isEditableCell) {
	                    this._startUpdateForModifiedCells(iCellX, iCellY);
	                    //check the value with "%" or not
	                    var orgValue = this.editingCellOrignalValue.val;

	                    var result = this._validateDataCell(sFormulaString, orgValue);

	                    if (result.valid && result.value.val.toString() !== orgValue.toString()) {
	                        changed = true;

	                        if (isDataCell && result.value.formatted === "") {
								result.value.formatted = this._formatDataCell(result.value.val, this._convertToIndex(iCellX, iCellY));
							} else if(result.value.formatted){
								formattedVal = result.value.formatted;
							} else {
								formattedVal = result.value.val;
                                result.value.formatted = formattedVal;
							}

	                        this._changeGridCellValue(iCellX, iCellY, result.value);

	                        //update undoStack
	                        if(this._isEditingFreeCell(iCellX, iCellY)){
								var oCell = jQuery.extend(true, {}, this._initCustomCell(iCellX, iCellY));
								oCell.val = this.editingCellOrignalValue.val;
								oCell.formatted = this.editingCellOrignalValue.formatted;
								oUndoCells[iCellX + "/" + iCellY] = oCell;
	                        } else {
								oUndoCells[iCellX + "/" + iCellY] = {
									col : iCellX,
									row : iCellY,
									val : this.editingCellOrignalValue.val,
									formatted : this.editingCellOrignalValue.formatted
								};
	                        }
	                        
	                    } else {
	                        sFormulaString = this.editingCellOrignalValue.val; 
	                        formattedVal = this.editingCellOrignalValue.formatted;
	                    }
                        
	                    this._EndUpdateForModifiedCells(iCellX, iCellY, formattedVal, sFormulaString);
                    }
                }
            }

            var undoItems = [];
			var fUndoItems = function(key, item) {
				undoItems.push(item);
			};
            $.each(oUndoCells, fUndoItems);

            if (undoItems.length !== 0) {
                this.undoStack.push(undoItems);
                this.redoStack = [];
            }
        }
        
    }
    

};


sap.fpa.ui.control.analyticgrid.Grid.prototype._onFormulaTextLiveChange = function(oEventData) {
	var that = this;
    var params = oEventData.getParameters();
    var oValue = {
            val : params.liveValue,
            formatted : params.liveValue
        };
    var oFocusedCell = that.oFocusedCell;
    if (oFocusedCell.col === that.POSITION_OF_NULL || oFocusedCell.row === that.POSITION_OF_NULL) {
		var sMessage = that.bundleManager.getText("CHANGE_FORMULA_TEXT_FAILED");
		that._postMsg(sap.fpa.ui.infra.common.Message.Type.ERROR, sMessage);
    } else {
		that._changeGridCellValue(oFocusedCell.col, oFocusedCell.row, oValue);
    }
    return false;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._onFormulaChange = function() {
	var that = this;
	var oFormulaBar = that.getFormulaBar();
	var sFormula = oFormulaBar.getFormula();

	if (oFormulaBar.getCellClickMode()) {
		that._parseFormulaToClickedCells(sFormula);	
	}
	
    return false;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._startUpdateForModifiedCells = function(x, y, cellWidth, cellHeight) {
    var $target = $("#" + this.getId() + " td.editable[x='" + x + "'][y='" + y + "']");
    if ($target.hasClass("dummyCell")) {
        this.editingCellOrignalValue = this._getCustomCellCurrVal(x, y);
    } else {
        this.editingCellOrignalValue = this._getDataCellCurrVal(x, y);
    }

    if (!cellWidth) {
        cellWidth = $target.css("width");
    }
    if (!cellHeight) {
        cellHeight = $target.css("height");
    }
    $target.html("<div contenteditable='true' style='color:rgb(51, 145, 213);outline:none;position:relative;width:" + cellWidth + ";height:" +
        cellHeight + ";'>" + this.editingCellOrignalValue.val + "</div>");
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._EndUpdateForModifiedCells = function(x, y, formattedVal, sInput,
    cellWidth, cellHeight) {
    var $target = $("#" + this.getId() + " td.editable[x='" + x + "'][y='" + y + "']");
    if (!cellWidth) {
        cellWidth = $target.css("width");
    }
    if (!cellHeight) {
        cellHeight = $target.css("height");
    }
    if (this.leaveEditingCellStateUnchanged) {
        this.leaveEditingCellStateUnchanged = false;
    } else {
        this.oEditingCell = {};
    }

    this.editingCellOrignalValue = null;

    //	$input.attr("contenteditable", "false");
    if (typeof formattedVal === "object") {
        $target.empty();//delete the value.
        var idx = this._convertToIndex(x, y);
        this.hashOfCellData[idx].formatted = formattedVal;//update the formated values for scrolling
        var divCellFormatterId = "divContainer" + idx.toString();
        $target.html("<div id ='" + divCellFormatterId + "' style= 'position:relative;width:" + cellWidth + ";height:" +
            cellHeight + ";'>" + "</div>");
        this.formatedCellsIdx.push(idx);
        formattedVal.placeAt(divCellFormatterId, "only");
    } else {
        $target.html("<div style='position:relative;width:" + cellWidth + ";height:" + cellHeight + ";'>" +
		jQuery.sap.encodeHTML(String(formattedVal)) + "</div>");
        //remove the tooltips on the input cell
        if (formattedVal === "") {
			$target.attr("title", "");
        }
    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.getSelectedMemberContext = function() {
    var oSelectedRegions = this.oSelectedRegions, regionsOfMemberContext = [], oGrid = this;
    var i, j, mtx;
    var oStatus = {};
    var oRowStatus = {}, oColStatus = {};

    jQuery.each(oSelectedRegions, function(idx, region) {
        var colStart = region.x1, colEnd = region.x2;
        var rowStart = region.y1, rowEnd = region.y2;
        var memberContexts = [];
        if (colEnd === oGrid.POSITION_OF_ALL) {
            for (j = rowStart; j <= rowEnd; j++) {
                for (i = oGrid.numberOfHeaderCols;
                    i < oGrid.numberOfHeaderCols + oGrid.numberOfDataCols; i++) {
                    oStatus = oGrid._getStatusOfDiplayIndex(i, false);
                    if(!oStatus.hidden){
                        mtx = oGrid._memberContextOfColRow(i, j);
                        if (mtx) {
                        	memberContexts.push(mtx);
                        }
                    }
                }
            }
        } else if (rowEnd === oGrid.POSITION_OF_ALL) {
            for (j = colStart; j <= colEnd; j++) {
                for (i = oGrid.numberOfHeaderRows;
                   i < oGrid.numberOfHeaderRows + oGrid.numberOfDataRows; i++) {
                    oStatus = oGrid._getStatusOfDiplayIndex(i, true);
                    if(!oStatus.hidden) {
                        mtx = oGrid._memberContextOfColRow(j, i);
                        if (mtx) {
                            memberContexts.push(mtx);
                        }
                    }
                }
            }
        } else {
            for (i = colStart; i <= colEnd; i++) {
                for (j = rowStart; j <= rowEnd; j++) {
                    oColStatus = oGrid._getStatusOfDiplayIndex(i, true);
                    oRowStatus = oGrid._getStatusOfDiplayIndex(j, false);
                    if(!oColStatus.hidden && !oRowStatus.hidden) {
                        mtx = oGrid._memberContextOfColRow(i, j);
                        if (mtx) {
                            memberContexts.push(mtx);
                        }
                    }
                }
            }
		}
        regionsOfMemberContext.push(memberContexts);
    });

    return regionsOfMemberContext;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.getSelectedRegions = function() {
    return this.oSelectedRegions;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.setSelectedRegions = function(oSelectedRegions) {
    this.oSelectedRegions = oSelectedRegions;
    this._drawSelectionBox();
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.getAdaptedRegion = function(region) {
    var dataCells = this.getGridData().cells;
    var oGrid = this;    
    var i, j;
    var oStatus = {};
    var colStart = region.x1, colEnd = region.x2;
    var rowStart = region.y1, rowEnd = region.y2;
    var lastCell = {x: region.x2, y: region.y2};
    var cell;

    if (colEnd === oGrid.POSITION_OF_ALL && rowEnd === oGrid.POSITION_OF_ALL) {
        for (i = 0; i < dataCells.length; i++) {
            cell = dataCells[i];
            if ($.isNumeric(cell.x) && cell.x > lastCell.x) {
                lastCell.x = cell.x;
            }

            if ($.isNumeric(cell.y) && cell.y > lastCell.y) {
                lastCell.y = cell.y;
            }            
        }
    } else if (colEnd === oGrid.POSITION_OF_ALL) {
        for( i = rowStart; i <= rowEnd; i++) {
            oStatus = oGrid._getStatusOfDiplayIndex(i, false);            
            if(!oStatus.hidden) {
                for (j = 0; j < dataCells.length; j++) {
                    cell = dataCells[j];
                    if ($.isNumeric(cell.x) && $.isNumeric(cell.y) && cell.x > lastCell.x) {
                        lastCell.x = cell.x;
                    }
                }
                lastCell.y = i;
            }
        }
    } else if (rowEnd === oGrid.POSITION_OF_ALL) {
        for( i = colStart; i <= colEnd; i++) {
            oStatus = oGrid._getStatusOfDiplayIndex(i, true);
            if(!oStatus.hidden) {
                for (j = 0; j < dataCells.length; j++) {
                    cell = dataCells[j];
                    if ($.isNumeric(cell.x) && $.isNumeric(cell.y) && cell.y > lastCell.y) {
                        lastCell.y = cell.y;
                    }                 
                }
                lastCell.x = i;
            }
        }
    } 
    return {x1: colStart, y1: rowStart, x2: lastCell.x, y2: lastCell.y};
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.getSelectedCustomCellsCoordinates = function() {
    var oSelectedRegions = this.oSelectedRegions, regionsOfCoordinates = [], oGrid = this;
    var i, j;

    jQuery.each(oSelectedRegions, function(idx, region) {
        region = oGrid.getAdaptedRegion(region);

        var colStart = region.x1, colEnd = region.x2;
        var rowStart = region.y1, rowEnd = region.y2;
        var coordinates = [];

        for (i = colStart; i <= colEnd; i++) {
            for (j = rowStart; j <= rowEnd; j++) {
                var coordinate = {
                    x : i,
                    y : j
                };
                coordinates.push(coordinate);
            }
        }

        regionsOfCoordinates.push(coordinates);
    });

    return regionsOfCoordinates;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.getSelectedCoordinates = function() {
    var oSelectedRegions = this.oSelectedRegions, regionsOfCoordinates = [], oGrid = this;
    var i, j;
    var oStatus = {};
    var oRowStatus = {}, oColStatus = {};

    jQuery.each(oSelectedRegions, function(idx, region) {
        var colStart = region.x1, colEnd = region.x2;
        var rowStart = region.y1, rowEnd = region.y2;
        var coordinates = [];

        if (colEnd === oGrid.POSITION_OF_ALL && rowEnd === oGrid.POSITION_OF_ALL) {
                coordinates.push({
                    x : oGrid.POSITION_OF_ALL,
                    y : oGrid.POSITION_OF_ALL
                });
        } else if (colEnd === oGrid.POSITION_OF_ALL) {
            for( i = rowStart; i <= rowEnd; i++) {
                oStatus = oGrid._getStatusOfDiplayIndex(i, false);
                if(!oStatus.hidden) {
                    coordinates.push({
                        x : oGrid.POSITION_OF_ALL,
                        y : i
                    });
                }
            }
        } else if (rowEnd === oGrid.POSITION_OF_ALL) {
            for( i = colStart; i <= colEnd; i++) {
                oStatus = oGrid._getStatusOfDiplayIndex(i, true);
                if(!oStatus.hidden) {
                    coordinates.push({
                        x : i,
                        y : oGrid.POSITION_OF_ALL
                    });
                }
            }
        } else {
            for (i = colStart; i <= colEnd; i++) {
                for (j = rowStart; j <= rowEnd; j++) {
                    oColStatus = oGrid._getStatusOfDiplayIndex(i, true);
                    oRowStatus = oGrid._getStatusOfDiplayIndex(j, false);
                    if(!oColStatus.hidden && !oRowStatus.hidden) {
                        var coordinate = {
                            x : i,
                            y : j
                        };
                        coordinates.push(coordinate);
                    }
                }
            }
        }

        regionsOfCoordinates.push(coordinates);
    });

    return regionsOfCoordinates;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.getHeaderObject = function(x, y) {
    var sKey = this._buildCellKey(x, y);
    var oCell = jQuery.extend(true, {}, this.hashOfCellObjects[sKey]);
    return oCell;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.getCellObject = function() {
    if (arguments.length === 2) {
        return (this.getCellObjectByCoordinate.apply(this, arguments));
    } else {
        return (this.getCellObjectByContext.apply(this, arguments));
    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.getCellObjectByContext = function(memberContext) {
    var oRowCol = this._convertMemberContextToColRow(memberContext);
    var idx4Compare = this._convertToIndex(oRowCol.col, oRowCol.row);
    var modifiedCell = this.modifiedCells[idx4Compare];

    var oCell = jQuery.extend(true, {}, this.hashOfCellData[idx4Compare]);

    if (modifiedCell) {
		oCell.val = modifiedCell.val;
		oCell.formatted = modifiedCell.formatted;
    }

    return oCell;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.getCellObjectByCoordinate = function(x, y) {
    var oCell;
    if (this._isEditingFreeCell(x, y)) {
        oCell = jQuery.extend(true, {}, this._initCustomCell(x, y));
    } else if(this._isDataCell(x, y)){
        var idx = this._convertToIndex(x, y);
        oCell = jQuery.extend(true, {}, this.hashOfCellData[idx]);
    } else {
        //else it's a header cell
        oCell = this.getHeaderObject(x, y);
    }
    return oCell;
};


sap.fpa.ui.control.analyticgrid.Grid.prototype.parseFormulaStr = function(formulaStr) {
    var formulaHelper = this.getFormulaHelper();
    var result = [];
	var i = 0;
	
    //leave the rest calc to formula helper..
    if (formulaHelper && formulaHelper.parseFormulaStr) {
        result = formulaHelper.parseFormulaStr(formulaStr);
        for (i = 0; i < result.length; i++) {
            //need rebuild member context values
            var val = result[i].value;
            if (val.startsWith("[") && val.endsWith("]")) {
                var memberContext = this._memberContextOfFormula(val);
                if (memberContext.length > 0) {
                    result[i].value = memberContext;
                }
                
            }
            
        }
    } else {
        //need to throw an exception here
    }

    return result;
};

/**
 * update the formula value on formula bar
 * @param  {int} col  
 * @param  {int} row  
 * @param  {int} type 0: Data cell 1: dimension members
 * @return {null}      
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype._updateFormulaDisplay = function(col, row, type) {
    var formulaBar = this.getFormulaBar();
	var mbrCtx = null;
    if (formulaBar) {
		/* comment the member context display [DJ]
		var oMemberContext = this._memberContextOfDataCell(col, row),
			sCellMembers = "";
		for(var i = 0; i < oMemberContext.length; i++){
			sCellMembers = sCellMembers + oMemberContext[i].member.id + ", ";
		}
		var memberContext = sCellMembers.substring(0,sCellMembers.length-2));
		 */
        var $target = $("#" + this.getId() + " td[x='" + col + "'][y='" + row + "']");
        formulaBar.setText($target.text());
        formulaBar.setFormula("");
        //data cell
        if (type === 0) {
            var idx = this._convertToIndex(col, row);
            var cellData = "";

            if (this.hashOfCellData && this.hashOfCellData[idx]) {
                //FPAAPD-519: the special case: if the value is 0 and displayed in cell as "-", formula bar will display nothing				
                if (!(this.hashOfCellData[idx].val === 0 && this.hashOfCellData[idx].formatted === sap.fpa.ui.control.infra.constants.Analyticgrid.NULL_VALUE)) {
                    cellData = (this.modifiedCells[idx] || this.hashOfCellData[idx]).val;
                }
                
            }

            if (this._isCellEditable(idx)) {
				formulaBar.setTextEnabled(true);
				formulaBar.setFormulaEnabled(true);
		    } else {
				formulaBar.setTextEnabled(false);
				formulaBar.setFormulaEnabled(false);
		    }
            
            formulaBar.setText(cellData);
            formulaBar.setFormula("");
        } else if (type === 1) { //not data cell, members or dummy cells
            if ($target.hasClass("dimMember")) { //dimension member
                mbrCtx = $target.attr("mbrCtx");
				var isCol = $target.hasClass("colDimMemberCell"),
					aMemContext = mbrCtx.split(new RegExp("\/", "gi"));
                var oDimension = null, oMember = null;

                //[member formula] - from the backend
                var memberFormulaObject = this.getMemberFormula();
                //[DJ] new formula bar data display
                
                if (isCol) {
                    oDimension = this.colAxis.dimensions[aMemContext.length - 1];                    
                } else {
                    oDimension = this.rowAxis.dimensions[aMemContext.length - 1];
                }

                if (oDimension) {
					if (oDimension.id !== this.getAccDimId() && oDimension.isMeasure !== true) {
						formulaBar.setTextEnabled(false);
						formulaBar.setFormulaEnabled(false);
					} else {
						if (oDimension.isMeasure !== true) {
							formulaBar.setTextEnabled(false);
							formulaBar.setFormulaEnabled(true);
						}
	                	
						oMember = oDimension.members[aMemContext[aMemContext.length - 1]];
						if (oMember) {
							if (oMember.id !== null && oMember.id !== undefined &&
								(oMember.id.indexOf("Variance") !== -1 || oMember.id.indexOf("YTD") !== -1 || oMember.id.indexOf("Delta") !== -1) &&
								oDimension.isMeasure === true) {
								formulaBar.setTextEnabled(false);
								formulaBar.setFormulaEnabled(true);
								formulaBar.setFormula(oMember.id);
							} else {
								formulaBar.setText(oMember.id);

								var memeberId = oMember.id.slice(oMember.id.lastIndexOf("[") + 1, oMember.id.length - 1);

								if (memberFormulaObject && memberFormulaObject.dimensionId === oDimension.id &&
									memberFormulaObject.data && memberFormulaObject.data[memeberId]) {
									formulaBar.setFormula(memberFormulaObject.data[memeberId].formula);
									//current forcused member cell data
									//this.memberFormulaObject.currentMember = oMember.id;
								} else {
									formulaBar.setFormula("");
								}
							}
						}
	                }
                }                   
            } else if ($target.hasClass("dummyCell")) { //dummy cell
				//update formula bar status
				var CELL_FLAG = sap.fpa.ui.control.infra.constants.Analyticgrid.CELL_FLAG;
				var cellKey = this._buildCellKey(col, row);
				var cellObj = this.hashOfCustomCellData[cellKey];
				if (!cellObj || (cellObj && cellObj.flags && cellObj.flags === CELL_FLAG.EDITABLE)) {
					formulaBar.setTextEnabled(true);
					formulaBar.setFormulaEnabled(true);	            
				} else {
					formulaBar.setTextEnabled(false);
					formulaBar.setFormulaEnabled(false);	            
				}
				//update formula bar display
				formulaBar.setText($target.text());
				formulaBar.setFormula("");
				var key = this._buildCellKey(col, row);
				if(this.hashOfFormulas[key]) {
					formulaBar.setFormula(this.hashOfFormulas[key]);
				}            
	        }
        }
    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._getDecorator = function(type, attrs) {
	var decorators = this.hashOfDecorators;
	var decorator = decorators[type];
	var pos, styles, distance;
	var result;

	attrs = attrs.reverse();

	if(!decorator) {
		return;
	}

	while(attrs.length > 0) {
		var attr = attrs.pop();
		decorator = decorator[attr];
		if(!decorator) {
			return;
		}
	}

	pos = decorator.position;
	styles = decorator.styles;
	distance = (decorator.distance !== undefined && decorator.distance !== null)?decorator.distance:0;


	if(pos !== undefined && styles !== undefined) {
		result = {
			position : pos,
			styles : styles,
			distance : distance
		};
	}

	return result;
};

//beta phase, please only use this for forecast layout atm
//if you need to use this, please contact qianze.zhang@sap.com
sap.fpa.ui.control.analyticgrid.Grid.prototype._drawCellDecorator = function() {
	var decorators = this.decorators;
	var id = this.getId();
	var $tbl = $("#" + id + " .sapEpmUiControlAnalyticgridGridTableInner");
	var $decorators = $tbl.siblings(".gridCellDecorator");
	var CELL_POS = sap.fpa.ui.control.infra.constants.Analyticgrid.CELL_POS;
	var i = 0,
		iTemp = 0;
	var sKey = "";
	if(decorators) {
		for(i = 0; i < decorators.length; i++) {
			var decorator = decorators[i];
			var x = decorator.x, y = decorator.y;
			var cell = $tbl.find("td[x='"+x+"'][y='"+y+"']");
			if(cell.length !== 0) {
				//if element found
				var decDom = null;
				if(i >= $decorators.length) {
					decDom = $("<div class='gridCellDecorator'></div>").insertAfter($tbl);
				} else {
					decDom = $decorators.eq(i);
				}
				var cellWidth = cell.outerWidth();
				var cellHeight = cell.outerHeight();
				var cellOffset = cell.offset();
				for(sKey in decorator.styles) {
					var val = decorator.styles[sKey];
					decDom.css(sKey, val);
				}
				switch(decorator.position) {
					case CELL_POS.BOTTOM:
						decDom.width(cellWidth);
						decDom.outerHeight(4);
						decDom.offset({top: cellOffset.top + cellHeight - 4, left: cellOffset.left});
						break;
				}
			}
		}
		iTemp = i;
		//if more decorators needs to be gone
		
		for(i = iTemp; i < $decorators.length; i++) {
			$decorators.eq(i).remove();
		}
	}
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._drawSelectionBox = function() {
    var id = this.getId();
    var $selectionBox = $("#" + id + "-selectionBox");
    var $dragger = $("#" + id + "-dragger");
    var draggerLength = $dragger.outerWidth();
    var borderStyle = this.draggerOrigin ? "dashed" : "solid";
    var numberOfSelectedRegions = 0;
    var oGrid = this;
    var inEditMode = this.inEditMode;
    var boxShadow = inEditMode?"2px 2px 3px 0px rgba(128, 129, 132, 0.5)":"";

    var borderWidth = 1;
    var POSITION_OF_ALL = this.POSITION_OF_ALL;
	var i = 0,
		j = 0;
	var $cell = null;
	var firstFound = false;
	var $firstDummyCell = null;
    var drawBox = function(oRegion, selectionBox) {
        var x1 = oRegion.x1, x2 = oRegion.x2, y1 = oRegion.y1, y2 = oRegion.y2, width = 0, height = 0, left = 0, top = 0, right = 0, bottom = 0, $leftTop, $rightTop, $leftBottom, $rightBottom, rightBottomX, rightBottomY;

        if (x2 === POSITION_OF_ALL && y2 === POSITION_OF_ALL) {
       	
            $leftTop = $("#" + id + " td[x='"+ x1 + "'][y='" + y1 + "']");

            if ($leftTop.length === 0 ) {
            	$firstDummyCell = $("#" + id + " td.dummyCell:first");
                var firstX = $firstDummyCell.attr("x");
            	var firstY = $firstDummyCell.attr("y");
            	if (firstY > y1 && firstX > x1) {
            		$leftTop = $firstDummyCell;
            	} else if (firstY > y1) {
                    $leftTop = $("#" + id + " td[x='"+ x1 +"'][y='" + firstY + "']");
                } else if (firstX > x1) {
                    $leftTop = $("#" + id + " td[x='"+ firstX + "'][y='" + y1 + "']");
                } 
            }

        	left = $leftTop.offset().left;
            top = $leftTop.offset().top;

            jQuery.extend(oGrid.selectionBoxOption.style, {
                width : "100%",
                height : "100%",
                display : "block",
                "border-style" : borderStyle,
                "border-width" : borderWidth + "px",
                "-webkit-box-shadow" : boxShadow
            });

            jQuery.each(oGrid.selectionBoxOption.style, function(key, val) {
                selectionBox.css(key, val);
            });

            selectionBox.offset({
                left : left + 1,
                top : top + 1
            });

            $dragger.css("display", "none");
        } else if (x2 === POSITION_OF_ALL || y2 === POSITION_OF_ALL) {
            var flagOutOfRange = false;

            //whole row
            if (x2 === POSITION_OF_ALL) {
                //only have leftTop and leftBottom
                $leftTop = $("#" + id + " td[x='" + x1 +"'][y='" + y1 + "']").eq(0);
                $leftBottom = $("#" + id + " td[x='"+ x1 + "'][y='" + y2 + "']").eq(0);

                if ($leftTop.length === 0 || $leftBottom.length === 0) {
                    firstFound = false;
                    for (i = y1; i <= y2; i++) {
                        $cell = $("#" + id + " td[y='" + i + "']").eq(1);

                        if (!$.isEmptyObject($cell) && $cell.length === 1) {
                            if (!firstFound) {
                                firstFound = true;
                                $leftTop = $cell;
                            }
                            if (firstFound) {
                                $leftBottom = $cell;
                            }
                        }
                    }

                    if (!firstFound) {
                        flagOutOfRange = true;
                    }
                }

                if (!flagOutOfRange) {
                    left = $leftTop.offset().left;
                    top = $leftTop.offset().top;
                    bottom = $leftBottom.offset().top + $leftBottom.outerHeight();

                    height = bottom - top - 1 - 2 * borderWidth + "px";
                    width = "100%";
                }

            } else if (y2 === POSITION_OF_ALL) {
                //only have leftTop and rightTop
                $leftTop = $("#" + id + " td[x='" + x1 + "'][y='"+ y1 + "']").eq(0);
                $rightTop = $("#" + id + " td[x='" + x2 + "'][y='"+ y1 + "']").eq(0);

                if ($leftTop.length === 0 || $rightTop.length === 0) {
                    firstFound = false;
                    for (i = x1; i <= x2; i++) {
                        $cell = $("#" + id + " td[x='" + i + "']").eq(1);

                        if (!$.isEmptyObject($cell) && $cell.length === 1) {
                            if (!firstFound) {
                                firstFound = true;
                                $leftTop = $cell;
                            }
                            if (firstFound) {
                                $rightTop = $cell;
                            }
                        }
                    }

                    if (!firstFound) {
                        flagOutOfRange = true;
                    }
                }

                if (!flagOutOfRange) {
                    left = $leftTop.offset().left;
                    top = $leftTop.offset().top;
                    right = $rightTop.offset().left + $rightTop.outerWidth();

                    width = right - left - 1 - 2 * borderWidth + "px";
                    height = "100%";
                }
            }

            if (flagOutOfRange) {
                selectionBox.css("display", "none");
            } else {

                jQuery.extend(oGrid.selectionBoxOption.style, {
                    width : width,
                    height : height,
                    display : "block",
                    "border-style" : borderStyle,
                    "border-width" : borderWidth + "px",
                    "-webkit-box-shadow" : boxShadow
                });

                jQuery.each(oGrid.selectionBoxOption.style, function(key, val) {
                    selectionBox.css(key, val);
                });

                selectionBox.offset({
                    left : left + 1,
                    top : top + 1
                });
            }

            $dragger.css("display", "none");
        } else {
            // shink to visiable part of selected region
            for (i = x1; i <= x2; i++) {
                for (j = y1; j <= y2; j++) {
                    $leftTop = $("#" + id + " td[x='" + i + "'][y='" + j + "']");
                    if (!$.isEmptyObject($leftTop) && $leftTop.length === 1) {
                        break;
                    }
                }

                if (!$.isEmptyObject($leftTop) && $leftTop.length === 1) {
                    x1 = i;
                    y1 = j;
                    break;
                }
            }

            for (i = x2; i >= x1; i--) {
                for (j = y2; j >= y1; j--) {
                    $rightBottom = $("#" + id + " td[x='" + i + "'][y='" + j + "']");
                    if (!$.isEmptyObject($rightBottom) && $rightBottom.length === 1) {
                        break;
                    }
                }
                if (!$.isEmptyObject($rightBottom) && $rightBottom.length === 1) {
                    x2 = i;
                    y2 = j;
                    break;
                }
            }

            var oMergedCell = oGrid._getMergedCell(x2, y2);
            $leftTop = $("#" + id + " td[x='" + x1 + "'][y='" + y1 + "']");

            // find right-top cell
            var x2Tmp = oMergedCell && oMergedCell.colSpan ? x2 + oMergedCell.colSpan - 1 : x2;
            $rightTop = $("#" + id + " td[x='" + x2Tmp + "'][y='" + y1 + "']");            
			if(!$rightTop.is(":visible")) {
			    for(i = x2Tmp; i >= x1; i--) {
				    $rightTop = $("#" + id + " td[x='" + i + "'][y='" + y1 + "']");
				    if($rightTop.is(":visible") && $rightTop.attr("colspan")) {
				        break;
				    }
				}
			}

            // find left-bottom cell
            var y2Tmp = oMergedCell && oMergedCell.rowSpan ? y2 + oMergedCell.rowSpan - 1 : y2;
            $leftBottom = $("#" + id + " td[x='" + x1 + "'][y='" + y2Tmp + "']");	
            if(!$leftBottom.is(":visible")) {
				for(i = y2Tmp; i >= y1; i--) {
					$leftBottom = $("#" + id + " td[x='" + x1 + "'][y='" + i + "']");
					if($leftBottom.is(":visible") && $leftBottom.attr("colspan")) {
						break;
					}
				}
            }

            $rightBottom = $("#" + id + " td[x='" + x2 + "'][y='" + y2 + "']");

            rightBottomX = $rightBottom.attr("x");
            rightBottomY = $rightBottom.attr("y");

            //if element not visible
            if ($leftTop.length === 0 && $leftBottom.length === 0 && $rightBottom.length === 0 && $rightTop.length === 0) {
                $dragger.css("display", "none");
                selectionBox.css("display", "none");
            } else {
                //else calculate 
                if ($leftTop.length !== 0 || $leftBottom.length !== 0) {
                    left = ($leftTop.length !== 0) ? $leftTop.offset().left : $leftBottom.offset().left;
                } else {
                    left = 0;
                }

                if ($leftTop.length !== 0 || $rightTop.length !== 0) {
                    top = ($leftTop.length !== 0) ? $leftTop.offset().top : $rightTop.offset().top;
                } else {
                    top = 0;
                }

                if ($rightBottom.length !== 0 || $rightTop.length !== 0) {
                    right = ($rightBottom.length !== 0) ? $rightBottom.offset().left + $rightBottom.outerWidth()
                        : $rightTop.offset().left + $rightTop.outerWidth();
                } else {
                    right = this.frameWidth;
                }

                if ($rightBottom.length !== 0 || $leftBottom.length !== 0) {
                    bottom = ($rightBottom.length !== 0) ? $rightBottom.offset().top + $rightBottom.outerHeight()
                        : $leftBottom.offset().top + $leftBottom.outerHeight();
                } else {
                    bottom = this.frameHeight;
                }
            }

            width = right - left - 1 - 2 * borderWidth;
            height = bottom - top - 1 - 2 * borderWidth;
            jQuery.extend(oGrid.selectionBoxOption.style, {
                width : width + "px",
                height : height + "px",
                display : "block",
                "border-style" : borderStyle,
                "border-width" : borderWidth + "px",
                "-webkit-box-shadow" : boxShadow
            });

            jQuery.each(oGrid.selectionBoxOption.style, function(key, val) {
				selectionBox.css(key, val);
            });

            selectionBox.offset({
                left : left + 1,
                top : top + 1
            });

            numberOfSelectedRegions++;

            if (inEditMode) {
                $dragger.css("display", "none");
            } else {
                $dragger.css("display", (numberOfSelectedRegions > 1) ? "none" : "block");
                $dragger.offset({
                    left : right - draggerLength / 2,
                    top : bottom - draggerLength / 2
                });
                $dragger.attr({
                    dx : rightBottomX,
                    dy : rightBottomY
                });
            }
        }
    };

    // clean multiple selection box
    $("div[id^=" + id + "-multiSelectionBox]").remove();

    if (oGrid.selectionBoxOption.drawMultiple) {
        jQuery.each(
            oGrid.oSelectedRegions,
            function(key, oRegion) {
                var $multiSelectionBox = $("<div id='" + id + "-multiSelectionBox-" + key +
                    "' class='selectionBox'></div>");
                $selectionBox.after($multiSelectionBox);
                $selectionBox.css("display", "none");
                drawBox(oRegion, $multiSelectionBox);
            });
    } else {
        jQuery.each(oGrid.oSelectedRegions, function(key, oRegion) {
            drawBox(oRegion, $selectionBox);
        });
    }
};

/*
 *	reset grid help resets grid when necessary (cell width, cell height, etc)
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype.resetGrid = function() {//only for invitee
    this.oColWidth = {};
    this.oRowHeight = {};
};

/**
 * Highlight cells with list of member cotnexts
 * 
 * @param  {Object} selectedRegions     selected member contexts or cell coordinates
 * @param  {Object} oHighlightBoxOption Highlight box options, including style, 
 *                                      if support drawing multiple selections boxes, etc.
 *                                      <pre>
 *                                          {
 *                                              drawMultiple : true
 *                                              style : {
 *                                                  "border-color" : "yellow"
 *                                              }
 *                                          }
 *                                      </pre>
 * @param {bool} strict if member context check is in strict mode
 * @return {int}  number of highlighted cells
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype.highlightCells = function(selectedRegions, oHighlightBoxOption, strict) {
    var oGrid = this, selectedCells = {}, numberOfRegion = 0, focusedCell;
    strict = strict || false;
    var that = this;

    jQuery.each(selectedRegions, function(idx, region) {
        jQuery.each(region, function(idx, memberContext) {
            var oRowCol;
            //if has x & y then it's trying to highlight via coordinates
            if (memberContext.x !== undefined && memberContext.y !== undefined) {
                oRowCol = {
                    col : memberContext.x,
                    row : memberContext.y
                };
            } else {
                oRowCol = oGrid._convertMemberContextToColRow(memberContext, strict);
            }

            var oRowColKey = that._buildCellKey(oRowCol.col, oRowCol.row);
            if (oRowCol.col >= 0 && oRowCol.row >= 0 && !selectedCells[oRowColKey]) {
                numberOfRegion++;
                selectedCells[oRowColKey] = oRowCol;
                focusedCell = oRowCol;
            }
        });
    });

    if (numberOfRegion > 0) {
        oGrid.oSelectedRegions = oGrid.mergeSelectedCells(selectedCells);
    } else {
        // to clear last style of highlight cell if no cell found.
        this._setSelectionBoxDefaultOption();
    }

    if (focusedCell) {
        if (oHighlightBoxOption) {
            jQuery.extend(true, oGrid.selectionBoxOption, oHighlightBoxOption);
        }

        var oSelectedRegions = this.getSelectedMemberContext(), iCol = focusedCell.col, iRow = focusedCell.row, oFocusedCellContext = {};

        //skip the member cells
        if (iCol >= this.numberOfHeaderCols && iRow >= this.numberOfHeaderRows) {
            oFocusedCellContext = this._memberContextOfDataCell(iCol, iRow);
        }

        setTimeout(jQuery.proxy(function() { //make UI event asyncronized
            this.fireSelectionChanged({
                status : "start",
                focusedCell : oFocusedCellContext,
                selectedRegions : oSelectedRegions
            });
        }, this), 1);

        this._moveToCell(iCol, iRow);
    }

    this._redrawAffectCells();
    return numberOfRegion;
};

/**
 * Merges data grid cells to regions. Neighboring cells will be combine together region. 
 * The merged region must be rectangle.
 * 
 * @param {object} selectedCells An object presents single cells, structure as below
 *                         <pre>
 *                             {
 *                                 "colVal-rowVal": {
 *                                     col: colVal,
 *                                     row: rowVal
 *                                 }
 *                             }
 *                         </pre>      
 * @return {object} An object presents merged regions, structure as below:
 *                     <pre>
 *                         {
 *                             "x1Val-y1Val-x2Val-y2Val": {
 *                                 x1: x1Val,
 *                                 y1: y1Val,
 *                                 x2: x2Val,
 *                                 y2: y2Val
 *                             }
 *                         }
 *                     </pre>
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype.mergeSelectedCells = function(selectedCells) {
    var mergedRegions = {};
	var i = 0,
		k = 0;
    var contains = function(val, valArray) {
        var res = false;
        for (i = 0; i < valArray.length; i++) {
            if (valArray[i] === val) {
                res = true;
                break;
            }
        }
        return res;
    };

    var merge = function() {
        var cols = [], rows = [], cellMinCol, cellMinRow, extendedCol, extendedRow;
		var x = 0,
			y = 0;
        jQuery.each(selectedCells, function(key, item) {
            if (!contains(item.col, cols)) {
                cols.push(item.col);
            }
            if (!contains(item.row, rows)) {
                rows.push(item.row);
            }
        });

        // order by esc 
        cols.sort(function(a, b) {
            return a > b ? 1 : -1;
        });
        rows.sort(function(a, b) {
            return a > b ? 1 : -1;
        });

        // specify base cell (with min row and min col) as extend start point
        cellMinRow = rows[0];
        for (k = 0; k < cols.length; k++) {
            if (selectedCells[cols[k] + "-" + cellMinRow]) {
                cellMinCol = cols[k];
                break;
            }
        }

        // extend units
        extendedCol = cellMinCol;
		extendedRow = cellMinRow;
        for (x = cellMinCol; x <= cols[cols.length - 1]; x++) {
            if (!selectedCells[x + "-" + cellMinRow]) {
                break;
            }
            extendedCol = x;
            delete selectedCells[x + "-" + cellMinRow];
        }
        for (y = cellMinRow + 1; y <= rows[rows.length - 1]; y++) {
            var noBreak = true;

            for (x = cellMinCol; x <= extendedCol; x++) {
                if (!selectedCells[x + "-" + y]) {
                    noBreak = false;
                }
            }

            if (!noBreak) {
                break;
            }

            extendedRow = y;
            for (x = cellMinCol; x <= extendedCol; x++) {
                delete selectedCells[x + "-" + extendedRow];
            }
        }

        mergedRegions[cellMinCol + "-" + cellMinRow + "-" + extendedCol + "-" + extendedRow] = {
            x1 : cellMinCol,
            y1 : cellMinRow,
            x2 : extendedCol,
            y2 : extendedRow
        };
    };

    while (true) {
        var notMergedUnitCount = 0;
		var fNotMergedUnitCount = function() {
			notMergedUnitCount++;
		};
        jQuery.each(selectedCells, fNotMergedUnitCount);

        if (notMergedUnitCount === 0) {
            break;
        }

        merge();
    }

    return mergedRegions;
};

/*
 * we accept two kinds of context data
 * {x-y:{custom}} or {dimId:{member}}
 * this is a helper function which helps you distinguish'em
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype._isCustomContext = function(key) {
    var reg = new RegExp("^[0-9]+-[0-9]+$");
    return reg.test(key);
};

/**
 * By default, selection box will use default style, 
 * and there is only one selection box once at a time. 
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype._setSelectionBoxDefaultOption = function() {
    var customerMarkStyle = this.selectionBoxOption.customHighlightClass;
    if(customerMarkStyle && customerMarkStyle !== "") {
		$("#" + this.getId() + " td." + customerMarkStyle).removeClass(customerMarkStyle);
    }
    
    var defaultOption = jQuery.extend(true, {}, this.SELECTIONBOX_DEFAULTOPTION);
    this.selectionBoxOption = defaultOption;
};

/**
 * this is for internal use only
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype._getInternalCellObject = function(x, y) {
    var CELL_TYPE = sap.fpa.ui.control.analyticgrid.Grid._CELL_TYPE;
    var oCell = this.hashOfCellObjects[this._buildCellKey(x, y)] || {
        type : CELL_TYPE.DUMMY_CELL,
        val : "",
        x : x,
        y : y
    };

    return jQuery.extend(true, {}, oCell);
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._buildCellKey = function(x, y) {
	return x + "-" + y;
};

/**
 * build the whole grid content following normal coordinates
 * for the moment it only build header contents
 * TODO refactoring later
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype.buildGridContent = function() {
    var pid = this.profilingEnabled && this._PROFILER_.begin("analyticgrid.Grid.exportGridContent");

    //prepare variables
    var showColHeaderVertically = this.getShowColumnHeaderVertically();
    var col = 0, row = 0;
    var headerColDisplayIndexes = [];
    var headerRowDisplayIndexes = [];

    //calculate all cells
    var resultCells = {};
    var CELL_TYPE = sap.fpa.ui.control.analyticgrid.Grid._CELL_TYPE;
	var indexOfDim = 0,
		i = 0,
		j = 0;
	var dim = null,
		cntOfAttrs = null;
	var colIndex = 0,
		rowIndex = 0;
	var oCell = null,
		attrName = null;
	var colDisplayIndex = 0;
	var attrCnt = null;
	var colDelta = 0,
		rowDelta = 0;
	var dimBase = 0;
	var rowDisplayIndex = 0,
		oTuple = null,
		base = 0;
	var mbrCtx = null,
        oSize = null,
		oMember = null,
		flags = 1;
	var attrIndex = 0;
	var attrVal = "";
    //process header column display indexes
    for (indexOfDim = this.numberOfRowDimensions - 1; indexOfDim >= 0; indexOfDim--) {
        dim = this.rowAxis.dimensions[indexOfDim];
        cntOfAttrs = dim.attrs ? dim.attrs.length : 0;

        for (i = 0; i < cntOfAttrs + 1; i++) {
            headerColDisplayIndexes.push(this.numberOfHeaderCols - 1 - col - i); //push in array in reversed order
        }
        col += cntOfAttrs + 1;
    }

    headerColDisplayIndexes.reverse(); //reverse to recover order in right sequence

    if (showColHeaderVertically === true) {
        this.numberOfHeaderRows -= 1; // No header of col, just member
    }

    //process header row display indexes
    for (indexOfDim = this.numberOfColDimensions - 1; indexOfDim >= 0; indexOfDim--) {
        dim = this.colAxis.dimensions[indexOfDim];

        if(this.getFilterDimensions()[dim.id]) {
            continue;
        }

        cntOfAttrs = dim.attrs ? dim.attrs.length : 0;

        for (i = 0; i < cntOfAttrs + 1; i++) {
            headerRowDisplayIndexes.push(this.numberOfHeaderRows - 1 - row - i); //push in array in reversed order
        }
        row += cntOfAttrs + 1;
    }

    if (showColHeaderVertically === true) {
        this.numberOfHeaderRows += 1; // No header of col, just member
    }

    var indexOfLastHeaderRow = this.numberOfHeaderRows - 1;
    headerRowDisplayIndexes.unshift(indexOfLastHeaderRow);
    row++;

    headerRowDisplayIndexes.reverse(); //reverse to recover order in right sequence 

    //column dimension header and tuples
    colDelta = 0;
	rowDelta = 0;
    colDelta += headerColDisplayIndexes.length;

    dimBase = 0;
    if (headerColDisplayIndexes.length > 0) {
        colIndex = colDelta - 1; // Print header on the left of Member, on the top of row dim
        for (col = 0; col < this.numberOfColDimensions; col++) {
            rowIndex = dimBase + rowDelta;
            dim = this.colAxis.dimensions[col];

            if(this.getFilterDimensions()[dim.id]) {
                continue;
            }

            oCell = {
            	x : colIndex,
            	y : rowIndex
            };
            oCell.type = CELL_TYPE.COL_DIMENSION_HEADER;
            oCell.val = dim.id;
            oCell.formatted = dim.desc || dim.id;
            oCell.attrs = {
                dimId : dim.id
            };

            resultCells[this._buildCellKey(colIndex, rowIndex)] = oCell;

            dimBase++;
            rowIndex++;

            attrCnt = dim.attrs ? dim.attrs.length : 0;
            dimBase += attrCnt;
            for (j = 0; j < attrCnt; j++) {
				attrName = dim.attrs[j].desc || dim.attrs[j].id;
                oCell = {
                	x: colIndex,
                	y: rowIndex
                };

                oCell.type = CELL_TYPE.COL_DIMENSION_HEADER_ATTR;
                oCell.val = dim.attrs[j].id;
                oCell.formatted = attrName;
            	resultCells[this._buildCellKey(colIndex, rowIndex)] = oCell;
                rowIndex++;
            }

        }
    }

    rowDelta += 1;
    if (showColHeaderVertically) {
        rowDelta -= 1; // Use the same row, Member list on the right of header
    }

    colIndex = colDelta;
    for (col = 0; col < this.numberOfDataCols; col++) {
        colDisplayIndex = col + this.numberOfHeaderCols;
        oTuple = this.colAxis.tuples[col];
		base = 0;

        for (i = 0; i < oTuple.length; i++) {
            dim = this.colAxis.dimensions[i];

            if(this.getFilterDimensions()[dim.id]) {
                continue;
            }

            mbrCtx = oTuple.slice(0, i + 1).join("/");
            oSize = this.colMemberContext2Size[mbrCtx];

            oCell = {
            	x: colDisplayIndex,
            	y: rowDelta + base
            };
            oMember = dim.members[oTuple[i]];
            flags = 1;

            oCell.type = CELL_TYPE.COL_DIMENSION_MEMBER;
            oCell.val = oMember.shortId || oMember.id;
            oCell.formatted = oMember.desc || oCell.val;
            oCell.flags = flags;
            oCell.level = oMember.level || 0;
            oCell.attrs = {
                mbrCtx : mbrCtx
            };

            resultCells[this._buildCellKey(colDisplayIndex, rowDelta + base)] = oCell;

            base++;

            if (dim.attrs) {
                attrCnt = dim.attrs.length;
                for (j = 0; j < attrCnt; j++) {

                    oCell = {
                    	x: colDisplayIndex,
                    	y: rowDelta + base
                    };
					attrIndex = oMember.attr &&
                        oMember.attr.length > j ? oMember.attr[j] : -1;
					attrVal = attrIndex >= 0 ? dim.attrs[j].choices[attrIndex]: "";

                    oCell.type = CELL_TYPE.COL_DIMENSION_MEMBER_ATTR;
                    oCell.val = attrVal;
                    oCell.formatted = attrVal;
                    oCell.flags = 1;
                    oCell.level = 0;
                    oCell.attrs = {
                        mbrCtx : mbrCtx
                    };
                    resultCells[this._buildCellKey(colIndex, rowDelta + base)] = oCell;
                    base++;
                }
            }
        }

        colIndex++;
    }

    //row dimension header and tuples
    colDelta = 0;
	rowDelta = 0;
    rowDelta += headerRowDisplayIndexes.length - 1;

    dimBase = 0;
    for (row = 0; row < this.numberOfRowDimensions; row++) {
        colIndex = dimBase + colDelta;

        dim = this.rowAxis.dimensions[row];

        if(this.getFilterDimensions()[dim.id]) {
            continue;
        }

        oCell = {
        	x: colIndex,
        	y: rowDelta
        };
        oCell.type = CELL_TYPE.ROW_DIMENSION_HEADER;
        oCell.val = dim.id;
        oCell.formatted = dim.desc || dim.id;

        oCell.attrs = {
            dimId : dim.id
        };

        resultCells[this._buildCellKey(colIndex, rowDelta)] = oCell;

        dimBase++;
        colIndex++;

        if (dim.attrs) {
            attrCnt = dim.attrs.length;
            dimBase += attrCnt;
            for (j = 0; j < attrCnt; j++) {
                oCell = {
                	x: colIndex,
                	y: rowDelta
                };
				attrName = dim.attrs[j].desc || dim.attrs[j].id;

                oCell.type = CELL_TYPE.ROW_DIMENSION_HEADER_ATTR;
                oCell.val = dim.attrs[j].id;
                oCell.formatted = attrName;
        		resultCells[this._buildCellKey(colIndex, rowDelta)] = oCell;
                colIndex++;
            }
        }
    }

    rowDelta += 1;
    rowIndex = rowDelta;
    for (row = 0; row < this.numberOfDataRows; row++) {

        rowDisplayIndex = row + this.numberOfHeaderRows;
        oTuple = this.rowAxis.tuples[row];
		base = 0;

        for (i = 0; i < oTuple.length; i++) {
            dim = this.rowAxis.dimensions[i];

            if(this.getFilterDimensions()[dim.id]) {
                continue;
            }
            
            mbrCtx = oTuple.slice(0, i + 1).join("/");
            oSize = this.rowMemberContext2Size[mbrCtx];
            oCell = {
            	x: colDelta + base,
            	y: rowDisplayIndex
            };
			oMember = dim.members[oTuple[i]];
            flags = 1;

            oCell.type = CELL_TYPE.ROW_DIMENSION_MEMBER;
            oCell.val = oMember.shortId || oMember.id;
            oCell.formatted = oMember.desc || oCell.val;
            oCell.flags = flags;
            oCell.level = oMember.level || 0;
            oCell.attrs = {
                mbrCtx : mbrCtx
            };
            resultCells[this._buildCellKey(colDelta + base, rowDisplayIndex)] = oCell;
            base++;

            if (dim.attrs) {
                attrCnt = dim.attrs.length;
                for (j = 0; j < attrCnt; j++) {

                    oCell = {
                    	x: colDelta + base,
                    	y: rowIndex
                    };
                    attrIndex = oMember.attr && oMember.attr.length > j ? oMember.attr[j] : -1;
                    attrVal = attrIndex >= 0 ? dim.attrs[j].choices[attrIndex] : "";

                    oCell.type = CELL_TYPE.ROW_DIMENSION_MEMBER_ATTR;
                    oCell.val = attrVal;
                    oCell.formatted = attrVal;
                    oCell.flags = 0;
                    oCell.level = 0;
                    oCell.attrs = {
                        mbrCtx : mbrCtx
                    };
            		resultCells[this._buildCellKey(colDelta + base, rowDisplayIndex)] = oCell;
                    base++;
                }
            }
        }

        rowIndex++;
    }

    //data cells
  //   var NULL_VALUE = sap.fpa.ui.control.infra.constants.Analyticgrid.NULL_VALUE;
  //   if (this.oGridData && !jQuery.isEmptyObject(this.oGridData.cells)) {
  //       colDelta = 0;
		// rowDelta = 0;

  //       colDelta += headerColDisplayIndexes.length;
  //       rowDelta += headerRowDisplayIndexes.length;

  //       colIndex = colDelta;
  //       for (col = 0; col < numberOfColTuples; col++) {
  //           colDisplayIndex = col + this.numberOfHeaderCols;
  //           rowIndex = rowDelta;

  //           for (row = 0; row < numberOfRowTuples; row++) {
  //               rowDisplayIndex = row + this.numberOfHeaderRows;

  //               oCell = resultCells2D[rowIndex][colIndex];
  //               idx = row * numberOfColTuples + col;
  //               flags = 0;
  //               formattedVal = "";
  //               cellVal = 0;
  //               oCellData = this.hashOfCellData[idx];
  //               alertLevel = 0;

  //               // for data cells
  //               if (this.modifiedCells[idx]) {
  //                   cellVal = this.modifiedCells[idx].val;
  //                   formattedVal = this.modifiedCells[idx].formatted;
  //                   if (!formattedVal) {
  //                       formattedVal = this._formatDataCell(cellVal, this.modifiedCells[idx].idx);
  //                       this.modifiedCells[idx].formatted = formattedVal;
  //                   }
  //                   flags = oCellData ? oCellData.flags : (this._isCellEditable(idx) ? CELL_FLAG.EDITABLE : 0);
  //                   alertLevel = this.modifiedCells[idx].alertLevel;
  //               } else {
  //                   if (oCellData) {
  //                       flags = oCellData.flags;
  //                       cellVal = oCellData.val;
  //                       formattedVal = oCellData.formatted;
  //                       if (!formattedVal) {
  //                           formattedVal = this._formatDataCell(cellVal, oCellData.idx);
  //                           this.hashOfCellData[idx].formatted = formattedVal;
  //                       }
  //                       alertLevel = oCellData.alertLevel;
  //                   } else {
  //                       flags = this._isCellEditable(idx) ? CELL_FLAG.EDITABLE : 0;
  //                   }
  //               }

  //               oCell.x = colDisplayIndex;
  //               oCell.y = rowDisplayIndex;
  //               oCell.type = (formattedVal === NULL_VALUE) ? CELL_TYPE.NULL_CELL : CELL_TYPE.DATA_CELL;
  //               oCell.idx = idx;
  //               oCell.val = formattedVal;
  //               oCell.flags = flags;
  //               oCell.condition = alertLevel;
  //               oCell["cell-reference"] = {
		// 			context: this._memberContextOfColRow(oCell.x, oCell.y),
		// 			flags: flags,
		// 			x: oCell.x,
		// 			y: oCell.y
  //               };
  //               oCell.attrs = {
  //                   idx : idx,
  //                   row : rowIndex,
  //                   col : colIndex
  //               };

  //               rowIndex++;
  //           }

  //           colIndex++;
  //       }
  //   }

  //   //convert to 1D array
  //   var countOfRows = resultCells2D.length;
  //   for (row = 0; row < countOfRows; row++) {
  //       var countOfCols = resultCells2D[row].length;
  //       for (col = 0; col < countOfCols; col++) {
  //           oCell = resultCells2D[row][col];
  //           resultCells.push(oCell);
  //       }
  //   }
	if(this.profilingEnabled){
		this._PROFILER_.end(pid);
	}

    return resultCells;
};

/**
 * export to a list of cell objects for the whole grid content
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype.exportGridContent = function() {
    var pid = this.profilingEnabled && this._PROFILER_.begin("analyticgrid.Grid.exportGridContent");

    //prepare variables
    var showColHeaderVertically = this.getShowColumnHeaderVertically();
    var numberOfColTuples = this.numberOfDataCols;
    var numberOfRowTuples = this.numberOfDataRows;
    var col = 0, row = 0;
    var headerColDisplayIndexes = [];
    var headerRowDisplayIndexes = [];

    //calculate all cells
    var resultCells = [];
    var resultCells2D = [];
    var CELL_TYPE = sap.fpa.ui.control.analyticgrid.Grid._CELL_TYPE;
    var CELL_FLAG = sap.fpa.ui.control.infra.constants.Analyticgrid.CELL_FLAG;
	var indexOfDim = 0,
		i = 0,
		j = 0;
	var dim = null,
		cntOfAttrs = null;
	var colIndex = 0,
		rowIndex = 0;
	var oCell = null,
		attrName = null;
	var colDisplayIndex = 0;
	var attrCnt = null;
	var colDelta = 0,
		rowDelta = 0,
		rowSeq = 0;
	var dimBase = 0;
	var rowDisplayIndex = 0,
		oTuple = null,
		base = 0;
	var mbrCtx = null,
        oSize = null,
		mbrCtxCanHide = false,
		oMember = null,
		flags = 1;
	var attrIndex = 0;
	var attrVal = "";
	var idx = 0,
		formattedVal = "",
		cellVal = 0,
		oCellData = null,
		alertLevel = 0;
    //process header column display indexes
    for (indexOfDim = this.numberOfRowDimensions - 1; indexOfDim >= 0; indexOfDim--) {
        dim = this.rowAxis.dimensions[indexOfDim];

        if(this.getFilterDimensions()[dim.id]) {
            continue;
        }

        cntOfAttrs = dim.attrs ? dim.attrs.length : 0;

        for (i = 0; i < cntOfAttrs + 1; i++) {
            headerColDisplayIndexes.push(this.numberOfHeaderCols - 1 - col - i); //push in array in reversed order
        }
        col += cntOfAttrs + 1;
    }

    headerColDisplayIndexes.reverse(); //reverse to recover order in right sequence

    if (showColHeaderVertically === true) {
        this.numberOfHeaderRows -= 1; // No header of col, just member
    }

    //process header row display indexes
    for (indexOfDim = this.numberOfColDimensions - 1; indexOfDim >= 0; indexOfDim--) {
        dim = this.colAxis.dimensions[indexOfDim];

        if(this.getFilterDimensions()[dim.id]) {
            continue;
        }

        cntOfAttrs = dim.attrs ? dim.attrs.length : 0;

        for (i = 0; i < cntOfAttrs + 1; i++) {
            headerRowDisplayIndexes.push(this.numberOfHeaderRows - 1 - row - i); //push in array in reversed order
        }
        row += cntOfAttrs + 1;
    }

    if (showColHeaderVertically === true) {
        this.numberOfHeaderRows += 1; // No header of col, just member
    }

    var indexOfLastHeaderRow = this.numberOfHeaderRows - 1;
    headerRowDisplayIndexes.unshift(indexOfLastHeaderRow);
    row++;

    headerRowDisplayIndexes.reverse(); //reverse to recover order in right sequence 

    rowSeq = 0;
    for (row = 0; rowSeq < this.numberOfTotalRows; row++) {
        rowDisplayIndex = row < this.numberOfHeaderRows ? headerRowDisplayIndexes[rowSeq] : row;

        resultCells2D.push([]);
        rowIndex = rowSeq;

        //initialize with dummy cells
        var colSeq = 0;
        for (col = 0; colSeq < this.numberOfTotalCols; col++) {
            colDisplayIndex = col < this.numberOfHeaderCols ? headerColDisplayIndexes[colSeq] : col;

            oCell = {
                type : CELL_TYPE.DUMMY_CELL,
                val : "",
                x : colDisplayIndex,
                y : rowDisplayIndex
            };

            resultCells2D[rowIndex].push(oCell);

            colSeq++;
        }

        rowSeq++;
    }

    //column dimension header and tuples
    colDelta = 0;
	rowDelta = 0;
    colDelta += headerColDisplayIndexes.length;

    dimBase = 0;
    if (headerColDisplayIndexes.length > 0) {
        colIndex = colDelta - 1; // Print header on the left of Member, on the top of row dim
        for (col = 0; col < this.numberOfColDimensions; col++) {
            rowIndex = dimBase + rowDelta;
            dim = this.colAxis.dimensions[col];

            if(this.getFilterDimensions()[dim.id]) {
                continue;
            }

            oCell = resultCells2D[rowIndex][colIndex];
            oCell.val = dim.desc || dim.id;
            oCell.type = CELL_TYPE.COL_DIMENSION_HEADER;

            oCell.attrs = {
                dimId : dim.id
            };
            dimBase++;
            rowIndex++;

            attrCnt = dim.attrs ? dim.attrs.length : 0;
            dimBase += attrCnt;
            for (j = 0; j < attrCnt; j++) {
                if (rowIndex >= resultCells2D.length || colIndex >= resultCells2D[rowIndex].length) {
                    break;
                }

                oCell = resultCells2D[rowIndex][colIndex];
				attrName = dim.attrs[j].desc || dim.attrs[j].id;

                oCell.type = CELL_TYPE.COL_DIMENSION_HEADER_ATTR;
                oCell.val = attrName;
                rowIndex++;
            }
        }
    }

    rowDelta += 1;
    if (showColHeaderVertically) {
        rowDelta -= 1; // Use the same row, Member list on the right of header
    }

    colIndex = colDelta;
    var colMbrCtxCanHide = {};
    for (col = 0; col < this.numberOfDataCols; col++) {
        colDisplayIndex = col + this.numberOfHeaderCols;
        oTuple = this.colAxis.tuples[col];
		base = 0;

        for (i = 0; i < oTuple.length; i++) {
            dim = this.colAxis.dimensions[i];

            if(this.getFilterDimensions()[dim.id]) {
                continue;
            }

            mbrCtx = oTuple.slice(0, i + 1).join("/");
            oSize = this.colMemberContext2Size[mbrCtx];

            mbrCtxCanHide = oSize.startTupleIndex !== col && colMbrCtxCanHide[mbrCtx];

            if (rowDelta + base >= resultCells2D.length || colIndex >= resultCells2D[rowDelta + base].length) {
                break;
            }

            oCell = resultCells2D[rowDelta + base][colIndex];
            oMember = dim.members[oTuple[i]];
            flags = 1;

            oCell.x = colDisplayIndex;
            oCell.type = CELL_TYPE.COL_DIMENSION_MEMBER;
            if (!mbrCtxCanHide) {
                //oCell.val = oMember.desc || oMember.id;
                if (!oMember.desc) {
                    oCell.val = oMember.shortId || oMember.id;
                } else {
                    oCell.val = oMember.desc;
                }

                oCell.flags = flags;
                oCell.level = oMember.level || 0;
            }
            oCell.attrs = {
                mbrCtx : mbrCtx
            };
            base++;

            if (dim.attrs) {
                attrCnt = dim.attrs.length;
                for (j = 0; j < attrCnt; j++) {
                    if (rowDelta + base >= resultCells2D.length) {
                        break;
                    }

                    oCell = resultCells2D[rowDelta + base][colIndex];
					attrIndex = oMember.attr &&
                        oMember.attr.length > j ? oMember.attr[j] : -1;
					attrVal = attrIndex >= 0 ? dim.attrs[j].choices[attrIndex]: "";

                    oCell.x = colDisplayIndex;
                    oCell.type = CELL_TYPE.COL_DIMENSION_MEMBER_ATTR;
                    if (!mbrCtxCanHide) {
                        oCell.val = attrVal;
                        oCell.flags = 1;
                        oCell.level = 0;
                    }
                    oCell.attrs = {
                        mbrCtx : mbrCtx
                    };
                    base++;
                }
            }

            colMbrCtxCanHide[mbrCtx] = true;
        }

        colIndex++;
    }

    //row dimension header and tuples
    colDelta = 0;
	rowDelta = 0;
    rowDelta += headerRowDisplayIndexes.length - 1;

    dimBase = 0;
    for (row = 0; row < this.numberOfRowDimensions; row++) {
        colIndex = dimBase + colDelta;

        dim = this.rowAxis.dimensions[row];

        if(this.getFilterDimensions()[dim.id]) {
            continue;
        }

        oCell = resultCells2D[rowDelta][colIndex];
        oCell.type = CELL_TYPE.ROW_DIMENSION_HEADER;
        oCell.val = dim.desc || dim.id;

        oCell.attrs = {
            dimId : dim.id
        };
        dimBase++;
        colIndex++;

        if (dim.attrs) {
            attrCnt = dim.attrs.length;
            dimBase += attrCnt;
            for (j = 0; j < attrCnt; j++) {
                if (colIndex >= resultCells2D[rowDelta].length) {
                    break;
                }

                oCell = resultCells2D[rowDelta][colIndex];
				attrName = dim.attrs[j].desc || dim.attrs[j].id;

                oCell.type = CELL_TYPE.ROW_DIMENSION_HEADER_ATTR;
                oCell.val = attrName;
                colIndex++;
            }
        }
    }

    rowDelta += 1;
    rowIndex = rowDelta;
    var rowMbrCtxCanHide = {};
    for (row = 0; row < this.numberOfDataRows; row++) {

        rowDisplayIndex = row + this.numberOfHeaderRows;
        oTuple = this.rowAxis.tuples[row];
		base = 0;

        for (i = 0; i < oTuple.length; i++) {
            if (rowIndex >= resultCells2D.length || colDelta + base >= resultCells2D[rowIndex].length) {
                break;
            }

            dim = this.rowAxis.dimensions[i];

            if(this.getFilterDimensions()[dim.id]) {
                continue;
            }

            mbrCtx = oTuple.slice(0, i + 1).join("/");
            oSize = this.rowMemberContext2Size[mbrCtx];
            mbrCtxCanHide = oSize.startTupleIndex !== row && rowMbrCtxCanHide[mbrCtx];
            oCell = resultCells2D[rowIndex][colDelta + base];
			oMember = dim.members[oTuple[i]];
            flags = 1;

            oCell.y = rowDisplayIndex;
            oCell.type = CELL_TYPE.ROW_DIMENSION_MEMBER;
            if (!mbrCtxCanHide) {
                if (!oMember.desc) {
                    oCell.val = oMember.shortId || oMember.id;
                } else {
                    oCell.val = oMember.desc;
                }
                oCell.flags = flags;
                oCell.level = oMember.level || 0;
            }
            oCell.attrs = {
                mbrCtx : mbrCtx
            };
            base++;

            if (dim.attrs) {
                attrCnt = dim.attrs.length;
                for (j = 0; j < attrCnt; j++) {

                    oCell = resultCells2D[rowIndex][colDelta + base];
                    attrIndex = oMember.attr && oMember.attr.length > j ? oMember.attr[j] : -1;
                    attrVal = attrIndex >= 0 ? dim.attrs[j].choices[attrIndex] : "";

                    oCell.y = rowDisplayIndex;
                    oCell.type = CELL_TYPE.ROW_DIMENSION_MEMBER_ATTR;
                    if (!mbrCtxCanHide) {
                        oCell.val = attrVal;
                        oCell.flags = 0;
                        oCell.level = 0;
                    }
                    oCell.attrs = {
                        mbrCtx : mbrCtx
                    };
                    base++;
                }
            }

            rowMbrCtxCanHide[mbrCtx] = true;
        }

        rowIndex++;
    }

    //data cells
    var NULL_VALUE = sap.fpa.ui.control.infra.constants.Analyticgrid.NULL_VALUE;
    if (this.oGridData && !jQuery.isEmptyObject(this.oGridData.cells)) {
        colDelta = 0;
		rowDelta = 0;

        colDelta += headerColDisplayIndexes.length;
        rowDelta += headerRowDisplayIndexes.length;

        colIndex = colDelta;
        for (col = 0; col < numberOfColTuples; col++) {
            colDisplayIndex = col + this.numberOfHeaderCols;
            rowIndex = rowDelta;

            for (row = 0; row < numberOfRowTuples; row++) {
                rowDisplayIndex = row + this.numberOfHeaderRows;

                oCell = resultCells2D[rowIndex][colIndex];
                idx = row * numberOfColTuples + col;
                flags = 0;
                formattedVal = "";
                cellVal = 0;
                oCellData = this.hashOfCellData[idx];
                alertLevel = 0;

                // for data cells
                if (this.modifiedCells[idx]) {
                    cellVal = this.modifiedCells[idx].val;
                    formattedVal = this.modifiedCells[idx].formatted;
                    if (!formattedVal) {
                        formattedVal = this._formatDataCell(cellVal, this.modifiedCells[idx].idx);
                        this.modifiedCells[idx].formatted = formattedVal;
                    }
                    flags = oCellData ? oCellData.flags : (this._isCellEditable(idx) ? CELL_FLAG.EDITABLE : 0);
                    alertLevel = this.modifiedCells[idx].alertLevel;
                } else {
                    if (oCellData) {
                        flags = oCellData.flags;
                        cellVal = oCellData.val;
                        formattedVal = oCellData.formatted;
                        if (!formattedVal) {
                            formattedVal = this._formatDataCell(cellVal, oCellData.idx);
                            this.hashOfCellData[idx].formatted = formattedVal;
                        }
                        alertLevel = oCellData.alertLevel;
                    } else {
                        flags = this._isCellEditable(idx) ? CELL_FLAG.EDITABLE : 0;
                    }
                }

                oCell.x = colDisplayIndex;
                oCell.y = rowDisplayIndex;
                oCell.type = (formattedVal === NULL_VALUE) ? CELL_TYPE.NULL_CELL : CELL_TYPE.DATA_CELL;
                oCell.idx = idx;
                oCell.val = formattedVal;
                oCell.flags = flags;
                oCell.condition = alertLevel;
                oCell["cell-reference"] = {
					context: this._memberContextOfColRow(oCell.x, oCell.y),
					flags: flags,
					x: oCell.x,
					y: oCell.y
                };
                oCell.attrs = {
                    idx : idx,
                    row : rowIndex,
                    col : colIndex
                };

                rowIndex++;
            }

            colIndex++;
        }
    }

    //convert to 1D array
    var countOfRows = resultCells2D.length;
    for (row = 0; row < countOfRows; row++) {
        var countOfCols = resultCells2D[row].length;
        for (col = 0; col < countOfCols; col++) {
            oCell = resultCells2D[row][col];
            resultCells.push(oCell);
        }
    }
	if(this.profilingEnabled){
		this._PROFILER_.end(pid);
	}

    return resultCells;
};

/**
 * insert col/row at given index
 * this only works for custom cells for the moment
 * @param col required: whether it's a column insert
 * @param index required: the index position to insert
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype.insertLineAt = function(col, index) {
	var cell, key, x, y;
	var that = this;

	var _fnGetNewXY = function(xy, col, index) {
		
		if (col && xy.x >= index) {
			xy.x += 1;
		} else if (!col && xy.y >= index){
			xy.y += 1;	
		}

		xy.valid = true;
		
		return xy;
	};

	var _updateFormula = function(col, index) {
		var newHashOfFormulas = {};

		$.each(that.hashOfFormulas, function(key, formula) {
			var oCell = that._formulaKeyToXY(key);
			var validatedFormula = that._validateFormula(formula, _fnGetNewXY, col, index);
				
			if (validatedFormula.formula) {
				var newKeyXY = _fnGetNewXY(oCell, col, index);  
	        	var newKey = that._buildCellKey(newKeyXY.x, newKeyXY.y);
	        	newHashOfFormulas[newKey] = validatedFormula.formula;	
			}
	        
		});
		that.hashOfFormulas = newHashOfFormulas;
		that._buildHashOfFormulaRefs();
	};

	if (this.hashOfCustomCellData) {
		var customCellData = {};
		for (key in this.hashOfCustomCellData) {
			cell = this.hashOfCustomCellData[key];
			x = cell.x;
			y = cell.y;
			//if manipulating cols
			if (col) {
				if(cell.x >= index) {
					cell.x = ++x;
				}
			} else {
				if(cell.y >= index) {
					cell.y = ++y;
				}
			}
			var cellKey = this._buildCellKey(x, y);
			customCellData[cellKey] = cell;
		}
		this.hashOfCustomCellData = customCellData;

        _updateFormula(col, index);

		this._redrawGrid();
	}
};

/**
 * delete col/row at given index
 * this only works for custom cells for the moment
 * @param col required: whether it's a column delete
 * @param indics required: the array of index position to delete
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype.deleteLineAt = function(col, indics) {
    var cell, key, x, y, remove, index;
    var temp;
    var that = this;

	var _fnGetNewXY = function(xy, col, indicsObj) {
		var count = 0;
		var valid = true;
		var indics = Object.keys(indicsObj);
		if (col) {
			for (var i = 0; i < indics.length; i++) {
				if (xy.x > indics[i]) {
					count++;
				} else if (xy.x === parseInt(indics[i], 10)) {
					valid = false;
					break;
				}
			}
			if (valid) {
				xy.x -= count;
			}		
		} else {
			for (var j = 0; j < indics.length; j++) {
				if (xy.y > indics[j]) {
					count++;
				} else if (xy.y === parseInt(indics[j], 10)) {
					valid = false;
					break;
				}
			}
			if (valid) {
				xy.y -= count;
			}		
		}
		xy.valid = valid;
		
		return xy;
	};

	var _updateFormula = function(col, indics) {
		var newHashOfFormulas = {};

		$.each(that.hashOfFormulas, function(key, formula) {
			var oCell = that._formulaKeyToXY(key);

			//if the formula cell not be deleted
			if ((col && indics[oCell.x] !== true) || (!col && indics[oCell.y] !== true)) {
				var validatedFormula = that._validateFormula(formula, _fnGetNewXY, col, indics);

				if (validatedFormula.formula) {
					var newKeyXY = _fnGetNewXY(oCell, col, indics);  
			        var newKey = that._buildCellKey(newKeyXY.x, newKeyXY.y);
			        newHashOfFormulas[newKey] = validatedFormula.formula;
			        if (!validatedFormula.valid) {		        	
			        	that._changeCustomCellValue(oCell.x, oCell.y, {
			                val : "",
			                editValue : validatedFormula.formula,
			                formatted : "#REF!"
			            });
			        }
				}
			        
			} else {
				that._removeFormulaOnCell(oCell);
			}
		});
		that.hashOfFormulas = newHashOfFormulas;
		that._buildHashOfFormulaRefs();
	};

    if (this.hashOfCustomCellData) {
        var customCellData = {};
        for (key in this.hashOfCustomCellData) {
            remove = false;
            cell = this.hashOfCustomCellData[key];
            x = cell.x;
            y = cell.y;
            //if manipulating cols
            if (col) {
                if(indics[cell.x] === true) {
                    remove = true;
                } else {
					temp = cell.x;
					for(index in indics) {
						if(temp > index) {
							cell.x = --x;
						}
					}
                }
            } else {
                if(indics[cell.y] === true) {
                    remove = true;
                } else {
					temp = cell.y;
					for(index in indics) {
						if(temp > index) {
							cell.y = --y;
						}
					}
                }
            }
            if (!remove) {
                customCellData[that._buildCellKey(x, y)] = cell;
            }
        }
        this.hashOfCustomCellData = customCellData;
        
        _updateFormula(col, indics);

        this._redrawGrid();
    }
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.getFocusedCoordinate = function() {
	var focusedCell = this.oFocusedCell;
	return {x: focusedCell.col, y: focusedCell.row};
};

sap.fpa.ui.control.analyticgrid.Grid.prototype.getCustomCellMemberContext = function(col, row) {
    var colTupleIndex = col - this.numberOfHeaderCols, rowTupleIndex = row - this.numberOfHeaderRows, memberContext = {};
    var dimBase, i;
    var dim = null,
        attrCnt = null;
    //header member context is available for any cells out of data cell range
    if (!this._isEditingFreeCell(col, row)) {
        return memberContext;
    }

    if (colTupleIndex < 0 || rowTupleIndex < 0) {
        //for row dimension context
        if (colTupleIndex < 0) {
            dimBase = 0;
            for (i = 0; i < this.numberOfRowDimensions; i++) {
                dim = this.rowAxis.dimensions[i];

                if(this.getFilterDimensions()[dim.id]) {
                    continue;
                }

                dimBase++;

                if (dim.attrs) {
                    attrCnt = dim.attrs.length;
                    dimBase += attrCnt;
                }

                if (dimBase > col) {
                    memberContext[dim.id] = {
                        dimensions: dim
                    };
                    break;
                }
            }
        }

        //for col dimension context
        if (rowTupleIndex < 0) {
            dimBase = 0;
            for (i = 0; i < this.numberOfColDimensions; i++) {
                dim = this.colAxis.dimensions[i];

                if(this.getFilterDimensions()[dim.id]) {
                    continue;
                }

                dimBase++;

                if (dim.attrs) {
                    attrCnt = dim.attrs.length;
                    dimBase += attrCnt;
                }

                if (dimBase > row) {
                    memberContext[dim.id] = {
                        dimensions: dim
                    };
                    break;
                }
            }
        }
    } else {
        var _buildMemberContext = function(axis, tupleIndex) {
            var i = 0;
            if (!axis) {
                return;
            }

            var tuple = axis.tuples[tupleIndex], dimensions = axis.dimensions, dimCount = dimensions.length;

            if (!tuple) {
                return;
            }

            for (i = 0; i < dimCount; i++) {
                var dim = dimensions[i];
                var members = dim.members;
                var member = members[tuple[i]];

                //we don't provide seq in exposed member context any more as it's for grid internal use
                memberContext[dim.id] = {
                    dimension: dim,
                    member: member
                };
            }
        };

        _buildMemberContext(this.colAxis, colTupleIndex);
        _buildMemberContext(this.rowAxis, rowTupleIndex);
    }


    return memberContext;
};
/**
 * post an error message to message bar when necessary
 * 
 * @author qianze.zhang@sap.com
 * @param type required: type of msg
 * @param translatableText required: a translatable error message
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype._postMsg = function(type, translatableText) {
    sap.fpa.ui.infra.common.getMsgCenter().postMsg(type, "", translatableText);
};

/**
 * prepend starred element
 * 
 * @author qianze.zhang@sap.com
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype.starredHtml = function(x, y, cell, item) {
	var oCell = cell || this._getCustomCell(x,y);
	if (oCell) {
		if (oCell.starred) {
			item.find("div:first").prepend("<span class='starred'></span>");
		}
	}
};


/**
 * before handlers for starting a custom cell update batch, optional
 * 
 * @author qianze.zhang@sap.com
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype.beginBatchUpdate = function() {
	this.batchQueue = [];
	this.setBatching(true);
};


/**
 * before handlers for starting a custom cell update batch, optional
 * 
 * @author qianze.zhang@sap.com
 */
sap.fpa.ui.control.analyticgrid.Grid.prototype.endBatchUpdate = function() {
    this.sequenceOfFiringCustomBatchUpdatedEvent = this.sequenceOfFiringCustomBatchUpdatedEvent || 0;
    this.sequenceOfFiringCustomBatchUpdatedEvent++;

    var that = this, mySequence = this.sequenceOfFiringCustomBatchUpdatedEvent;
    this.setBatching(false);
    if(this.batchQueue.length !== 0) {
        this.redoStack = [];
        this.undoStack.push(this.batchQueue);
    }

    this.batchQueue = [];
    setTimeout(function(){
        if(mySequence === that.sequenceOfFiringCustomBatchUpdatedEvent) {
            that.fireGridCustomBatchUpdated({
                furtherUndo: that.undoStack.length > 0,
                furtherRedo: that.redoStack.length > 0
            });
        }
    }, 50);
};

/**
 * TODO:
 * 1) undo redo support formula
 *
 */

sap.fpa.ui.control.analyticgrid.Grid.prototype._isApplicableForMemberExpression = function(oCell, sType) {
	var i = 0;
	var iRowIndex = 0;

    if (!sType || this.colAxis === null || this.colAxis === undefined) {
        return false;
    }

	while(i < this.colAxis.dimensions.length) {
		if(this.colAxis.dimensions[i].attrs) {
			iRowIndex += this.colAxis.dimensions[i].attrs.length;
		}

		++iRowIndex;
		++i;
	}

    //if it is, then detect if it is dummy cell
    if (oCell.row <= iRowIndex) {
        var oDisplayedCell = $("td[x='" + oCell.col + "'][y='" + oCell.row + "']");
        if ($(oDisplayedCell).hasClass("dummyCell") /*&& (!$(oLeftSiblingCell).hasClass("dummyCell"))*/) {
            return true;
        }
/*
		if(oCell.col > this.numberOfTotalCols ||
			oCell.row > this.numberOfTotalRows) {
			return true;
		}*/
    }
    return false;
};

sap.fpa.ui.control.analyticgrid.Grid.prototype._getApplicableMemberExpression = function(oCell) {
	var aType = ["ytd", "timevariance", "variance", "delta"];
	var i = 0;
	for(i = 0; i < aType.length; ++i) {
		if(this._isApplicableForMemberExpression(oCell, aType[i])) {
			return aType[i];
		}
	}

	return null;
};